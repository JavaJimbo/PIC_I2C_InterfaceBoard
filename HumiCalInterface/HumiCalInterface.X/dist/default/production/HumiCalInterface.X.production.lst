

Microchip Technology PIC18 LITE Macro Assembler V1.33 build 59893 
                                                                                               Sat Jun 20 05:15:29 2020

Microchip Technology Omniscient Code Generator (Lite mode) build 59893
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	idataBANK1,global,class=CODE,delta=1
     7                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    13                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    15                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    16                           	psect	text0,global,reloc=2,class=CODE,delta=1
    17                           	psect	text1,global,reloc=2,class=CODE,delta=1
    18                           	psect	text2,global,reloc=2,class=CODE,delta=1
    19                           	psect	text3,global,reloc=2,class=CODE,delta=1
    20                           	psect	text4,global,reloc=2,class=CODE,delta=1
    21                           	psect	text5,global,reloc=2,class=CODE,delta=1
    22                           	psect	text6,global,reloc=2,class=CODE,delta=1
    23                           	psect	text7,global,reloc=2,class=CODE,delta=1
    24                           	psect	text8,global,reloc=2,class=CODE,delta=1
    25                           	psect	text9,global,reloc=2,class=CODE,delta=1
    26                           	psect	text10,global,reloc=2,class=CODE,delta=1
    27                           	psect	text11,global,reloc=2,class=CODE,delta=1
    28                           	psect	text12,global,reloc=2,class=CODE,delta=1
    29                           	psect	text13,global,reloc=2,class=CODE,delta=1
    30                           	psect	text14,global,reloc=2,class=CODE,delta=1
    31                           	psect	text15,global,reloc=2,class=CODE,delta=1
    32                           	psect	text16,global,reloc=2,class=CODE,delta=1
    33                           	psect	text17,global,reloc=2,class=CODE,delta=1
    34                           	psect	text18,global,reloc=2,class=CODE,delta=1
    35                           	psect	text19,global,reloc=2,class=CODE,delta=1
    36                           	psect	text20,global,reloc=2,class=CODE,delta=1
    37                           	psect	text21,global,reloc=2,class=CODE,delta=1
    38                           	psect	text22,global,reloc=2,class=CODE,delta=1
    39                           	psect	text23,global,reloc=2,class=CODE,delta=1
    40                           	psect	text24,global,reloc=2,class=CODE,delta=1
    41                           	psect	text25,global,reloc=2,class=CODE,delta=1
    42                           	psect	text26,global,reloc=2,class=CODE,delta=1
    43                           	psect	text27,global,reloc=2,class=CODE,delta=1
    44                           	psect	text28,global,reloc=2,class=CODE,delta=1
    45                           	psect	text29,global,reloc=2,class=CODE,delta=1
    46                           	psect	text30,global,reloc=2,class=CODE,delta=1
    47                           	psect	text31,global,reloc=2,class=CODE,delta=1
    48                           	psect	text32,global,reloc=2,class=CODE,delta=1
    49                           	psect	text33,global,reloc=2,class=CODE,delta=1
    50                           	psect	text34,global,reloc=2,class=CODE,delta=1
    51                           	psect	text35,global,reloc=2,class=CODE,delta=1
    52                           	psect	text36,global,reloc=2,class=CODE,delta=1
    53                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    54                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    55                           	psect	text38,global,reloc=2,class=CODE,delta=1
    56                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    57                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    58  0000                     
    59                           	psect	idataCOMRAM
    60  00160E                     __pidataCOMRAM:
    61                           	opt stack 0
    62                           
    63                           ;initializer for _potSelect
    64  00160E  0001               	dw	1
    65                           
    66                           ;initializer for _sensorNumber
    67  001610  0001               	dw	1
    68                           
    69                           	psect	idataBANK1
    70  0012A2                     __pidataBANK1:
    71                           	opt stack 0
    72                           
    73                           ;initializer for _outBuffer
    74  0012A2  01                 	db	1
    75  0012A3  02                 	db	2
    76  0012A4  03                 	db	3
    77  0012A5  04                 	db	4
    78  0012A6  05                 	db	5
    79  0012A7  06                 	db	6
    80  0012A8  07                 	db	7
    81  0012A9  08                 	db	8
    82  0012AA  00                 	db	0
    83  0012AB  00                 	db	0
    84  0012AC  00                 	db	0
    85  0012AD  00                 	db	0
    86  0012AE  00                 	db	0
    87  0012AF  00                 	db	0
    88  0012B0  00                 	db	0
    89  0012B1  00                 	db	0
    90  0012B2  00                 	db	0
    91  0012B3  00                 	db	0
    92  0012B4  00                 	db	0
    93  0012B5  00                 	db	0
    94  0012B6  00                 	db	0
    95  0012B7  00                 	db	0
    96  0012B8  00                 	db	0
    97  0012B9  00                 	db	0
    98  0012BA  00                 	db	0
    99  0012BB  00                 	db	0
   100  0012BC  00                 	db	0
   101  0012BD  00                 	db	0
   102  0012BE  00                 	db	0
   103  0012BF  00                 	db	0
   104  0012C0  00                 	db	0
   105  0012C1  00                 	db	0
   106  0012C2  00                 	db	0
   107  0012C3  00                 	db	0
   108  0012C4  00                 	db	0
   109  0012C5  00                 	db	0
   110  0012C6  00                 	db	0
   111  0012C7  00                 	db	0
   112  0012C8  00                 	db	0
   113  0012C9  00                 	db	0
   114  0012CA  00                 	db	0
   115  0012CB  00                 	db	0
   116  0012CC  00                 	db	0
   117  0012CD  00                 	db	0
   118  0012CE  00                 	db	0
   119  0012CF  00                 	db	0
   120  0012D0  00                 	db	0
   121  0012D1  00                 	db	0
   122  0012D2  00                 	db	0
   123  0012D3  00                 	db	0
   124  0012D4  00                 	db	0
   125  0012D5  00                 	db	0
   126  0012D6  00                 	db	0
   127  0012D7  00                 	db	0
   128  0012D8  00                 	db	0
   129  0012D9  00                 	db	0
   130  0012DA  00                 	db	0
   131  0012DB  00                 	db	0
   132  0012DC  00                 	db	0
   133  0012DD  00                 	db	0
   134  0012DE  00                 	db	0
   135  0012DF  00                 	db	0
   136  0012E0  00                 	db	0
   137  0012E1  00                 	db	0
   138  0012E2  00                 	db	0
   139                           
   140                           	psect	mediumconst
   141  007D72                     __pmediumconst:
   142                           	opt stack 0
   143  007D72  00                 	db	0
   144  007D73                     _dpowers:
   145                           	opt stack 0
   146  007D73  0001               	dw	1
   147  007D75  000A               	dw	10
   148  007D77  0064               	dw	100
   149  007D79  03E8               	dw	1000
   150  007D7B  2710               	dw	10000
   151  007D7D                     __end_of_dpowers:
   152                           	opt stack 0
   153  0000                     _ADCON0	set	4034
   154  0000                     _ADCON1	set	4033
   155  0000                     _ADCON2	set	4032
   156  0000                     _EEADR	set	4009
   157  0000                     _EECON1bits	set	4006
   158  0000                     _EECON2	set	4007
   159  0000                     _EEDATA	set	4008
   160  0000                     _INTCON	set	4082
   161  0000                     _INTCONbits	set	4082
   162  0000                     _PIE1	set	3997
   163  0000                     _PORTA	set	3968
   164  0000                     _PORTAbits	set	3968
   165  0000                     _PORTBbits	set	3969
   166  0000                     _PORTC	set	3970
   167  0000                     _PORTD	set	3971
   168  0000                     _PORTDbits	set	3971
   169  0000                     _PORTE	set	3972
   170  0000                     _PORTEbits	set	3972
   171  0000                     _RCREG	set	4014
   172  0000                     _SPBRG	set	4015
   173  0000                     _SSPADD	set	4040
   174  0000                     _SSPBUF	set	4041
   175  0000                     _SSPCON1	set	4038
   176  0000                     _SSPSTAT	set	4039
   177  0000                     _T1CON	set	4045
   178  0000                     _TRISA	set	3986
   179  0000                     _TRISB	set	3987
   180  0000                     _TRISC	set	3988
   181  0000                     _TRISD	set	3989
   182  0000                     _TRISE	set	3990
   183  0000                     _TXREG	set	4013
   184  0000                     _ACKDT	set	32301
   185  0000                     _ACKEN	set	32300
   186  0000                     _ACKSTAT	set	32302
   187  0000                     _BRGH	set	32098
   188  0000                     _CREN	set	32092
   189  0000                     _GIE	set	32663
   190  0000                     _OERR	set	32089
   191  0000                     _PEIE	set	32662
   192  0000                     _PEN	set	32298
   193  0000                     _RBPU	set	32655
   194  0000                     _RCEN	set	32299
   195  0000                     _RCIE	set	31981
   196  0000                     _RCIF	set	31989
   197  0000                     _RX9	set	32094
   198  0000                     _SEN	set	32296
   199  0000                     _SPEN	set	32095
   200  0000                     _SREN	set	32093
   201  0000                     _SSPIE	set	31979
   202  0000                     _SSPIF	set	31987
   203  0000                     _SYNC	set	32100
   204  0000                     _T1CKPS0	set	32364
   205  0000                     _T1CKPS1	set	32365
   206  0000                     _TMR1CS	set	32361
   207  0000                     _TMR1IE	set	31976
   208  0000                     _TMR1IF	set	31984
   209  0000                     _TMR1ON	set	32360
   210  0000                     _TMR2IE	set	31977
   211  0000                     _TX9	set	32102
   212  0000                     _TXEN	set	32101
   213  0000                     _TXIE	set	31980
   214  0000                     _TXIF	set	31988
   215  007D7D                     __stringdata:
   216                           	opt stack 0
   217  007D7D                     STR_1:
   218  007D7D  0D                 	db	13
   219  007D7E  0D                 	db	13
   220  007D7F  53                 	db	83	;'S'
   221  007D80  74                 	db	116	;'t'
   222  007D81  61                 	db	97	;'a'
   223  007D82  72                 	db	114	;'r'
   224  007D83  74                 	db	116	;'t'
   225  007D84  69                 	db	105	;'i'
   226  007D85  6E                 	db	110	;'n'
   227  007D86  67                 	db	103	;'g'
   228  007D87  20                 	db	32
   229  007D88  48                 	db	72	;'H'
   230  007D89  75                 	db	117	;'u'
   231  007D8A  6D                 	db	109	;'m'
   232  007D8B  69                 	db	105	;'i'
   233  007D8C  43                 	db	67	;'C'
   234  007D8D  61                 	db	97	;'a'
   235  007D8E  6C                 	db	108	;'l'
   236  007D8F  20                 	db	32
   237  007D90  52                 	db	82	;'R'
   238  007D91  65                 	db	101	;'e'
   239  007D92  76                 	db	118	;'v'
   240  007D93  20                 	db	32
   241  007D94  32                 	db	50	;'2'
   242  007D95  20                 	db	32
   243  007D96  49                 	db	73	;'I'
   244  007D97  6E                 	db	110	;'n'
   245  007D98  74                 	db	116	;'t'
   246  007D99  65                 	db	101	;'e'
   247  007D9A  72                 	db	114	;'r'
   248  007D9B  66                 	db	102	;'f'
   249  007D9C  61                 	db	97	;'a'
   250  007D9D  63                 	db	99	;'c'
   251  007D9E  65                 	db	101	;'e'
   252  007D9F  20                 	db	32
   253  007DA0  42                 	db	66	;'B'
   254  007DA1  6F                 	db	111	;'o'
   255  007DA2  61                 	db	97	;'a'
   256  007DA3  72                 	db	114	;'r'
   257  007DA4  64                 	db	100	;'d'
   258  007DA5  20                 	db	32
   259  007DA6  61                 	db	97	;'a'
   260  007DA7  74                 	db	116	;'t'
   261  007DA8  20                 	db	32
   262  007DA9  31                 	db	49	;'1'
   263  007DAA  32                 	db	50	;'2'
   264  007DAB  30                 	db	48	;'0'
   265  007DAC  30                 	db	48	;'0'
   266  007DAD  20                 	db	32
   267  007DAE  42                 	db	66	;'B'
   268  007DAF  61                 	db	97	;'a'
   269  007DB0  75                 	db	117	;'u'
   270  007DB1  64                 	db	100	;'d'
   271  007DB2  2E                 	db	46
   272  007DB3  20                 	db	32
   273  007DB4  43                 	db	67	;'C'
   274  007DB5  6F                 	db	111	;'o'
   275  007DB6  6D                 	db	109	;'m'
   276  007DB7  70                 	db	112	;'p'
   277  007DB8  69                 	db	105	;'i'
   278  007DB9  6C                 	db	108	;'l'
   279  007DBA  65                 	db	101	;'e'
   280  007DBB  64                 	db	100	;'d'
   281  007DBC  20                 	db	32
   282  007DBD  36                 	db	54	;'6'
   283  007DBE  2F                 	db	47
   284  007DBF  32                 	db	50	;'2'
   285  007DC0  30                 	db	48	;'0'
   286  007DC1  2F                 	db	47
   287  007DC2  32                 	db	50	;'2'
   288  007DC3  30                 	db	48	;'0'
   289  007DC4  32                 	db	50	;'2'
   290  007DC5  30                 	db	48	;'0'
   291  007DC6  00                 	db	0
   292  007DC7                     STR_2:
   293  007DC7  0D                 	db	13
   294  007DC8  0D                 	db	13
   295  007DC9  49                 	db	73	;'I'
   296  007DCA  32                 	db	50	;'2'
   297  007DCB  43                 	db	67	;'C'
   298  007DCC  20                 	db	32
   299  007DCD  69                 	db	105	;'i'
   300  007DCE  6E                 	db	110	;'n'
   301  007DCF  69                 	db	105	;'i'
   302  007DD0  74                 	db	116	;'t'
   303  007DD1  69                 	db	105	;'i'
   304  007DD2  61                 	db	97	;'a'
   305  007DD3  6C                 	db	108	;'l'
   306  007DD4  69                 	db	105	;'i'
   307  007DD5  7A                 	db	122	;'z'
   308  007DD6  65                 	db	101	;'e'
   309  007DD7  64                 	db	100	;'d'
   310  007DD8  2E                 	db	46
   311  007DD9  20                 	db	32
   312  007DDA  57                 	db	87	;'W'
   313  007DDB  61                 	db	97	;'a'
   314  007DDC  74                 	db	116	;'t'
   315  007DDD  63                 	db	99	;'c'
   316  007DDE  68                 	db	104	;'h'
   317  007DDF  64                 	db	100	;'d'
   318  007DE0  6F                 	db	111	;'o'
   319  007DE1  67                 	db	103	;'g'
   320  007DE2  20                 	db	32
   321  007DE3  74                 	db	116	;'t'
   322  007DE4  69                 	db	105	;'i'
   323  007DE5  6D                 	db	109	;'m'
   324  007DE6  65                 	db	101	;'e'
   325  007DE7  72                 	db	114	;'r'
   326  007DE8  20                 	db	32
   327  007DE9  65                 	db	101	;'e'
   328  007DEA  6E                 	db	110	;'n'
   329  007DEB  61                 	db	97	;'a'
   330  007DEC  62                 	db	98	;'b'
   331  007DED  6C                 	db	108	;'l'
   332  007DEE  65                 	db	101	;'e'
   333  007DEF  64                 	db	100	;'d'
   334  007DF0  3A                 	db	58	;':'
   335  007DF1  20                 	db	32
   336  007DF2  34                 	db	52	;'4'
   337  007DF3  20                 	db	32
   338  007DF4  73                 	db	115	;'s'
   339  007DF5  65                 	db	101	;'e'
   340  007DF6  63                 	db	99	;'c'
   341  007DF7  6F                 	db	111	;'o'
   342  007DF8  6E                 	db	110	;'n'
   343  007DF9  64                 	db	100	;'d'
   344  007DFA  20                 	db	32
   345  007DFB  74                 	db	116	;'t'
   346  007DFC  69                 	db	105	;'i'
   347  007DFD  6D                 	db	109	;'m'
   348  007DFE  65                 	db	101	;'e'
   349  007DFF  6F                 	db	111	;'o'
   350  007E00  75                 	db	117	;'u'
   351  007E01  74                 	db	116	;'t'
   352  007E02  0D                 	db	13
   353  007E03  0D                 	db	13
   354  007E04  00                 	db	0
   355  007E05                     STR_13:
   356  007E05  3E                 	db	62	;'>'
   357  007E06  25                 	db	37
   358  007E07  63                 	db	99	;'c'
   359  007E08  20                 	db	32
   360  007E09  23                 	db	35
   361  007E0A  53                 	db	83	;'S'
   362  007E0B  25                 	db	37
   363  007E0C  64                 	db	100	;'d'
   364  007E0D  3A                 	db	58	;':'
   365  007E0E  20                 	db	32
   366  007E0F  50                 	db	80	;'P'
   367  007E10  6F                 	db	111	;'o'
   368  007E11  74                 	db	116	;'t'
   369  007E12  20                 	db	32
   370  007E13  76                 	db	118	;'v'
   371  007E14  61                 	db	97	;'a'
   372  007E15  6C                 	db	108	;'l'
   373  007E16  75                 	db	117	;'u'
   374  007E17  65                 	db	101	;'e'
   375  007E18  3D                 	db	61	;'='
   376  007E19  25                 	db	37
   377  007E1A  64                 	db	100	;'d'
   378  007E1B  2C                 	db	44
   379  007E1C  20                 	db	32
   380  007E1D  46                 	db	70	;'F'
   381  007E1E  55                 	db	85	;'U'
   382  007E1F  53                 	db	83	;'S'
   383  007E20  45                 	db	69	;'E'
   384  007E21  20                 	db	32
   385  007E22  42                 	db	66	;'B'
   386  007E23  4C                 	db	76	;'L'
   387  007E24  4F                 	db	79	;'O'
   388  007E25  57                 	db	87	;'W'
   389  007E26  4E                 	db	78	;'N'
   390  007E27  0D                 	db	13
   391  007E28  00                 	db	0
   392  007E29                     STR_14:
   393  007E29  3E                 	db	62	;'>'
   394  007E2A  25                 	db	37
   395  007E2B  63                 	db	99	;'c'
   396  007E2C  20                 	db	32
   397  007E2D  23                 	db	35
   398  007E2E  53                 	db	83	;'S'
   399  007E2F  25                 	db	37
   400  007E30  64                 	db	100	;'d'
   401  007E31  3A                 	db	58	;':'
   402  007E32  20                 	db	32
   403  007E33  50                 	db	80	;'P'
   404  007E34  6F                 	db	111	;'o'
   405  007E35  74                 	db	116	;'t'
   406  007E36  20                 	db	32
   407  007E37  76                 	db	118	;'v'
   408  007E38  61                 	db	97	;'a'
   409  007E39  6C                 	db	108	;'l'
   410  007E3A  75                 	db	117	;'u'
   411  007E3B  65                 	db	101	;'e'
   412  007E3C  3D                 	db	61	;'='
   413  007E3D  25                 	db	37
   414  007E3E  64                 	db	100	;'d'
   415  007E3F  2C                 	db	44
   416  007E40  20                 	db	32
   417  007E41  46                 	db	70	;'F'
   418  007E42  55                 	db	85	;'U'
   419  007E43  53                 	db	83	;'S'
   420  007E44  45                 	db	69	;'E'
   421  007E45  20                 	db	32
   422  007E46  52                 	db	82	;'R'
   423  007E47  45                 	db	69	;'E'
   424  007E48  41                 	db	65	;'A'
   425  007E49  44                 	db	68	;'D'
   426  007E4A  59                 	db	89	;'Y'
   427  007E4B  0D                 	db	13
   428  007E4C  00                 	db	0
   429  007E4D                     STR_27:
   430  007E4D  3E                 	db	62	;'>'
   431  007E4E  25                 	db	37
   432  007E4F  63                 	db	99	;'c'
   433  007E50  3A                 	db	58	;':'
   434  007E51  20                 	db	32
   435  007E52  45                 	db	69	;'E'
   436  007E53  52                 	db	82	;'R'
   437  007E54  52                 	db	82	;'R'
   438  007E55  4F                 	db	79	;'O'
   439  007E56  52                 	db	82	;'R'
   440  007E57  20                 	db	32
   441  007E58  2D                 	db	45
   442  007E59  20                 	db	32
   443  007E5A  42                 	db	66	;'B'
   444  007E5B  41                 	db	65	;'A'
   445  007E5C  44                 	db	68	;'D'
   446  007E5D  20                 	db	32
   447  007E5E  52                 	db	82	;'R'
   448  007E5F  41                 	db	65	;'A'
   449  007E60  43                 	db	67	;'C'
   450  007E61  4B                 	db	75	;'K'
   451  007E62  20                 	db	32
   452  007E63  4E                 	db	78	;'N'
   453  007E64  55                 	db	85	;'U'
   454  007E65  4D                 	db	77	;'M'
   455  007E66  42                 	db	66	;'B'
   456  007E67  45                 	db	69	;'E'
   457  007E68  52                 	db	82	;'R'
   458  007E69  2E                 	db	46
   459  007E6A  0D                 	db	13
   460  007E6B  00                 	db	0
   461  007E6C                     STR_28:
   462  007E6C  3E                 	db	62	;'>'
   463  007E6D  25                 	db	37
   464  007E6E  63                 	db	99	;'c'
   465  007E6F  3A                 	db	58	;':'
   466  007E70  20                 	db	32
   467  007E71  4F                 	db	79	;'O'
   468  007E72  4B                 	db	75	;'K'
   469  007E73  2C                 	db	44
   470  007E74  20                 	db	32
   471  007E75  25                 	db	37
   472  007E76  64                 	db	100	;'d'
   473  007E77  2C                 	db	44
   474  007E78  20                 	db	32
   475  007E79  25                 	db	37
   476  007E7A  64                 	db	100	;'d'
   477  007E7B  2C                 	db	44
   478  007E7C  20                 	db	32
   479  007E7D  25                 	db	37
   480  007E7E  64                 	db	100	;'d'
   481  007E7F  2C                 	db	44
   482  007E80  20                 	db	32
   483  007E81  25                 	db	37
   484  007E82  64                 	db	100	;'d'
   485  007E83  2C                 	db	44
   486  007E84  20                 	db	32
   487  007E85  25                 	db	37
   488  007E86  64                 	db	100	;'d'
   489  007E87  2C                 	db	44
   490  007E88  0D                 	db	13
   491  007E89  00                 	db	0
   492  007E8A                     STR_21:
   493  007E8A  50                 	db	80	;'P'
   494  007E8B  52                 	db	82	;'R'
   495  007E8C  4F                 	db	79	;'O'
   496  007E8D  47                 	db	71	;'G'
   497  007E8E  52                 	db	82	;'R'
   498  007E8F  41                 	db	65	;'A'
   499  007E90  4D                 	db	77	;'M'
   500  007E91  4D                 	db	77	;'M'
   501  007E92  49                 	db	73	;'I'
   502  007E93  4E                 	db	78	;'N'
   503  007E94  47                 	db	71	;'G'
   504  007E95  20                 	db	32
   505  007E96  53                 	db	83	;'S'
   506  007E97  55                 	db	85	;'U'
   507  007E98  50                 	db	80	;'P'
   508  007E99  50                 	db	80	;'P'
   509  007E9A  4C                 	db	76	;'L'
   510  007E9B  59                 	db	89	;'Y'
   511  007E9C  20                 	db	32
   512  007E9D  49                 	db	73	;'I'
   513  007E9E  53                 	db	83	;'S'
   514  007E9F  20                 	db	32
   515  007EA0  4F                 	db	79	;'O'
   516  007EA1  46                 	db	70	;'F'
   517  007EA2  46                 	db	70	;'F'
   518  007EA3  20                 	db	32
   519  007EA4  00                 	db	0
   520  007EA5                     STR_29:
   521  007EA5  3E                 	db	62	;'>'
   522  007EA6  25                 	db	37
   523  007EA7  63                 	db	99	;'c'
   524  007EA8  3A                 	db	58	;':'
   525  007EA9  20                 	db	32
   526  007EAA  4E                 	db	78	;'N'
   527  007EAB  4F                 	db	79	;'O'
   528  007EAC  20                 	db	32
   529  007EAD  52                 	db	82	;'R'
   530  007EAE  41                 	db	65	;'A'
   531  007EAF  43                 	db	67	;'C'
   532  007EB0  4B                 	db	75	;'K'
   533  007EB1  20                 	db	32
   534  007EB2  52                 	db	82	;'R'
   535  007EB3  45                 	db	69	;'E'
   536  007EB4  53                 	db	83	;'S'
   537  007EB5  50                 	db	80	;'P'
   538  007EB6  4F                 	db	79	;'O'
   539  007EB7  4E                 	db	78	;'N'
   540  007EB8  44                 	db	68	;'D'
   541  007EB9  49                 	db	73	;'I'
   542  007EBA  4E                 	db	78	;'N'
   543  007EBB  47                 	db	71	;'G'
   544  007EBC  2E                 	db	46
   545  007EBD  0D                 	db	13
   546  007EBE  00                 	db	0
   547  007EBF                     STR_24:
   548  007EBF  3E                 	db	62	;'>'
   549  007EC0  25                 	db	37
   550  007EC1  63                 	db	99	;'c'
   551  007EC2  20                 	db	32
   552  007EC3  23                 	db	35
   553  007EC4  53                 	db	83	;'S'
   554  007EC5  25                 	db	37
   555  007EC6  64                 	db	100	;'d'
   556  007EC7  3A                 	db	58	;':'
   557  007EC8  20                 	db	32
   558  007EC9  50                 	db	80	;'P'
   559  007ECA  52                 	db	82	;'R'
   560  007ECB  4F                 	db	79	;'O'
   561  007ECC  47                 	db	71	;'G'
   562  007ECD  52                 	db	82	;'R'
   563  007ECE  41                 	db	65	;'A'
   564  007ECF  4D                 	db	77	;'M'
   565  007ED0  20                 	db	32
   566  007ED1  50                 	db	80	;'P'
   567  007ED2  6F                 	db	111	;'o'
   568  007ED3  74                 	db	116	;'t'
   569  007ED4  31                 	db	49	;'1'
   570  007ED5  0D                 	db	13
   571  007ED6  00                 	db	0
   572  007ED7                     STR_25:
   573  007ED7  3E                 	db	62	;'>'
   574  007ED8  25                 	db	37
   575  007ED9  63                 	db	99	;'c'
   576  007EDA  20                 	db	32
   577  007EDB  23                 	db	35
   578  007EDC  53                 	db	83	;'S'
   579  007EDD  25                 	db	37
   580  007EDE  64                 	db	100	;'d'
   581  007EDF  3A                 	db	58	;':'
   582  007EE0  20                 	db	32
   583  007EE1  50                 	db	80	;'P'
   584  007EE2  52                 	db	82	;'R'
   585  007EE3  4F                 	db	79	;'O'
   586  007EE4  47                 	db	71	;'G'
   587  007EE5  52                 	db	82	;'R'
   588  007EE6  41                 	db	65	;'A'
   589  007EE7  4D                 	db	77	;'M'
   590  007EE8  20                 	db	32
   591  007EE9  50                 	db	80	;'P'
   592  007EEA  6F                 	db	111	;'o'
   593  007EEB  74                 	db	116	;'t'
   594  007EEC  32                 	db	50	;'2'
   595  007EED  0D                 	db	13
   596  007EEE  00                 	db	0
   597  007EEF                     STR_3:
   598  007EEF  50                 	db	80	;'P'
   599  007EF0  72                 	db	114	;'r'
   600  007EF1  6F                 	db	111	;'o'
   601  007EF2  67                 	db	103	;'g'
   602  007EF3  72                 	db	114	;'r'
   603  007EF4  61                 	db	97	;'a'
   604  007EF5  6D                 	db	109	;'m'
   605  007EF6  20                 	db	32
   606  007EF7  73                 	db	115	;'s'
   607  007EF8  75                 	db	117	;'u'
   608  007EF9  70                 	db	112	;'p'
   609  007EFA  70                 	db	112	;'p'
   610  007EFB  6C                 	db	108	;'l'
   611  007EFC  79                 	db	121	;'y'
   612  007EFD  20                 	db	32
   613  007EFE  4F                 	db	79	;'O'
   614  007EFF  46                 	db	70	;'F'
   615  007F00  46                 	db	70	;'F'
   616  007F01  2E                 	db	46
   617  007F02  0D                 	db	13
   618  007F03  00                 	db	0
   619  007F04                     STR_7:
   620  007F04  50                 	db	80	;'P'
   621  007F05  72                 	db	114	;'r'
   622  007F06  6F                 	db	111	;'o'
   623  007F07  67                 	db	103	;'g'
   624  007F08  72                 	db	114	;'r'
   625  007F09  61                 	db	97	;'a'
   626  007F0A  6D                 	db	109	;'m'
   627  007F0B  20                 	db	32
   628  007F0C  73                 	db	115	;'s'
   629  007F0D  75                 	db	117	;'u'
   630  007F0E  70                 	db	112	;'p'
   631  007F0F  70                 	db	112	;'p'
   632  007F10  6C                 	db	108	;'l'
   633  007F11  79                 	db	121	;'y'
   634  007F12  20                 	db	32
   635  007F13  4F                 	db	79	;'O'
   636  007F14  4E                 	db	78	;'N'
   637  007F15  2E                 	db	46
   638  007F16  0D                 	db	13
   639  007F17  00                 	db	0
   640  007F18                     STR_8:
   641  007F18  35                 	db	53	;'5'
   642  007F19  20                 	db	32
   643  007F1A  76                 	db	118	;'v'
   644  007F1B  6F                 	db	111	;'o'
   645  007F1C  6C                 	db	108	;'l'
   646  007F1D  74                 	db	116	;'t'
   647  007F1E  20                 	db	32
   648  007F1F  73                 	db	115	;'s'
   649  007F20  75                 	db	117	;'u'
   650  007F21  70                 	db	112	;'p'
   651  007F22  70                 	db	112	;'p'
   652  007F23  6C                 	db	108	;'l'
   653  007F24  79                 	db	121	;'y'
   654  007F25  20                 	db	32
   655  007F26  4F                 	db	79	;'O'
   656  007F27  4E                 	db	78	;'N'
   657  007F28  2E                 	db	46
   658  007F29  0D                 	db	13
   659  007F2A  00                 	db	0
   660  007F2B                     STR_11:
   661  007F2B  49                 	db	73	;'I'
   662  007F2C  32                 	db	50	;'2'
   663  007F2D  43                 	db	67	;'C'
   664  007F2E  20                 	db	32
   665  007F2F  45                 	db	69	;'E'
   666  007F30  52                 	db	82	;'R'
   667  007F31  52                 	db	82	;'R'
   668  007F32  4F                 	db	79	;'O'
   669  007F33  52                 	db	82	;'R'
   670  007F34  20                 	db	32
   671  007F35  54                 	db	84	;'T'
   672  007F36  49                 	db	73	;'I'
   673  007F37  4D                 	db	77	;'M'
   674  007F38  45                 	db	69	;'E'
   675  007F39  4F                 	db	79	;'O'
   676  007F3A  55                 	db	85	;'U'
   677  007F3B  54                 	db	84	;'T'
   678  007F3C  0D                 	db	13
   679  007F3D  00                 	db	0
   680  007F3E                     STR_9:
   681  007F3E  49                 	db	73	;'I'
   682  007F3F  32                 	db	50	;'2'
   683  007F40  43                 	db	67	;'C'
   684  007F41  20                 	db	32
   685  007F42  72                 	db	114	;'r'
   686  007F43  65                 	db	101	;'e'
   687  007F44  69                 	db	105	;'i'
   688  007F45  6E                 	db	110	;'n'
   689  007F46  69                 	db	105	;'i'
   690  007F47  74                 	db	116	;'t'
   691  007F48  69                 	db	105	;'i'
   692  007F49  61                 	db	97	;'a'
   693  007F4A  6C                 	db	108	;'l'
   694  007F4B  69                 	db	105	;'i'
   695  007F4C  7A                 	db	122	;'z'
   696  007F4D  65                 	db	101	;'e'
   697  007F4E  64                 	db	100	;'d'
   698  007F4F  0D                 	db	13
   699  007F50  00                 	db	0
   700  007F51                     STR_5:
   701  007F51  43                 	db	67	;'C'
   702  007F52  6F                 	db	111	;'o'
   703  007F53  6D                 	db	109	;'m'
   704  007F54  70                 	db	112	;'p'
   705  007F55  72                 	db	114	;'r'
   706  007F56  65                 	db	101	;'e'
   707  007F57  73                 	db	115	;'s'
   708  007F58  73                 	db	115	;'s'
   709  007F59  6F                 	db	111	;'o'
   710  007F5A  72                 	db	114	;'r'
   711  007F5B  20                 	db	32
   712  007F5C  4F                 	db	79	;'O'
   713  007F5D  46                 	db	70	;'F'
   714  007F5E  46                 	db	70	;'F'
   715  007F5F  2E                 	db	46
   716  007F60  0D                 	db	13
   717  007F61  00                 	db	0
   718  007F62                     STR_4:
   719  007F62  43                 	db	67	;'C'
   720  007F63  6F                 	db	111	;'o'
   721  007F64  6D                 	db	109	;'m'
   722  007F65  70                 	db	112	;'p'
   723  007F66  72                 	db	114	;'r'
   724  007F67  65                 	db	101	;'e'
   725  007F68  73                 	db	115	;'s'
   726  007F69  73                 	db	115	;'s'
   727  007F6A  6F                 	db	111	;'o'
   728  007F6B  72                 	db	114	;'r'
   729  007F6C  20                 	db	32
   730  007F6D  4F                 	db	79	;'O'
   731  007F6E  4E                 	db	78	;'N'
   732  007F6F  2E                 	db	46
   733  007F70  0D                 	db	13
   734  007F71  00                 	db	0
   735  007F72                     STR_6:
   736  007F72  43                 	db	67	;'C'
   737  007F73  4F                 	db	79	;'O'
   738  007F74  4D                 	db	77	;'M'
   739  007F75  20                 	db	32
   740  007F76  50                 	db	80	;'P'
   741  007F77  4F                 	db	79	;'O'
   742  007F78  52                 	db	82	;'R'
   743  007F79  54                 	db	84	;'T'
   744  007F7A  20                 	db	32
   745  007F7B  57                 	db	87	;'W'
   746  007F7C  4F                 	db	79	;'O'
   747  007F7D  52                 	db	82	;'R'
   748  007F7E  4B                 	db	75	;'K'
   749  007F7F  53                 	db	83	;'S'
   750  007F80  0D                 	db	13
   751  007F81  00                 	db	0
   752  007F82                     STR_40:
   753  007F82  43                 	db	67	;'C'
   754  007F83  4F                 	db	79	;'O'
   755  007F84  4D                 	db	77	;'M'
   756  007F85  50                 	db	80	;'P'
   757  007F86  52                 	db	82	;'R'
   758  007F87  45                 	db	69	;'E'
   759  007F88  53                 	db	83	;'S'
   760  007F89  53                 	db	83	;'S'
   761  007F8A  4F                 	db	79	;'O'
   762  007F8B  52                 	db	82	;'R'
   763  007F8C  5F                 	db	95	;'_'
   764  007F8D  4F                 	db	79	;'O'
   765  007F8E  46                 	db	70	;'F'
   766  007F8F  46                 	db	70	;'F'
   767  007F90  00                 	db	0
   768  007F91                     STR_41:
   769  007F91  43                 	db	67	;'C'
   770  007F92  4F                 	db	79	;'O'
   771  007F93  4D                 	db	77	;'M'
   772  007F94  50                 	db	80	;'P'
   773  007F95  52                 	db	82	;'R'
   774  007F96  45                 	db	69	;'E'
   775  007F97  53                 	db	83	;'S'
   776  007F98  53                 	db	83	;'S'
   777  007F99  4F                 	db	79	;'O'
   778  007F9A  52                 	db	82	;'R'
   779  007F9B  5F                 	db	95	;'_'
   780  007F9C  4F                 	db	79	;'O'
   781  007F9D  4E                 	db	78	;'N'
   782  007F9E  00                 	db	0
   783  007F9F                     STR_26:
   784  007F9F  42                 	db	66	;'B'
   785  007FA0  41                 	db	65	;'A'
   786  007FA1  44                 	db	68	;'D'
   787  007FA2  20                 	db	32
   788  007FA3  43                 	db	67	;'C'
   789  007FA4  4F                 	db	79	;'O'
   790  007FA5  4D                 	db	77	;'M'
   791  007FA6  4D                 	db	77	;'M'
   792  007FA7  41                 	db	65	;'A'
   793  007FA8  4E                 	db	78	;'N'
   794  007FA9  44                 	db	68	;'D'
   795  007FAA  20                 	db	32
   796  007FAB  00                 	db	0
   797  007FAC                     STR_10:
   798  007FAC  3E                 	db	62	;'>'
   799  007FAD  25                 	db	37
   800  007FAE  63                 	db	99	;'c'
   801  007FAF  20                 	db	32
   802  007FB0  23                 	db	35
   803  007FB1  53                 	db	83	;'S'
   804  007FB2  25                 	db	37
   805  007FB3  64                 	db	100	;'d'
   806  007FB4  3A                 	db	58	;':'
   807  007FB5  20                 	db	32
   808  007FB6  0D                 	db	13
   809  007FB7  00                 	db	0
   810  007FB8                     STR_15:
   811  007FB8  46                 	db	70	;'F'
   812  007FB9  55                 	db	85	;'U'
   813  007FBA  53                 	db	83	;'S'
   814  007FBB  45                 	db	69	;'E'
   815  007FBC  53                 	db	83	;'S'
   816  007FBD  20                 	db	32
   817  007FBE  42                 	db	66	;'B'
   818  007FBF  41                 	db	65	;'A'
   819  007FC0  44                 	db	68	;'D'
   820  007FC1  0D                 	db	13
   821  007FC2  00                 	db	0
   822  007FC3                     STR_12:
   823  007FC3  49                 	db	73	;'I'
   824  007FC4  32                 	db	50	;'2'
   825  007FC5  43                 	db	67	;'C'
   826  007FC6  20                 	db	32
   827  007FC7  45                 	db	69	;'E'
   828  007FC8  52                 	db	82	;'R'
   829  007FC9  52                 	db	82	;'R'
   830  007FCA  4F                 	db	79	;'O'
   831  007FCB  52                 	db	82	;'R'
   832  007FCC  0D                 	db	13
   833  007FCD  00                 	db	0
   834  007FCE                     STR_30:
   835  007FCE  57                 	db	87	;'W'
   836  007FCF  52                 	db	82	;'R'
   837  007FD0  49                 	db	73	;'I'
   838  007FD1  54                 	db	84	;'T'
   839  007FD2  45                 	db	69	;'E'
   840  007FD3  00                 	db	0
   841  007FD4                     STR_34:
   842  007FD4  50                 	db	80	;'P'
   843  007FD5  4F                 	db	79	;'O'
   844  007FD6  54                 	db	84	;'T'
   845  007FD7  31                 	db	49	;'1'
   846  007FD8  00                 	db	0
   847  007FD9                     STR_35:
   848  007FD9  50                 	db	80	;'P'
   849  007FDA  4F                 	db	79	;'O'
   850  007FDB  54                 	db	84	;'T'
   851  007FDC  32                 	db	50	;'2'
   852  007FDD  00                 	db	0
   853  007FDE                     STR_32:
   854  007FDE  52                 	db	82	;'R'
   855  007FDF  45                 	db	69	;'E'
   856  007FE0  41                 	db	65	;'A'
   857  007FE1  44                 	db	68	;'D'
   858  007FE2  00                 	db	0
   859  007FE3                     STR_33:
   860  007FE3  50                 	db	80	;'P'
   861  007FE4  52                 	db	82	;'R'
   862  007FE5  4F                 	db	79	;'O'
   863  007FE6  47                 	db	71	;'G'
   864  007FE7  00                 	db	0
   865  007FE8                     STR_37:
   866  007FE8  4E                 	db	78	;'N'
   867  007FE9  4F                 	db	79	;'O'
   868  007FEA  52                 	db	82	;'R'
   869  007FEB  4D                 	db	77	;'M'
   870  007FEC  00                 	db	0
   871  007FED                     STR_42:
   872  007FED  4C                 	db	76	;'L'
   873  007FEE  45                 	db	69	;'E'
   874  007FEF  44                 	db	68	;'D'
   875  007FF0  53                 	db	83	;'S'
   876  007FF1  00                 	db	0
   877  007FF2                     STR_39:
   878  007FF2  49                 	db	73	;'I'
   879  007FF3  32                 	db	50	;'2'
   880  007FF4  43                 	db	67	;'C'
   881  007FF5  00                 	db	0
   882  007FF6                     STR_31:
   883  007FF6  43                 	db	67	;'C'
   884  007FF7  4F                 	db	79	;'O'
   885  007FF8  4D                 	db	77	;'M'
   886  007FF9  00                 	db	0
   887  007FFA                     STR_36:
   888  007FFA  4F                 	db	79	;'O'
   889  007FFB  54                 	db	84	;'T'
   890  007FFC  50                 	db	80	;'P'
   891  007FFD  00                 	db	0
   892  007FFE                     __end_of__stringdata:
   893                           	opt stack 0
   894                           
   895                           ; #config settings
   896  007FFE  00                 	db	0	; dummy byte at the end
   897  0000                     
   898                           	psect	cinit
   899  000FB4                     __pcinit:
   900                           	opt stack 0
   901  000FB4                     start_initialization:
   902                           	opt stack 0
   903  000FB4                     __initialization:
   904                           	opt stack 0
   905                           
   906                           ; Clear objects allocated to BANK1 (130 bytes)
   907  000FB4  EE01  F000         	lfsr	0,__pbssBANK1
   908  000FB8  0E82               	movlw	130
   909  000FBA                     clear_0:
   910  000FBA  6AEE               	clrf	postinc0,c
   911  000FBC  06E8               	decf	wreg,f,c
   912  000FBE  E1FD               	bnz	clear_0
   913                           
   914                           ; Clear objects allocated to BANK0 (64 bytes)
   915  000FC0  EE00  F0B7         	lfsr	0,__pbssBANK0
   916  000FC4  0E40               	movlw	64
   917  000FC6                     clear_1:
   918  000FC6  6AEE               	clrf	postinc0,c
   919  000FC8  06E8               	decf	wreg,f,c
   920  000FCA  E1FD               	bnz	clear_1
   921                           
   922                           ; Clear objects allocated to COMRAM (11 bytes)
   923  000FCC  EE00  F03A         	lfsr	0,__pbssCOMRAM
   924  000FD0  0E0B               	movlw	11
   925  000FD2                     clear_2:
   926  000FD2  6AEE               	clrf	postinc0,c
   927  000FD4  06E8               	decf	wreg,f,c
   928  000FD6  E1FD               	bnz	clear_2
   929                           
   930                           ; Initialize objects allocated to BANK1 (65 bytes)
   931                           ; load TBLPTR registers with __pidataBANK1
   932  000FD8  0EA2               	movlw	low __pidataBANK1
   933  000FDA  6EF6               	movwf	tblptrl,c
   934  000FDC  0E12               	movlw	high __pidataBANK1
   935  000FDE  6EF7               	movwf	tblptrh,c
   936  000FE0  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   937  000FE2  6EF8               	movwf	tblptru,c
   938  000FE4  EE01  F082         	lfsr	0,__pdataBANK1
   939  000FE8  EE10 F041          	lfsr	1,65
   940  000FEC                     copy_data0:
   941  000FEC  0009               	tblrd		*+
   942  000FEE  CFF5 FFEE          	movff	tablat,postinc0
   943  000FF2  50E5               	movf	postdec1,w,c
   944  000FF4  50E1               	movf	fsr1l,w,c
   945  000FF6  E1FA               	bnz	copy_data0
   946                           
   947                           ; Initialize objects allocated to COMRAM (4 bytes)
   948                           ; load TBLPTR registers with __pidataCOMRAM
   949  000FF8  0E0E               	movlw	low __pidataCOMRAM
   950  000FFA  6EF6               	movwf	tblptrl,c
   951  000FFC  0E16               	movlw	high __pidataCOMRAM
   952  000FFE  6EF7               	movwf	tblptrh,c
   953  001000  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   954  001002  6EF8               	movwf	tblptru,c
   955  001004  EE00  F045         	lfsr	0,__pdataCOMRAM
   956  001008  EE10 F004          	lfsr	1,4
   957  00100C                     copy_data1:
   958  00100C  0009               	tblrd		*+
   959  00100E  CFF5 FFEE          	movff	tablat,postinc0
   960  001012  50E5               	movf	postdec1,w,c
   961  001014  50E1               	movf	fsr1l,w,c
   962  001016  E1FA               	bnz	copy_data1
   963  001018                     end_of_initialization:
   964                           	opt stack 0
   965  001018                     __end_of__initialization:
   966                           	opt stack 0
   967  001018  0E00               	movlw	low (__Lmediumconst shr (0+16))
   968  00101A  6EF8               	movwf	tblptru,c
   969  00101C  0100               	movlb	0
   970  00101E  EF9F  F002         	goto	_main	;jump to C main() function
   971                           tblptru	equ	0xFF8
   972                           tblptrh	equ	0xFF7
   973                           tblptrl	equ	0xFF6
   974                           tablat	equ	0xFF5
   975                           postinc0	equ	0xFEE
   976                           wreg	equ	0xFE8
   977                           postdec1	equ	0xFE5
   978                           fsr1l	equ	0xFE1
   979                           
   980                           	psect	bssCOMRAM
   981  00003A                     __pbssCOMRAM:
   982                           	opt stack 0
   983  00003A                     _multiplexChannel:
   984                           	opt stack 0
   985  00003A                     	ds	2
   986  00003C                     _potValue:
   987                           	opt stack 0
   988  00003C                     	ds	2
   989  00003E                     _OTP_Validation_Flag:
   990                           	opt stack 0
   991  00003E                     	ds	1
   992  00003F                     _UARTflag:
   993                           	opt stack 0
   994  00003F                     	ds	1
   995  000040                     _boardSelect:
   996                           	opt stack 0
   997  000040                     	ds	1
   998  000041                     _errorFlag:
   999                           	opt stack 0
  1000  000041                     	ds	1
  1001  000042                     _slavePIC:
  1002                           	opt stack 0
  1003  000042                     	ds	1
  1004  000043                     _timeout:
  1005                           	opt stack 0
  1006  000043                     	ds	1
  1007  000044                     isr@i:
  1008                           	opt stack 0
  1009  000044                     	ds	1
  1010                           tblptru	equ	0xFF8
  1011                           tblptrh	equ	0xFF7
  1012                           tblptrl	equ	0xFF6
  1013                           tablat	equ	0xFF5
  1014                           postinc0	equ	0xFEE
  1015                           wreg	equ	0xFE8
  1016                           postdec1	equ	0xFE5
  1017                           fsr1l	equ	0xFE1
  1018                           
  1019                           	psect	dataCOMRAM
  1020  000045                     __pdataCOMRAM:
  1021                           	opt stack 0
  1022  000045                     _potSelect:
  1023                           	opt stack 0
  1024  000045                     	ds	2
  1025  000047                     _sensorNumber:
  1026                           	opt stack 0
  1027  000047                     	ds	2
  1028                           tblptru	equ	0xFF8
  1029                           tblptrh	equ	0xFF7
  1030                           tblptrl	equ	0xFF6
  1031                           tablat	equ	0xFF5
  1032                           postinc0	equ	0xFEE
  1033                           wreg	equ	0xFE8
  1034                           postdec1	equ	0xFE5
  1035                           fsr1l	equ	0xFE1
  1036                           
  1037                           	psect	bssBANK0
  1038  0000B7                     __pbssBANK0:
  1039                           	opt stack 0
  1040  0000B7                     parseInString@F5704:
  1041                           	opt stack 0
  1042  0000B7                     	ds	32
  1043  0000D7                     parseInString@F5706:
  1044                           	opt stack 0
  1045  0000D7                     	ds	32
  1046                           tblptru	equ	0xFF8
  1047                           tblptrh	equ	0xFF7
  1048                           tblptrl	equ	0xFF6
  1049                           tablat	equ	0xFF5
  1050                           postinc0	equ	0xFEE
  1051                           wreg	equ	0xFE8
  1052                           postdec1	equ	0xFE5
  1053                           fsr1l	equ	0xFE1
  1054                           
  1055                           	psect	bssBANK1
  1056  000100                     __pbssBANK1:
  1057                           	opt stack 0
  1058  000100                     _UARTbuffer:
  1059                           	opt stack 0
  1060  000100                     	ds	65
  1061  000141                     _inBuffer:
  1062                           	opt stack 0
  1063  000141                     	ds	65
  1064                           tblptru	equ	0xFF8
  1065                           tblptrh	equ	0xFF7
  1066                           tblptrl	equ	0xFF6
  1067                           tablat	equ	0xFF5
  1068                           postinc0	equ	0xFEE
  1069                           wreg	equ	0xFE8
  1070                           postdec1	equ	0xFE5
  1071                           fsr1l	equ	0xFE1
  1072                           
  1073                           	psect	dataBANK1
  1074  000182                     __pdataBANK1:
  1075                           	opt stack 0
  1076  000182                     _outBuffer:
  1077                           	opt stack 0
  1078  000182                     	ds	65
  1079                           tblptru	equ	0xFF8
  1080                           tblptrh	equ	0xFF7
  1081                           tblptrl	equ	0xFF6
  1082                           tablat	equ	0xFF5
  1083                           postinc0	equ	0xFEE
  1084                           wreg	equ	0xFE8
  1085                           postdec1	equ	0xFE5
  1086                           fsr1l	equ	0xFE1
  1087                           
  1088                           	psect	cstackBANK0
  1089  000060                     __pcstackBANK0:
  1090                           	opt stack 0
  1091  000060                     parseInString@numString:
  1092                           	opt stack 0
  1093                           
  1094                           ; 32 bytes @ 0x0
  1095  000060                     	ds	32
  1096  000080                     parseInString@alphaString:
  1097                           	opt stack 0
  1098                           
  1099                           ; 32 bytes @ 0x20
  1100  000080                     	ds	32
  1101  0000A0                     parseInString@punctuationChar:
  1102                           	opt stack 0
  1103                           
  1104                           ; 1 bytes @ 0x40
  1105  0000A0                     	ds	1
  1106  0000A1                     parseInString@k:
  1107                           	opt stack 0
  1108                           
  1109                           ; 1 bytes @ 0x41
  1110  0000A1                     	ds	1
  1111  0000A2                     parseInString@value:
  1112                           	opt stack 0
  1113                           
  1114                           ; 2 bytes @ 0x42
  1115  0000A2                     	ds	2
  1116  0000A4                     parseInString@command:
  1117                           	opt stack 0
  1118                           
  1119                           ; 1 bytes @ 0x44
  1120  0000A4                     	ds	1
  1121  0000A5                     parseInString@j:
  1122                           	opt stack 0
  1123                           
  1124                           ; 1 bytes @ 0x45
  1125  0000A5                     	ds	1
  1126  0000A6                     parseInString@i:
  1127                           	opt stack 0
  1128                           
  1129                           ; 1 bytes @ 0x46
  1130  0000A6                     	ds	1
  1131  0000A7                     parseInString@ch:
  1132                           	opt stack 0
  1133                           
  1134                           ; 1 bytes @ 0x47
  1135  0000A7                     	ds	1
  1136  0000A8                     main@testByte:
  1137                           	opt stack 0
  1138                           
  1139                           ; 1 bytes @ 0x48
  1140  0000A8                     	ds	1
  1141  0000A9                     main@inByte1:
  1142                           	opt stack 0
  1143                           
  1144                           ; 2 bytes @ 0x49
  1145  0000A9                     	ds	2
  1146  0000AB                     main@inByte2:
  1147                           	opt stack 0
  1148                           
  1149                           ; 2 bytes @ 0x4B
  1150  0000AB                     	ds	2
  1151  0000AD                     main@inByte3:
  1152                           	opt stack 0
  1153                           
  1154                           ; 2 bytes @ 0x4D
  1155  0000AD                     	ds	2
  1156  0000AF                     main@inByte4:
  1157                           	opt stack 0
  1158                           
  1159                           ; 2 bytes @ 0x4F
  1160  0000AF                     	ds	2
  1161  0000B1                     main@inByte5:
  1162                           	opt stack 0
  1163                           
  1164                           ; 2 bytes @ 0x51
  1165  0000B1                     	ds	2
  1166  0000B3                     main@CompressorFlag:
  1167                           	opt stack 0
  1168                           
  1169                           ; 1 bytes @ 0x53
  1170  0000B3                     	ds	1
  1171  0000B4                     main@inputData:
  1172                           	opt stack 0
  1173                           
  1174                           ; 2 bytes @ 0x54
  1175  0000B4                     	ds	2
  1176  0000B6                     main@command:
  1177                           	opt stack 0
  1178                           
  1179                           ; 1 bytes @ 0x56
  1180  0000B6                     	ds	1
  1181                           tblptru	equ	0xFF8
  1182                           tblptrh	equ	0xFF7
  1183                           tblptrl	equ	0xFF6
  1184                           tablat	equ	0xFF5
  1185                           postinc0	equ	0xFEE
  1186                           wreg	equ	0xFE8
  1187                           postdec1	equ	0xFE5
  1188                           fsr1l	equ	0xFE1
  1189                           
  1190                           	psect	cstackCOMRAM
  1191  000001                     __pcstackCOMRAM:
  1192                           	opt stack 0
  1193  000001                     toupper@c:
  1194                           	opt stack 0
  1195                           
  1196                           ; 1 bytes @ 0x0
  1197  000001                     	ds	1
  1198  000002                     ??_isr:
  1199                           
  1200                           ; 0 bytes @ 0x1
  1201  000002                     	ds	14
  1202  000010                     isr@dummy:
  1203                           	opt stack 0
  1204                           
  1205                           ; 1 bytes @ 0xF
  1206  000010                     	ds	1
  1207  000011                     isr@temp:
  1208                           	opt stack 0
  1209                           
  1210                           ; 1 bytes @ 0x10
  1211  000011                     	ds	1
  1212  000012                     isr@ch:
  1213                           	opt stack 0
  1214                           
  1215                           ; 1 bytes @ 0x11
  1216  000012                     	ds	1
  1217  000013                     ??_isdigit:
  1218  000013                     ??_isspace:
  1219  000013                     ??_isupper:
  1220  000013                     ?_strcmp:
  1221                           	opt stack 0
  1222  000013                     ?_AD5172_ReceiveByte:
  1223                           	opt stack 0
  1224  000013                     ?___wmul:
  1225                           	opt stack 0
  1226  000013                     ?___awdiv:
  1227                           	opt stack 0
  1228  000013                     ?___lwdiv:
  1229                           	opt stack 0
  1230  000013                     putch@byte:
  1231                           	opt stack 0
  1232  000013                     setProgramSupply@mode:
  1233                           	opt stack 0
  1234  000013                     AD5172_SendByte@byte:
  1235                           	opt stack 0
  1236  000013                     get_Acknowledge@ack:
  1237                           	opt stack 0
  1238  000013                     send_Acknowledge@ack:
  1239                           	opt stack 0
  1240  000013                     ispunct@c:
  1241                           	opt stack 0
  1242  000013                     DelayMs@i:
  1243                           	opt stack 0
  1244  000013                     Read_b_eep@badd:
  1245                           	opt stack 0
  1246  000013                     Write_b_eep@badd:
  1247                           	opt stack 0
  1248  000013                     ___wmul@multiplier:
  1249                           	opt stack 0
  1250  000013                     ___awdiv@dividend:
  1251                           	opt stack 0
  1252  000013                     ___lwdiv@dividend:
  1253                           	opt stack 0
  1254  000013                     strcmp@s1:
  1255                           	opt stack 0
  1256                           
  1257                           ; 2 bytes @ 0x12
  1258  000013                     	ds	1
  1259  000014                     AD5172_Write@dataByte:
  1260                           	opt stack 0
  1261  000014                     AD5172_Set@potSelect:
  1262                           	opt stack 0
  1263  000014                     AD5172_Program@potSelect:
  1264                           	opt stack 0
  1265  000014                     i2c_SlaveWrite@numDataBytes:
  1266                           	opt stack 0
  1267  000014                     _isdigit$1210:
  1268                           	opt stack 0
  1269  000014                     _isspace$1215:
  1270                           	opt stack 0
  1271  000014                     _isupper$1218:
  1272                           	opt stack 0
  1273                           
  1274                           ; 1 bytes @ 0x13
  1275  000014                     	ds	1
  1276  000015                     AD5172_ReceiveByte@byte:
  1277                           	opt stack 0
  1278  000015                     AD5172_Write@potSelect:
  1279                           	opt stack 0
  1280  000015                     AD5172_Set@instructionByte:
  1281                           	opt stack 0
  1282  000015                     AD5172_Program@instructionByte:
  1283                           	opt stack 0
  1284  000015                     i2c_SlaveWrite@device:
  1285                           	opt stack 0
  1286  000015                     Write_b_eep@bdat:
  1287                           	opt stack 0
  1288  000015                     isdigit@c:
  1289                           	opt stack 0
  1290  000015                     isspace@c:
  1291                           	opt stack 0
  1292  000015                     isupper@c:
  1293                           	opt stack 0
  1294  000015                     DelayMs@j:
  1295                           	opt stack 0
  1296  000015                     ___wmul@multiplicand:
  1297                           	opt stack 0
  1298  000015                     ___awdiv@divisor:
  1299                           	opt stack 0
  1300  000015                     ___lwdiv@divisor:
  1301                           	opt stack 0
  1302  000015                     strcmp@s2:
  1303                           	opt stack 0
  1304                           
  1305                           ; 2 bytes @ 0x14
  1306  000015                     	ds	1
  1307  000016                     ??_isalpha:
  1308  000016                     ?_AD5172_Read:
  1309                           	opt stack 0
  1310  000016                     AD5172_Write@instructionByte:
  1311                           	opt stack 0
  1312  000016                     i2c_SlaveWrite@dataByte:
  1313                           	opt stack 0
  1314  000016                     i2c_SlaveRead@numBytes:
  1315                           	opt stack 0
  1316  000016                     Write_b_eep@GIE_BIT_VAL:
  1317                           	opt stack 0
  1318                           
  1319                           ; 1 bytes @ 0x15
  1320  000016                     	ds	1
  1321  000017                     ??_strcmp:
  1322  000017                     DelayMs@k:
  1323                           	opt stack 0
  1324  000017                     i2c_SlaveWrite@i:
  1325                           	opt stack 0
  1326  000017                     i2c_SlaveRead@device:
  1327                           	opt stack 0
  1328  000017                     ___awdiv@counter:
  1329                           	opt stack 0
  1330  000017                     _isalpha$1207:
  1331                           	opt stack 0
  1332  000017                     ___lwdiv@counter:
  1333                           	opt stack 0
  1334  000017                     ___wmul@product:
  1335                           	opt stack 0
  1336                           
  1337                           ; 2 bytes @ 0x16
  1338  000017                     	ds	1
  1339  000018                     i2c_SlaveRead@i:
  1340                           	opt stack 0
  1341  000018                     ___awdiv@sign:
  1342                           	opt stack 0
  1343  000018                     isalpha@c:
  1344                           	opt stack 0
  1345  000018                     strcmp@r:
  1346                           	opt stack 0
  1347  000018                     AD5172_Read@dataByte:
  1348                           	opt stack 0
  1349  000018                     ___lwdiv@quotient:
  1350                           	opt stack 0
  1351                           
  1352                           ; 2 bytes @ 0x17
  1353  000018                     	ds	1
  1354  000019                     ?_atoi:
  1355                           	opt stack 0
  1356  000019                     atoi@s:
  1357                           	opt stack 0
  1358  000019                     ___awdiv@quotient:
  1359                           	opt stack 0
  1360                           
  1361                           ; 2 bytes @ 0x18
  1362  000019                     	ds	1
  1363  00001A                     ?___lwmod:
  1364                           	opt stack 0
  1365  00001A                     AD5172_Read@temp:
  1366                           	opt stack 0
  1367  00001A                     ___lwmod@dividend:
  1368                           	opt stack 0
  1369                           
  1370                           ; 2 bytes @ 0x19
  1371  00001A                     	ds	1
  1372  00001B                     ??_atoi:
  1373  00001B                     setMultiplexerAndBankRelays@sensorNumber:
  1374                           	opt stack 0
  1375                           
  1376                           ; 2 bytes @ 0x1A
  1377  00001B                     	ds	1
  1378  00001C                     AD5172_Read@status:
  1379                           	opt stack 0
  1380  00001C                     ___lwmod@divisor:
  1381                           	opt stack 0
  1382                           
  1383                           ; 2 bytes @ 0x1B
  1384  00001C                     	ds	1
  1385  00001D                     ??_setMultiplexerAndBankRelays:
  1386  00001D                     atoi@sign:
  1387                           	opt stack 0
  1388                           
  1389                           ; 1 bytes @ 0x1C
  1390  00001D                     	ds	1
  1391  00001E                     ___lwmod@counter:
  1392                           	opt stack 0
  1393  00001E                     atoi@a:
  1394                           	opt stack 0
  1395                           
  1396                           ; 2 bytes @ 0x1D
  1397  00001E                     	ds	1
  1398  00001F                     ?_printf:
  1399                           	opt stack 0
  1400  00001F                     setMultiplexerAndBankRelays@remainder:
  1401                           	opt stack 0
  1402  00001F                     printf@f:
  1403                           	opt stack 0
  1404                           
  1405                           ; 2 bytes @ 0x1E
  1406  00001F                     	ds	1
  1407  000020                     
  1408                           ; 0 bytes @ 0x1F
  1409  000020                     	ds	1
  1410  000021                     setMultiplexerAndBankRelays@temp:
  1411                           	opt stack 0
  1412                           
  1413                           ; 2 bytes @ 0x20
  1414  000021                     	ds	2
  1415  000023                     setMultiplexerAndBankRelays@channel:
  1416                           	opt stack 0
  1417                           
  1418                           ; 1 bytes @ 0x22
  1419  000023                     	ds	1
  1420  000024                     setMultiplexerAndBankRelays@quotient:
  1421                           	opt stack 0
  1422                           
  1423                           ; 2 bytes @ 0x23
  1424  000024                     	ds	2
  1425  000026                     setMultiplexerAndBankRelays@dividend:
  1426                           	opt stack 0
  1427                           
  1428                           ; 2 bytes @ 0x25
  1429  000026                     	ds	2
  1430  000028                     setMultiplexerAndBankRelays@boardSelect:
  1431                           	opt stack 0
  1432                           
  1433                           ; 1 bytes @ 0x27
  1434  000028                     	ds	1
  1435  000029                     setMultiplexerAndBankRelays@bank:
  1436                           	opt stack 0
  1437                           
  1438                           ; 2 bytes @ 0x28
  1439  000029                     	ds	4
  1440  00002D                     ??_printf:
  1441                           
  1442                           ; 0 bytes @ 0x2C
  1443  00002D                     	ds	2
  1444  00002F                     printf@flag:
  1445                           	opt stack 0
  1446                           
  1447                           ; 1 bytes @ 0x2E
  1448  00002F                     	ds	1
  1449  000030                     printf@prec:
  1450                           	opt stack 0
  1451                           
  1452                           ; 1 bytes @ 0x2F
  1453  000030                     	ds	1
  1454  000031                     printf@ap:
  1455                           	opt stack 0
  1456                           
  1457                           ; 2 bytes @ 0x30
  1458  000031                     	ds	2
  1459  000033                     printf@_val:
  1460                           	opt stack 0
  1461                           
  1462                           ; 5 bytes @ 0x32
  1463  000033                     	ds	5
  1464  000038                     printf@c:
  1465                           	opt stack 0
  1466                           
  1467                           ; 1 bytes @ 0x37
  1468  000038                     	ds	1
  1469  000039                     ??_main:
  1470                           
  1471                           ; 0 bytes @ 0x38
  1472  000039                     	ds	1
  1473                           tblptru	equ	0xFF8
  1474                           tblptrh	equ	0xFF7
  1475                           tblptrl	equ	0xFF6
  1476                           tablat	equ	0xFF5
  1477                           postinc0	equ	0xFEE
  1478                           wreg	equ	0xFE8
  1479                           postdec1	equ	0xFE5
  1480                           fsr1l	equ	0xFE1
  1481                           
  1482 ;;
  1483 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  1484 ;;
  1485 ;; *************** function _main *****************
  1486 ;; Defined at:
  1487 ;;		line 82 in file "main.c"
  1488 ;; Parameters:    Size  Location     Type
  1489 ;;		None
  1490 ;; Auto vars:     Size  Location     Type
  1491 ;;  inputData       2   84[BANK0 ] int 
  1492 ;;  inByte5         2   81[BANK0 ] int 
  1493 ;;  inByte4         2   79[BANK0 ] int 
  1494 ;;  inByte3         2   77[BANK0 ] int 
  1495 ;;  inByte2         2   75[BANK0 ] int 
  1496 ;;  inByte1         2   73[BANK0 ] int 
  1497 ;;  command         1   86[BANK0 ] unsigned char 
  1498 ;;  CompressorFl    1   83[BANK0 ] unsigned char 
  1499 ;;  testByte        1   72[BANK0 ] unsigned char 
  1500 ;;  i               1    0        unsigned char 
  1501 ;;  ch              1    0        unsigned char 
  1502 ;; Return value:  Size  Location     Type
  1503 ;;		None               void
  1504 ;; Registers used:
  1505 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1506 ;; Tracked objects:
  1507 ;;		On entry : 0/0
  1508 ;;		On exit  : 0/0
  1509 ;;		Unchanged: 0/0
  1510 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1511 ;;      Params:         0       0       0       0       0       0       0       0       0
  1512 ;;      Locals:         0      15       0       0       0       0       0       0       0
  1513 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1514 ;;      Totals:         1      15       0       0       0       0       0       0       0
  1515 ;;Total ram usage:       16 bytes
  1516 ;; Hardware stack levels required when called:    5
  1517 ;; This function calls:
  1518 ;;		_AD5172_Program
  1519 ;;		_AD5172_Read
  1520 ;;		_AD5172_Set
  1521 ;;		_AD5172_Stop
  1522 ;;		_AD5172_Write
  1523 ;;		_Busy_eep
  1524 ;;		_DelayMs
  1525 ;;		_Read_b_eep
  1526 ;;		_Write_b_eep
  1527 ;;		_i2c_SlaveRead
  1528 ;;		_i2c_SlaveWrite
  1529 ;;		_initializePorts
  1530 ;;		_initialize_I2C
  1531 ;;		_parseInString
  1532 ;;		_printf
  1533 ;;		_setMultiplexerAndBankRelays
  1534 ;;		_setProgramSupply
  1535 ;;		_turnCompressorOff
  1536 ;;		_turnCompressorOn
  1537 ;; This function is called by:
  1538 ;;		Startup code after reset
  1539 ;; This function uses a non-reentrant model
  1540 ;;
  1541                           
  1542                           	psect	text0
  1543  00053E                     __ptext0:
  1544                           	opt stack 0
  1545  00053E                     _main:
  1546                           	opt stack 26
  1547                           
  1548                           ;main.c: 84: unsigned char ch,i,testByte;
  1549                           ;main.c: 85: int inByte1, inByte2, inByte3, inByte4, inByte5, inputData;
  1550                           ;main.c: 86: unsigned char command=0;
  1551                           
  1552                           ;incstack = 0
  1553  00053E  0E00               	movlw	0
  1554  000540  0100               	movlb	0	; () banked
  1555  000542  6FB6               	movwf	main@command& (0+255),b
  1556                           
  1557                           ;main.c: 87: unsigned char CompressorFlag=FALSE;
  1558  000544  0E00               	movlw	0
  1559  000546  0100               	movlb	0	; () banked
  1560  000548  6FB3               	movwf	main@CompressorFlag& (0+255),b
  1561                           
  1562                           ;main.c: 88: unsigned char testByte = 'A';
  1563  00054A  0E41               	movlw	65
  1564  00054C  0100               	movlb	0	; () banked
  1565  00054E  6FA8               	movwf	main@testByte& (0+255),b
  1566                           
  1567                           ; BSR set to: 0
  1568                           ;main.c: 90: initializePorts();
  1569  000550  ECA1  F007         	call	_initializePorts	;wreg free
  1570                           
  1571                           ;main.c: 92: PORTEbits.RE0 = 0;
  1572  000554  9084               	bcf	3972,0,c	;volatile
  1573                           
  1574                           ;main.c: 93: PORTEbits.RE1 = 0;
  1575  000556  9284               	bcf	3972,1,c	;volatile
  1576                           
  1577                           ;main.c: 95: setProgramSupply(5);
  1578  000558  0E05               	movlw	5
  1579  00055A  ECE6  F009         	call	_setProgramSupply
  1580                           
  1581                           ;main.c: 96: PORTAbits.RA1 = 0;
  1582  00055E  9280               	bcf	3968,1,c	;volatile
  1583                           
  1584                           ;main.c: 97: PORTAbits.RA2 = 0;
  1585  000560  9480               	bcf	3968,2,c	;volatile
  1586                           
  1587                           ;main.c: 98: PORTAbits.RA3 = 0;
  1588  000562  9680               	bcf	3968,3,c	;volatile
  1589                           
  1590                           ;main.c: 99: PORTAbits.RA5 = 0;
  1591  000564  9A80               	bcf	3968,5,c	;volatile
  1592                           
  1593                           ;main.c: 101: PORTBbits.RB7 = 0;
  1594  000566  9E81               	bcf	3969,7,c	;volatile
  1595                           
  1596                           ;main.c: 102: PORTBbits.RB6 = 0;
  1597  000568  9C81               	bcf	3969,6,c	;volatile
  1598                           
  1599                           ;main.c: 103: PORTBbits.RB5 = 0;
  1600  00056A  9A81               	bcf	3969,5,c	;volatile
  1601                           
  1602                           ;main.c: 104: PORTBbits.RB4 = 0;
  1603  00056C  9881               	bcf	3969,4,c	;volatile
  1604                           
  1605                           ;main.c: 106: PORTDbits.RD7 = 0;
  1606  00056E  9E83               	bcf	3971,7,c	;volatile
  1607                           
  1608                           ;main.c: 107: PORTDbits.RD6 = 0;
  1609  000570  9C83               	bcf	3971,6,c	;volatile
  1610                           
  1611                           ;main.c: 108: PORTDbits.RD5 = 0;
  1612  000572  9A83               	bcf	3971,5,c	;volatile
  1613                           
  1614                           ;main.c: 109: PORTDbits.RD4 = 0;
  1615  000574  9883               	bcf	3971,4,c	;volatile
  1616                           
  1617                           ;main.c: 111: PORTD = 0x00;
  1618  000576  0E00               	movlw	0
  1619  000578  6E83               	movwf	3971,c	;volatile
  1620                           
  1621                           ;main.c: 112: PORTDbits.RD3 = 0;
  1622  00057A  9683               	bcf	3971,3,c	;volatile
  1623                           
  1624                           ;main.c: 114: printf("\r\rStarting HumiCal Rev 2 Interface Board at 1200 Baud. Compiled 
      +                          6/20/2020");
  1625  00057C  0E7D               	movlw	high STR_1
  1626  00057E  6E20               	movwf	printf@f+1,c
  1627  000580  0E7D               	movlw	low STR_1
  1628  000582  6E1F               	movwf	printf@f,c
  1629  000584  ECD6  F005         	call	_printf	;wreg free
  1630                           
  1631                           ;main.c: 115: initialize_I2C();
  1632  000588  ECE6  F00A         	call	_initialize_I2C	;wreg free
  1633                           
  1634                           ;main.c: 116: command=0;
  1635  00058C  0E00               	movlw	0
  1636  00058E  0100               	movlb	0	; () banked
  1637  000590  6FB6               	movwf	main@command& (0+255),b
  1638                           
  1639                           ; BSR set to: 0
  1640                           ;main.c: 117: printf("\r\rI2C initialized. Watchdog timer enabled: 4 second timeout\r\r"
      +                          );
  1641  000592  0E7D               	movlw	high STR_2
  1642  000594  6E20               	movwf	printf@f+1,c
  1643  000596  0EC7               	movlw	low STR_2
  1644  000598  6E1F               	movwf	printf@f,c
  1645  00059A  ECD6  F005         	call	_printf	;wreg free
  1646                           
  1647                           ;main.c: 120: if(TRUE==Read_b_eep(0x00))
  1648  00059E  0E00               	movlw	0
  1649  0005A0  6E14               	movwf	Read_b_eep@badd+1,c
  1650  0005A2  0E00               	movlw	0
  1651  0005A4  6E13               	movwf	Read_b_eep@badd,c
  1652  0005A6  ECEF  F00A         	call	_Read_b_eep	;wreg free
  1653  0005AA  6E39               	movwf	??_main& (0+255),c
  1654  0005AC  0439               	decf	??_main,w,c
  1655  0005AE  A4D8               	btfss	status,2,c
  1656  0005B0  D002               	goto	l173
  1657                           
  1658                           ;main.c: 121: PORTDbits.RD3 = 1;
  1659  0005B2  8683               	bsf	3971,3,c	;volatile
  1660  0005B4  D001               	goto	l175
  1661  0005B6                     l173:
  1662                           
  1663                           ;main.c: 122: else
  1664                           ;main.c: 123: PORTDbits.RD3 = 0;
  1665  0005B6  9683               	bcf	3971,3,c	;volatile
  1666  0005B8                     l175:
  1667  0005B8  0004               	clrwdt		;# 
  1668                           
  1669                           ;main.c: 129: if(0==PORTBbits.RB3)
  1670  0005BA  B681               	btfsc	3969,3,c	;volatile
  1671  0005BC  D016               	goto	l176
  1672                           
  1673                           ;main.c: 130: {
  1674                           ;main.c: 131: CompressorFlag=TRUE;
  1675  0005BE  0E01               	movlw	1
  1676  0005C0  0100               	movlb	0	; () banked
  1677  0005C2  6FB3               	movwf	main@CompressorFlag& (0+255),b
  1678                           
  1679                           ; BSR set to: 0
  1680                           ;main.c: 132: (Busy_eep(), Write_b_eep(0x00,CompressorFlag));
  1681  0005C4  EC04  F00B         	call	_Busy_eep	;wreg free
  1682  0005C8  0E00               	movlw	0
  1683  0005CA  6E14               	movwf	Write_b_eep@badd+1,c
  1684  0005CC  0E00               	movlw	0
  1685  0005CE  6E13               	movwf	Write_b_eep@badd,c
  1686  0005D0  C0B3  F015         	movff	main@CompressorFlag,Write_b_eep@bdat
  1687  0005D4  ECCA  F009         	call	_Write_b_eep	;wreg free
  1688                           
  1689                           ;main.c: 133: PORTDbits.RD3 = 1;
  1690  0005D8  8683               	bsf	3971,3,c	;volatile
  1691                           
  1692                           ;main.c: 134: PORTEbits.RE1 = 1;
  1693  0005DA  8284               	bsf	3972,1,c	;volatile
  1694                           
  1695                           ;main.c: 135: DelayMs(100);
  1696  0005DC  0E00               	movlw	0
  1697  0005DE  6E14               	movwf	DelayMs@i+1,c
  1698  0005E0  0E64               	movlw	100
  1699  0005E2  6E13               	movwf	DelayMs@i,c
  1700  0005E4  EC0E  F009         	call	_DelayMs	;wreg free
  1701                           
  1702                           ;main.c: 136: }
  1703  0005E8  D01A               	goto	l4698
  1704  0005EA                     l176:
  1705                           
  1706                           ;main.c: 137: else if(0==PORTBbits.RB2)
  1707  0005EA  B481               	btfsc	3969,2,c	;volatile
  1708  0005EC  D016               	goto	l178
  1709                           
  1710                           ;main.c: 138: {
  1711                           ;main.c: 139: CompressorFlag=FALSE;
  1712  0005EE  0E00               	movlw	0
  1713  0005F0  0100               	movlb	0	; () banked
  1714  0005F2  6FB3               	movwf	main@CompressorFlag& (0+255),b
  1715                           
  1716                           ; BSR set to: 0
  1717                           ;main.c: 140: (Busy_eep(), Write_b_eep(0x00,CompressorFlag));
  1718  0005F4  EC04  F00B         	call	_Busy_eep	;wreg free
  1719  0005F8  0E00               	movlw	0
  1720  0005FA  6E14               	movwf	Write_b_eep@badd+1,c
  1721  0005FC  0E00               	movlw	0
  1722  0005FE  6E13               	movwf	Write_b_eep@badd,c
  1723  000600  C0B3  F015         	movff	main@CompressorFlag,Write_b_eep@bdat
  1724  000604  ECCA  F009         	call	_Write_b_eep	;wreg free
  1725                           
  1726                           ;main.c: 141: PORTDbits.RD3 = 0;
  1727  000608  9683               	bcf	3971,3,c	;volatile
  1728                           
  1729                           ;main.c: 142: PORTEbits.RE0 = 1;
  1730  00060A  8084               	bsf	3972,0,c	;volatile
  1731                           
  1732                           ;main.c: 143: DelayMs(100);
  1733  00060C  0E00               	movlw	0
  1734  00060E  6E14               	movwf	DelayMs@i+1,c
  1735  000610  0E64               	movlw	100
  1736  000612  6E13               	movwf	DelayMs@i,c
  1737  000614  EC0E  F009         	call	_DelayMs	;wreg free
  1738                           
  1739                           ;main.c: 144: }
  1740  000618  D002               	goto	l4698
  1741  00061A                     l178:
  1742                           
  1743                           ;main.c: 145: else
  1744                           ;main.c: 146: {
  1745                           ;main.c: 147: PORTEbits.RE0 = 0;
  1746  00061A  9084               	bcf	3972,0,c	;volatile
  1747                           
  1748                           ;main.c: 148: PORTEbits.RE1 = 0;
  1749  00061C  9284               	bcf	3972,1,c	;volatile
  1750  00061E                     l4698:
  1751                           
  1752                           ;main.c: 149: }
  1753                           ;main.c: 151: if(TRUE==UARTflag)
  1754  00061E  043F               	decf	_UARTflag,w,c
  1755  000620  A4D8               	btfss	status,2,c
  1756  000622  D7CA               	goto	l175
  1757                           
  1758                           ;main.c: 152: {
  1759                           ;main.c: 153: UARTflag = FALSE;
  1760  000624  0E00               	movlw	0
  1761  000626  6E3F               	movwf	_UARTflag,c
  1762                           
  1763                           ;main.c: 154: errorFlag=0;
  1764  000628  0E00               	movlw	0
  1765  00062A  6E41               	movwf	_errorFlag,c
  1766                           
  1767                           ;main.c: 155: command = parseInString();
  1768  00062C  EC0E  F000         	call	_parseInString	;wreg free
  1769  000630  0100               	movlb	0	; () banked
  1770  000632  6FB6               	movwf	main@command& (0+255),b
  1771                           
  1772                           ; BSR set to: 0
  1773                           ;main.c: 157: if(9==command)
  1774  000634  0100               	movlb	0	; () banked
  1775  000636  51B6               	movf	main@command& (0+255),w,b
  1776  000638  0A09               	xorlw	9
  1777  00063A  A4D8               	btfss	status,2,c
  1778  00063C  D00A               	goto	l4710
  1779                           
  1780                           ; BSR set to: 0
  1781                           ;main.c: 158: {
  1782                           ;main.c: 159: setProgramSupply(9);
  1783  00063E  0E09               	movlw	9
  1784  000640  ECE6  F009         	call	_setProgramSupply
  1785                           
  1786                           ;main.c: 160: printf ("Program supply OFF.\r");
  1787  000644  0E7E               	movlw	high STR_3
  1788  000646  6E20               	movwf	printf@f+1,c
  1789  000648  0EEF               	movlw	low STR_3
  1790  00064A  6E1F               	movwf	printf@f,c
  1791  00064C  ECD6  F005         	call	_printf	;wreg free
  1792                           
  1793                           ;main.c: 161: }
  1794  000650  D023               	goto	l4724
  1795  000652                     l4710:
  1796                           
  1797                           ;main.c: 162: else if (11==command)
  1798  000652  0100               	movlb	0	; () banked
  1799  000654  51B6               	movf	main@command& (0+255),w,b
  1800  000656  0A0B               	xorlw	11
  1801  000658  A4D8               	btfss	status,2,c
  1802  00065A  D009               	goto	l4716
  1803                           
  1804                           ; BSR set to: 0
  1805                           ;main.c: 163: {
  1806                           ;main.c: 164: printf ("Compressor ON.\r");
  1807  00065C  0E7F               	movlw	high STR_4
  1808  00065E  6E20               	movwf	printf@f+1,c
  1809  000660  0E62               	movlw	low STR_4
  1810  000662  6E1F               	movwf	printf@f,c
  1811  000664  ECD6  F005         	call	_printf	;wreg free
  1812                           
  1813                           ;main.c: 165: turnCompressorOn();
  1814  000668  EC41  F00A         	call	_turnCompressorOn	;wreg free
  1815                           
  1816                           ;main.c: 166: }
  1817  00066C  D015               	goto	l4724
  1818  00066E                     l4716:
  1819                           
  1820                           ;main.c: 167: else if (12==command)
  1821  00066E  0100               	movlb	0	; () banked
  1822  000670  51B6               	movf	main@command& (0+255),w,b
  1823  000672  0A0C               	xorlw	12
  1824  000674  A4D8               	btfss	status,2,c
  1825  000676  D009               	goto	l4722
  1826                           
  1827                           ; BSR set to: 0
  1828                           ;main.c: 168: {
  1829                           ;main.c: 169: printf ("Compressor OFF.\r");
  1830  000678  0E7F               	movlw	high STR_5
  1831  00067A  6E20               	movwf	printf@f+1,c
  1832  00067C  0E51               	movlw	low STR_5
  1833  00067E  6E1F               	movwf	printf@f,c
  1834  000680  ECD6  F005         	call	_printf	;wreg free
  1835                           
  1836                           ;main.c: 170: turnCompressorOff();
  1837  000684  EC55  F00A         	call	_turnCompressorOff	;wreg free
  1838                           
  1839                           ;main.c: 171: }
  1840  000688  D007               	goto	l4724
  1841  00068A                     l4722:
  1842                           
  1843                           ;main.c: 172: else setMultiplexerAndBankRelays(boardSelect, sensorNumber);
  1844  00068A  C047  F01B         	movff	_sensorNumber,setMultiplexerAndBankRelays@sensorNumber
  1845  00068E  C048  F01C         	movff	_sensorNumber+1,setMultiplexerAndBankRelays@sensorNumber+1
  1846  000692  5040               	movf	_boardSelect,w,c
  1847  000694  EC0E  F005         	call	_setMultiplexerAndBankRelays
  1848  000698                     l4724:
  1849                           
  1850                           ;main.c: 174: if(6==command)
  1851  000698  0100               	movlb	0	; () banked
  1852  00069A  51B6               	movf	main@command& (0+255),w,b
  1853  00069C  0A06               	xorlw	6
  1854  00069E  A4D8               	btfss	status,2,c
  1855  0006A0  D00A               	goto	l4730
  1856                           
  1857                           ; BSR set to: 0
  1858                           ;main.c: 175: {
  1859                           ;main.c: 176: printf ("COM PORT WORKS\r");
  1860  0006A2  0E7F               	movlw	high STR_6
  1861  0006A4  6E20               	movwf	printf@f+1,c
  1862  0006A6  0E72               	movlw	low STR_6
  1863  0006A8  6E1F               	movwf	printf@f,c
  1864  0006AA  ECD6  F005         	call	_printf	;wreg free
  1865                           
  1866                           ;main.c: 177: command=0;
  1867  0006AE  0E00               	movlw	0
  1868  0006B0  0100               	movlb	0	; () banked
  1869  0006B2  6FB6               	movwf	main@command& (0+255),b
  1870                           
  1871                           ;main.c: 178: }
  1872  0006B4  D1AC               	goto	l4860
  1873  0006B6                     l4730:
  1874                           
  1875                           ; BSR set to: 0
  1876                           ;main.c: 179: else if(4==command)
  1877  0006B6  0100               	movlb	0	; () banked
  1878  0006B8  51B6               	movf	main@command& (0+255),w,b
  1879  0006BA  0A04               	xorlw	4
  1880  0006BC  A4D8               	btfss	status,2,c
  1881  0006BE  D00A               	goto	l4736
  1882                           
  1883                           ; BSR set to: 0
  1884                           ;main.c: 180: {
  1885                           ;main.c: 181: setProgramSupply(4);
  1886  0006C0  0E04               	movlw	4
  1887  0006C2  ECE6  F009         	call	_setProgramSupply
  1888                           
  1889                           ;main.c: 182: printf ("Program supply ON.\r");
  1890  0006C6  0E7F               	movlw	high STR_7
  1891  0006C8  6E20               	movwf	printf@f+1,c
  1892  0006CA  0E04               	movlw	low STR_7
  1893  0006CC  6E1F               	movwf	printf@f,c
  1894  0006CE  ECD6  F005         	call	_printf	;wreg free
  1895                           
  1896                           ;main.c: 183: }
  1897  0006D2  D19D               	goto	l4860
  1898  0006D4                     l4736:
  1899                           
  1900                           ;main.c: 184: else if(5==command)
  1901  0006D4  0100               	movlb	0	; () banked
  1902  0006D6  51B6               	movf	main@command& (0+255),w,b
  1903  0006D8  0A05               	xorlw	5
  1904  0006DA  A4D8               	btfss	status,2,c
  1905  0006DC  D00A               	goto	l4742
  1906                           
  1907                           ; BSR set to: 0
  1908                           ;main.c: 185: {
  1909                           ;main.c: 186: setProgramSupply(5);
  1910  0006DE  0E05               	movlw	5
  1911  0006E0  ECE6  F009         	call	_setProgramSupply
  1912                           
  1913                           ;main.c: 187: printf ("5 volt supply ON.\r");
  1914  0006E4  0E7F               	movlw	high STR_8
  1915  0006E6  6E20               	movwf	printf@f+1,c
  1916  0006E8  0E18               	movlw	low STR_8
  1917  0006EA  6E1F               	movwf	printf@f,c
  1918  0006EC  ECD6  F005         	call	_printf	;wreg free
  1919                           
  1920                           ;main.c: 188: }
  1921  0006F0  D18E               	goto	l4860
  1922  0006F2                     l4742:
  1923                           
  1924                           ;main.c: 189: else if (10==command)
  1925  0006F2  0100               	movlb	0	; () banked
  1926  0006F4  51B6               	movf	main@command& (0+255),w,b
  1927  0006F6  0A0A               	xorlw	10
  1928  0006F8  A4D8               	btfss	status,2,c
  1929  0006FA  D009               	goto	l193
  1930                           
  1931                           ; BSR set to: 0
  1932                           ;main.c: 190: {
  1933                           ;main.c: 191: initialize_I2C();
  1934  0006FC  ECE6  F00A         	call	_initialize_I2C	;wreg free
  1935                           
  1936                           ;main.c: 192: printf ("I2C reinitialized\r");
  1937  000700  0E7F               	movlw	high STR_9
  1938  000702  6E20               	movwf	printf@f+1,c
  1939  000704  0E3E               	movlw	low STR_9
  1940  000706  6E1F               	movwf	printf@f,c
  1941  000708  ECD6  F005         	call	_printf	;wreg free
  1942                           
  1943                           ;main.c: 193: }
  1944  00070C  D180               	goto	l4860
  1945  00070E                     l193:
  1946                           
  1947                           ; BSR set to: 0
  1948                           ;main.c: 194: else if(0==command)
  1949  00070E  0100               	movlb	0	; () banked
  1950  000710  67B6               	tstfsz	main@command& (0+255),b
  1951  000712  D00E               	goto	l4750
  1952                           
  1953                           ; BSR set to: 0
  1954                           ;main.c: 195: {
  1955                           ;main.c: 196: printf(">%c #S%d: \r", boardSelect, sensorNumber);
  1956  000714  0E7F               	movlw	high STR_10
  1957  000716  6E20               	movwf	printf@f+1,c
  1958  000718  0EAC               	movlw	low STR_10
  1959  00071A  6E1F               	movwf	printf@f,c
  1960  00071C  C040  F021         	movff	_boardSelect,?_printf+2
  1961  000720  6A22               	clrf	?_printf+3,c
  1962  000722  C047  F023         	movff	_sensorNumber,?_printf+4
  1963  000726  C048  F024         	movff	_sensorNumber+1,?_printf+5
  1964  00072A  ECD6  F005         	call	_printf	;wreg free
  1965                           
  1966                           ;main.c: 197: }
  1967  00072E  D16F               	goto	l4860
  1968  000730                     l4750:
  1969                           
  1970                           ;main.c: 198: else if(1==command)
  1971  000730  0100               	movlb	0	; () banked
  1972  000732  05B6               	decf	main@command& (0+255),w,b
  1973  000734  A4D8               	btfss	status,2,c
  1974  000736  D054               	goto	l4776
  1975                           
  1976                           ; BSR set to: 0
  1977                           ;main.c: 199: {
  1978                           ;main.c: 200: AD5172_Write((unsigned char)potSelect, (unsigned char)potValue);
  1979  000738  C03C  F014         	movff	_potValue,AD5172_Write@dataByte
  1980  00073C  5045               	movf	_potSelect,w,c
  1981  00073E  ECEA  F008         	call	_AD5172_Write
  1982                           
  1983                           ;main.c: 201: if (0==errorFlag) inputData = AD5172_Read();
  1984  000742  6641               	tstfsz	_errorFlag,c
  1985  000744  D006               	goto	l4758
  1986  000746  EC11  F008         	call	_AD5172_Read	;wreg free
  1987  00074A  C016  F0B4         	movff	?_AD5172_Read,main@inputData
  1988  00074E  C017  F0B5         	movff	?_AD5172_Read+1,main@inputData+1
  1989  000752                     l4758:
  1990                           
  1991                           ;main.c: 202: if(0x80==errorFlag) printf("I2C ERROR TIMEOUT\r");
  1992  000752  5041               	movf	_errorFlag,w,c
  1993  000754  0A80               	xorlw	128
  1994  000756  A4D8               	btfss	status,2,c
  1995  000758  D007               	goto	l4762
  1996  00075A  0E7F               	movlw	high STR_11
  1997  00075C  6E20               	movwf	printf@f+1,c
  1998  00075E  0E2B               	movlw	low STR_11
  1999  000760  6E1F               	movwf	printf@f,c
  2000  000762  ECD6  F005         	call	_printf	;wreg free
  2001  000766  D153               	goto	l4860
  2002  000768                     l4762:
  2003                           
  2004                           ;main.c: 203: else if(errorFlag)
  2005  000768  5041               	movf	_errorFlag,w,c
  2006  00076A  B4D8               	btfsc	status,2,c
  2007  00076C  D009               	goto	l4768
  2008                           
  2009                           ;main.c: 204: {
  2010                           ;main.c: 205: printf("I2C ERROR\r");
  2011  00076E  0E7F               	movlw	high STR_12
  2012  000770  6E20               	movwf	printf@f+1,c
  2013  000772  0EC3               	movlw	low STR_12
  2014  000774  6E1F               	movwf	printf@f,c
  2015  000776  ECD6  F005         	call	_printf	;wreg free
  2016                           
  2017                           ;main.c: 206: AD5172_Stop();
  2018  00077A  ECBF  F00A         	call	_AD5172_Stop	;wreg free
  2019                           
  2020                           ;main.c: 207: }
  2021  00077E  D147               	goto	l4860
  2022  000780                     l4768:
  2023                           
  2024                           ;main.c: 208: else if(1==OTP_Validation_Flag)printf(">%c #S%d: Pot value=%d, FUSE BLOWN\
      +                          r", boardSelect, sensorNumber, inputData);
  2025  000780  043E               	decf	_OTP_Validation_Flag,w,c
  2026  000782  A4D8               	btfss	status,2,c
  2027  000784  D012               	goto	l203
  2028  000786  0E7E               	movlw	high STR_13
  2029  000788  6E20               	movwf	printf@f+1,c
  2030  00078A  0E05               	movlw	low STR_13
  2031  00078C  6E1F               	movwf	printf@f,c
  2032  00078E  C040  F021         	movff	_boardSelect,?_printf+2
  2033  000792  6A22               	clrf	?_printf+3,c
  2034  000794  C047  F023         	movff	_sensorNumber,?_printf+4
  2035  000798  C048  F024         	movff	_sensorNumber+1,?_printf+5
  2036  00079C  C0B4  F025         	movff	main@inputData,?_printf+6
  2037  0007A0  C0B5  F026         	movff	main@inputData+1,?_printf+7
  2038  0007A4  ECD6  F005         	call	_printf	;wreg free
  2039  0007A8  D132               	goto	l4860
  2040  0007AA                     l203:
  2041                           
  2042                           ;main.c: 209: else if(0==OTP_Validation_Flag)printf(">%c #S%d: Pot value=%d, FUSE READY\
      +                          r", boardSelect, sensorNumber, inputData);
  2043  0007AA  663E               	tstfsz	_OTP_Validation_Flag,c
  2044  0007AC  D012               	goto	l4774
  2045  0007AE  0E7E               	movlw	high STR_14
  2046  0007B0  6E20               	movwf	printf@f+1,c
  2047  0007B2  0E29               	movlw	low STR_14
  2048  0007B4  6E1F               	movwf	printf@f,c
  2049  0007B6  C040  F021         	movff	_boardSelect,?_printf+2
  2050  0007BA  6A22               	clrf	?_printf+3,c
  2051  0007BC  C047  F023         	movff	_sensorNumber,?_printf+4
  2052  0007C0  C048  F024         	movff	_sensorNumber+1,?_printf+5
  2053  0007C4  C0B4  F025         	movff	main@inputData,?_printf+6
  2054  0007C8  C0B5  F026         	movff	main@inputData+1,?_printf+7
  2055  0007CC  ECD6  F005         	call	_printf	;wreg free
  2056  0007D0  D11E               	goto	l4860
  2057  0007D2                     l4774:
  2058                           
  2059                           ;main.c: 210: else printf("FUSES BAD\r");
  2060  0007D2  0E7F               	movlw	high STR_15
  2061  0007D4  6E20               	movwf	printf@f+1,c
  2062  0007D6  0EB8               	movlw	low STR_15
  2063  0007D8  6E1F               	movwf	printf@f,c
  2064  0007DA  ECD6  F005         	call	_printf	;wreg free
  2065  0007DE  D117               	goto	l4860
  2066  0007E0                     l4776:
  2067                           
  2068                           ;main.c: 212: else if(2==command)
  2069  0007E0  0100               	movlb	0	; () banked
  2070  0007E2  51B6               	movf	main@command& (0+255),w,b
  2071  0007E4  0A02               	xorlw	2
  2072  0007E6  A4D8               	btfss	status,2,c
  2073  0007E8  D052               	goto	l4802
  2074                           
  2075                           ; BSR set to: 0
  2076                           ;main.c: 213: {
  2077                           ;main.c: 214: AD5172_Set((unsigned char)potSelect);
  2078  0007EA  5045               	movf	_potSelect,w,c
  2079  0007EC  EC90  F009         	call	_AD5172_Set
  2080                           
  2081                           ;main.c: 215: if (0==errorFlag) inputData = AD5172_Read();
  2082  0007F0  6641               	tstfsz	_errorFlag,c
  2083  0007F2  D006               	goto	l4784
  2084  0007F4  EC11  F008         	call	_AD5172_Read	;wreg free
  2085  0007F8  C016  F0B4         	movff	?_AD5172_Read,main@inputData
  2086  0007FC  C017  F0B5         	movff	?_AD5172_Read+1,main@inputData+1
  2087  000800                     l4784:
  2088                           
  2089                           ;main.c: 216: if(0x80==errorFlag)printf("I2C ERROR TIMEOUT\r");
  2090  000800  5041               	movf	_errorFlag,w,c
  2091  000802  0A80               	xorlw	128
  2092  000804  A4D8               	btfss	status,2,c
  2093  000806  D007               	goto	l4788
  2094  000808  0E7F               	movlw	high STR_11
  2095  00080A  6E20               	movwf	printf@f+1,c
  2096  00080C  0E2B               	movlw	low STR_11
  2097  00080E  6E1F               	movwf	printf@f,c
  2098  000810  ECD6  F005         	call	_printf	;wreg free
  2099  000814  D0FC               	goto	l4860
  2100  000816                     l4788:
  2101                           
  2102                           ;main.c: 217: else if(errorFlag)
  2103  000816  5041               	movf	_errorFlag,w,c
  2104  000818  B4D8               	btfsc	status,2,c
  2105  00081A  D009               	goto	l4794
  2106                           
  2107                           ;main.c: 218: {
  2108                           ;main.c: 219: printf("I2C ERROR\r");
  2109  00081C  0E7F               	movlw	high STR_12
  2110  00081E  6E20               	movwf	printf@f+1,c
  2111  000820  0EC3               	movlw	low STR_12
  2112  000822  6E1F               	movwf	printf@f,c
  2113  000824  ECD6  F005         	call	_printf	;wreg free
  2114                           
  2115                           ;main.c: 220: AD5172_Stop();
  2116  000828  ECBF  F00A         	call	_AD5172_Stop	;wreg free
  2117                           
  2118                           ;main.c: 221: }
  2119  00082C  D0F0               	goto	l4860
  2120  00082E                     l4794:
  2121                           
  2122                           ;main.c: 222: else if(1==OTP_Validation_Flag)printf(">%c #S%d: Pot value=%d, FUSE BLOWN\
      +                          r", boardSelect, sensorNumber, inputData);
  2123  00082E  043E               	decf	_OTP_Validation_Flag,w,c
  2124  000830  A4D8               	btfss	status,2,c
  2125  000832  D012               	goto	l214
  2126  000834  0E7E               	movlw	high STR_13
  2127  000836  6E20               	movwf	printf@f+1,c
  2128  000838  0E05               	movlw	low STR_13
  2129  00083A  6E1F               	movwf	printf@f,c
  2130  00083C  C040  F021         	movff	_boardSelect,?_printf+2
  2131  000840  6A22               	clrf	?_printf+3,c
  2132  000842  C047  F023         	movff	_sensorNumber,?_printf+4
  2133  000846  C048  F024         	movff	_sensorNumber+1,?_printf+5
  2134  00084A  C0B4  F025         	movff	main@inputData,?_printf+6
  2135  00084E  C0B5  F026         	movff	main@inputData+1,?_printf+7
  2136  000852  ECD6  F005         	call	_printf	;wreg free
  2137  000856  D0DB               	goto	l4860
  2138  000858                     l214:
  2139                           
  2140                           ;main.c: 223: else if(0==OTP_Validation_Flag)printf(">%c #S%d: Pot value=%d, FUSE READY\
      +                          r", boardSelect, sensorNumber, inputData);
  2141  000858  663E               	tstfsz	_OTP_Validation_Flag,c
  2142  00085A  D012               	goto	l4800
  2143  00085C  0E7E               	movlw	high STR_14
  2144  00085E  6E20               	movwf	printf@f+1,c
  2145  000860  0E29               	movlw	low STR_14
  2146  000862  6E1F               	movwf	printf@f,c
  2147  000864  C040  F021         	movff	_boardSelect,?_printf+2
  2148  000868  6A22               	clrf	?_printf+3,c
  2149  00086A  C047  F023         	movff	_sensorNumber,?_printf+4
  2150  00086E  C048  F024         	movff	_sensorNumber+1,?_printf+5
  2151  000872  C0B4  F025         	movff	main@inputData,?_printf+6
  2152  000876  C0B5  F026         	movff	main@inputData+1,?_printf+7
  2153  00087A  ECD6  F005         	call	_printf	;wreg free
  2154  00087E  D0C7               	goto	l4860
  2155  000880                     l4800:
  2156                           
  2157                           ;main.c: 224: else printf("FUSES BAD\r");
  2158  000880  0E7F               	movlw	high STR_15
  2159  000882  6E20               	movwf	printf@f+1,c
  2160  000884  0EB8               	movlw	low STR_15
  2161  000886  6E1F               	movwf	printf@f,c
  2162  000888  ECD6  F005         	call	_printf	;wreg free
  2163  00088C  D0C0               	goto	l4860
  2164  00088E                     l4802:
  2165                           
  2166                           ;main.c: 226: else if(3==command)
  2167  00088E  0100               	movlb	0	; () banked
  2168  000890  51B6               	movf	main@command& (0+255),w,b
  2169  000892  0A03               	xorlw	3
  2170  000894  A4D8               	btfss	status,2,c
  2171  000896  D046               	goto	l4826
  2172                           
  2173                           ; BSR set to: 0
  2174                           ;main.c: 227: {
  2175                           ;main.c: 228: if(0==PORTAbits.RA0)
  2176  000898  B080               	btfsc	3968,0,c	;volatile
  2177  00089A  D007               	goto	l4808
  2178                           
  2179                           ; BSR set to: 0
  2180                           ;main.c: 229: printf("PROGRAMMING SUPPLY IS OFF ");
  2181  00089C  0E7E               	movlw	high STR_21
  2182  00089E  6E20               	movwf	printf@f+1,c
  2183  0008A0  0E8A               	movlw	low STR_21
  2184  0008A2  6E1F               	movwf	printf@f,c
  2185  0008A4  ECD6  F005         	call	_printf	;wreg free
  2186  0008A8  D0B2               	goto	l4860
  2187  0008AA                     l4808:
  2188                           
  2189                           ;main.c: 230: else
  2190                           ;main.c: 231: {
  2191                           ;main.c: 232: AD5172_Program((unsigned char)potSelect);
  2192  0008AA  5045               	movf	_potSelect,w,c
  2193  0008AC  ECAD  F009         	call	_AD5172_Program
  2194                           
  2195                           ;main.c: 233: if(0x80==errorFlag) printf("I2C ERROR TIMEOUT\r");
  2196  0008B0  5041               	movf	_errorFlag,w,c
  2197  0008B2  0A80               	xorlw	128
  2198  0008B4  A4D8               	btfss	status,2,c
  2199  0008B6  D007               	goto	l4814
  2200  0008B8  0E7F               	movlw	high STR_11
  2201  0008BA  6E20               	movwf	printf@f+1,c
  2202  0008BC  0E2B               	movlw	low STR_11
  2203  0008BE  6E1F               	movwf	printf@f,c
  2204  0008C0  ECD6  F005         	call	_printf	;wreg free
  2205  0008C4  D0A4               	goto	l4860
  2206  0008C6                     l4814:
  2207                           
  2208                           ;main.c: 234: else if(errorFlag) printf("I2C ERROR\r");
  2209  0008C6  5041               	movf	_errorFlag,w,c
  2210  0008C8  B4D8               	btfsc	status,2,c
  2211  0008CA  D007               	goto	l4818
  2212  0008CC  0E7F               	movlw	high STR_12
  2213  0008CE  6E20               	movwf	printf@f+1,c
  2214  0008D0  0EC3               	movlw	low STR_12
  2215  0008D2  6E1F               	movwf	printf@f,c
  2216  0008D4  ECD6  F005         	call	_printf	;wreg free
  2217  0008D8  D09A               	goto	l4860
  2218  0008DA                     l4818:
  2219                           
  2220                           ;main.c: 235: else if(1==potSelect) printf(">%c #S%d: PROGRAM Pot1\r", boardSelect, sens
      +                          orNumber);
  2221  0008DA  0445               	decf	_potSelect,w,c
  2222  0008DC  1046               	iorwf	_potSelect+1,w,c
  2223  0008DE  A4D8               	btfss	status,2,c
  2224  0008E0  D00E               	goto	l4822
  2225  0008E2  0E7E               	movlw	high STR_24
  2226  0008E4  6E20               	movwf	printf@f+1,c
  2227  0008E6  0EBF               	movlw	low STR_24
  2228  0008E8  6E1F               	movwf	printf@f,c
  2229  0008EA  C040  F021         	movff	_boardSelect,?_printf+2
  2230  0008EE  6A22               	clrf	?_printf+3,c
  2231  0008F0  C047  F023         	movff	_sensorNumber,?_printf+4
  2232  0008F4  C048  F024         	movff	_sensorNumber+1,?_printf+5
  2233  0008F8  ECD6  F005         	call	_printf	;wreg free
  2234  0008FC  D088               	goto	l4860
  2235  0008FE                     l4822:
  2236                           
  2237                           ;main.c: 236: else if(2==potSelect) printf(">%c #S%d: PROGRAM Pot2\r", boardSelect, sens
      +                          orNumber);
  2238  0008FE  5045               	movf	_potSelect,w,c
  2239  000900  0A02               	xorlw	2
  2240  000902  1046               	iorwf	_potSelect+1,w,c
  2241  000904  A4D8               	btfss	status,2,c
  2242  000906  D083               	goto	l4860
  2243  000908  0E7E               	movlw	high STR_25
  2244  00090A  6E20               	movwf	printf@f+1,c
  2245  00090C  0ED7               	movlw	low STR_25
  2246  00090E  6E1F               	movwf	printf@f,c
  2247  000910  C040  F021         	movff	_boardSelect,?_printf+2
  2248  000914  6A22               	clrf	?_printf+3,c
  2249  000916  C047  F023         	movff	_sensorNumber,?_printf+4
  2250  00091A  C048  F024         	movff	_sensorNumber+1,?_printf+5
  2251  00091E  ECD6  F005         	call	_printf	;wreg free
  2252  000922  D075               	goto	l4860
  2253  000924                     l4826:
  2254                           
  2255                           ;main.c: 239: else if(7==command)
  2256  000924  0100               	movlb	0	; () banked
  2257  000926  51B6               	movf	main@command& (0+255),w,b
  2258  000928  0A07               	xorlw	7
  2259  00092A  A4D8               	btfss	status,2,c
  2260  00092C  D008               	goto	l4832
  2261                           
  2262                           ; BSR set to: 0
  2263                           ;main.c: 240: {
  2264                           ;main.c: 241: printf ("BAD COMMAND ");
  2265  00092E  0E7F               	movlw	high STR_26
  2266  000930  6E20               	movwf	printf@f+1,c
  2267  000932  0E9F               	movlw	low STR_26
  2268  000934  6E1F               	movwf	printf@f,c
  2269  000936  ECD6  F005         	call	_printf	;wreg free
  2270                           
  2271                           ;main.c: 242: errorFlag=0xFF;
  2272  00093A  6841               	setf	_errorFlag,c
  2273                           
  2274                           ;main.c: 243: }
  2275  00093C  D068               	goto	l4860
  2276  00093E                     l4832:
  2277                           
  2278                           ;main.c: 244: else if(8==command)
  2279  00093E  0100               	movlb	0	; () banked
  2280  000940  51B6               	movf	main@command& (0+255),w,b
  2281  000942  0A08               	xorlw	8
  2282  000944  A4D8               	btfss	status,2,c
  2283  000946  D063               	goto	l4860
  2284                           
  2285                           ; BSR set to: 0
  2286                           ;main.c: 245: {
  2287                           ;main.c: 246: if (0==slavePIC)
  2288  000948  6642               	tstfsz	_slavePIC,c
  2289  00094A  D00A               	goto	l4838
  2290                           
  2291                           ; BSR set to: 0
  2292                           ;main.c: 247: printf(">%c: ERROR - BAD RACK NUMBER.\r", boardSelect);
  2293  00094C  0E7E               	movlw	high STR_27
  2294  00094E  6E20               	movwf	printf@f+1,c
  2295  000950  0E4D               	movlw	low STR_27
  2296  000952  6E1F               	movwf	printf@f,c
  2297  000954  C040  F021         	movff	_boardSelect,?_printf+2
  2298  000958  6A22               	clrf	?_printf+3,c
  2299  00095A  ECD6  F005         	call	_printf	;wreg free
  2300  00095E  D057               	goto	l4860
  2301  000960                     l4838:
  2302                           
  2303                           ;main.c: 248: else
  2304                           ;main.c: 249: {
  2305                           ;main.c: 250: i2c_SlaveWrite(slavePIC, 5);
  2306  000960  0E05               	movlw	5
  2307  000962  6E14               	movwf	i2c_SlaveWrite@numDataBytes,c
  2308  000964  5042               	movf	_slavePIC,w,c
  2309  000966  EC72  F008         	call	_i2c_SlaveWrite
  2310                           
  2311                           ;main.c: 251: DelayMs(100);
  2312  00096A  0E00               	movlw	0
  2313  00096C  6E14               	movwf	DelayMs@i+1,c
  2314  00096E  0E64               	movlw	100
  2315  000970  6E13               	movwf	DelayMs@i,c
  2316  000972  EC0E  F009         	call	_DelayMs	;wreg free
  2317                           
  2318                           ;main.c: 252: i2c_SlaveRead(slavePIC, 5);
  2319  000976  0E05               	movlw	5
  2320  000978  6E16               	movwf	i2c_SlaveRead@numBytes,c
  2321  00097A  5042               	movf	_slavePIC,w,c
  2322  00097C  EC42  F008         	call	_i2c_SlaveRead
  2323                           
  2324                           ;main.c: 253: inByte1=(int)inBuffer[0];
  2325  000980  0101               	movlb	1	; () banked
  2326  000982  0100               	movlb	0	; () banked
  2327  000984  C141  F0A9         	movff	_inBuffer,main@inByte1
  2328  000988  0100               	movlb	0	; () banked
  2329  00098A  6BAA               	clrf	(main@inByte1+1)& (0+255),b
  2330                           
  2331                           ; BSR set to: 0
  2332                           ;main.c: 254: inByte2=(int)inBuffer[1];
  2333  00098C  0101               	movlb	1	; () banked
  2334  00098E  0100               	movlb	0	; () banked
  2335  000990  C142  F0AB         	movff	_inBuffer+1,main@inByte2
  2336  000994  0100               	movlb	0	; () banked
  2337  000996  6BAC               	clrf	(main@inByte2+1)& (0+255),b
  2338                           
  2339                           ; BSR set to: 0
  2340                           ;main.c: 255: inByte3=(int)inBuffer[2];
  2341  000998  0101               	movlb	1	; () banked
  2342  00099A  0100               	movlb	0	; () banked
  2343  00099C  C143  F0AD         	movff	_inBuffer+2,main@inByte3
  2344  0009A0  0100               	movlb	0	; () banked
  2345  0009A2  6BAE               	clrf	(main@inByte3+1)& (0+255),b
  2346                           
  2347                           ; BSR set to: 0
  2348                           ;main.c: 256: inByte4=(int)inBuffer[3];
  2349  0009A4  0101               	movlb	1	; () banked
  2350  0009A6  0100               	movlb	0	; () banked
  2351  0009A8  C144  F0AF         	movff	_inBuffer+3,main@inByte4
  2352  0009AC  0100               	movlb	0	; () banked
  2353  0009AE  6BB0               	clrf	(main@inByte4+1)& (0+255),b
  2354                           
  2355                           ; BSR set to: 0
  2356                           ;main.c: 257: inByte5=(int)inBuffer[4];
  2357  0009B0  0101               	movlb	1	; () banked
  2358  0009B2  0100               	movlb	0	; () banked
  2359  0009B4  C145  F0B1         	movff	_inBuffer+4,main@inByte5
  2360  0009B8  0100               	movlb	0	; () banked
  2361  0009BA  6BB2               	clrf	(main@inByte5+1)& (0+255),b
  2362                           
  2363                           ; BSR set to: 0
  2364                           ;main.c: 258: if (0==errorFlag)
  2365  0009BC  6641               	tstfsz	_errorFlag,c
  2366  0009BE  D01E               	goto	l4858
  2367                           
  2368                           ; BSR set to: 0
  2369                           ;main.c: 259: printf(">%c: OK, %d, %d, %d, %d, %d,\r", boardSelect, inByte1,inByte2,inBy
      +                          te3,inByte4,inByte5);
  2370  0009C0  0E7E               	movlw	high STR_28
  2371  0009C2  6E20               	movwf	printf@f+1,c
  2372  0009C4  0E6C               	movlw	low STR_28
  2373  0009C6  6E1F               	movwf	printf@f,c
  2374  0009C8  C040  F021         	movff	_boardSelect,?_printf+2
  2375  0009CC  6A22               	clrf	?_printf+3,c
  2376  0009CE  C0A9  F023         	movff	main@inByte1,?_printf+4
  2377  0009D2  C0AA  F024         	movff	main@inByte1+1,?_printf+5
  2378  0009D6  C0AB  F025         	movff	main@inByte2,?_printf+6
  2379  0009DA  C0AC  F026         	movff	main@inByte2+1,?_printf+7
  2380  0009DE  C0AD  F027         	movff	main@inByte3,?_printf+8
  2381  0009E2  C0AE  F028         	movff	main@inByte3+1,?_printf+9
  2382  0009E6  C0AF  F029         	movff	main@inByte4,?_printf+10
  2383  0009EA  C0B0  F02A         	movff	main@inByte4+1,?_printf+11
  2384  0009EE  C0B1  F02B         	movff	main@inByte5,?_printf+12
  2385  0009F2  C0B2  F02C         	movff	main@inByte5+1,?_printf+13
  2386  0009F6  ECD6  F005         	call	_printf	;wreg free
  2387  0009FA  D009               	goto	l4860
  2388  0009FC                     l4858:
  2389                           
  2390                           ;main.c: 260: else
  2391                           ;main.c: 261: printf(">%c: NO RACK RESPONDING.\r", boardSelect);
  2392  0009FC  0E7E               	movlw	high STR_29
  2393  0009FE  6E20               	movwf	printf@f+1,c
  2394  000A00  0EA5               	movlw	low STR_29
  2395  000A02  6E1F               	movwf	printf@f,c
  2396  000A04  C040  F021         	movff	_boardSelect,?_printf+2
  2397  000A08  6A22               	clrf	?_printf+3,c
  2398  000A0A  ECD6  F005         	call	_printf	;wreg free
  2399  000A0E                     l4860:
  2400                           
  2401                           ;main.c: 262: }
  2402                           ;main.c: 263: }
  2403                           ;main.c: 264: DelayMs(20);
  2404  000A0E  0E00               	movlw	0
  2405  000A10  6E14               	movwf	DelayMs@i+1,c
  2406  000A12  0E14               	movlw	20
  2407  000A14  6E13               	movwf	DelayMs@i,c
  2408  000A16  EC0E  F009         	call	_DelayMs	;wreg free
  2409  000A1A  D5CE               	goto	l175
  2410  000A1C                     __end_of_main:
  2411                           	opt stack 0
  2412                           tblptru	equ	0xFF8
  2413                           tblptrh	equ	0xFF7
  2414                           tblptrl	equ	0xFF6
  2415                           tablat	equ	0xFF5
  2416                           postinc0	equ	0xFEE
  2417                           wreg	equ	0xFE8
  2418                           postdec1	equ	0xFE5
  2419                           fsr1l	equ	0xFE1
  2420                           status	equ	0xFD8
  2421                           
  2422 ;; *************** function _turnCompressorOn *****************
  2423 ;; Defined at:
  2424 ;;		line 769 in file "main.c"
  2425 ;; Parameters:    Size  Location     Type
  2426 ;;		None
  2427 ;; Auto vars:     Size  Location     Type
  2428 ;;		None
  2429 ;; Return value:  Size  Location     Type
  2430 ;;		None               void
  2431 ;; Registers used:
  2432 ;;		wreg, status,2, status,0, cstack
  2433 ;; Tracked objects:
  2434 ;;		On entry : 0/0
  2435 ;;		On exit  : 0/0
  2436 ;;		Unchanged: 0/0
  2437 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2438 ;;      Params:         0       0       0       0       0       0       0       0       0
  2439 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2440 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2441 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2442 ;;Total ram usage:        0 bytes
  2443 ;; Hardware stack levels used:    1
  2444 ;; Hardware stack levels required when called:    3
  2445 ;; This function calls:
  2446 ;;		_Busy_eep
  2447 ;;		_DelayMs
  2448 ;;		_Write_b_eep
  2449 ;; This function is called by:
  2450 ;;		_main
  2451 ;; This function uses a non-reentrant model
  2452 ;;
  2453                           
  2454                           	psect	text1
  2455  001482                     __ptext1:
  2456                           	opt stack 0
  2457  001482                     _turnCompressorOn:
  2458                           	opt stack 27
  2459                           
  2460                           ;main.c: 771: (Busy_eep(), Write_b_eep(0x00,TRUE));
  2461                           
  2462                           ;incstack = 0
  2463  001482  EC04  F00B         	call	_Busy_eep	;wreg free
  2464  001486  0E00               	movlw	0
  2465  001488  6E14               	movwf	Write_b_eep@badd+1,c
  2466  00148A  0E00               	movlw	0
  2467  00148C  6E13               	movwf	Write_b_eep@badd,c
  2468  00148E  0E01               	movlw	1
  2469  001490  6E15               	movwf	Write_b_eep@bdat,c
  2470  001492  ECCA  F009         	call	_Write_b_eep	;wreg free
  2471                           
  2472                           ;main.c: 772: PORTDbits.RD3 = 1;
  2473  001496  8683               	bsf	3971,3,c	;volatile
  2474                           
  2475                           ;main.c: 773: PORTEbits.RE1 = 1;
  2476  001498  8284               	bsf	3972,1,c	;volatile
  2477                           
  2478                           ;main.c: 774: DelayMs(200);
  2479  00149A  0E00               	movlw	0
  2480  00149C  6E14               	movwf	DelayMs@i+1,c
  2481  00149E  0EC8               	movlw	200
  2482  0014A0  6E13               	movwf	DelayMs@i,c
  2483  0014A2  EC0E  F009         	call	_DelayMs	;wreg free
  2484                           
  2485                           ;main.c: 775: PORTEbits.RE1 = 0;
  2486  0014A6  9284               	bcf	3972,1,c	;volatile
  2487  0014A8  0012               	return	
  2488  0014AA                     __end_of_turnCompressorOn:
  2489                           	opt stack 0
  2490                           tblptru	equ	0xFF8
  2491                           tblptrh	equ	0xFF7
  2492                           tblptrl	equ	0xFF6
  2493                           tablat	equ	0xFF5
  2494                           postinc0	equ	0xFEE
  2495                           wreg	equ	0xFE8
  2496                           postdec1	equ	0xFE5
  2497                           fsr1l	equ	0xFE1
  2498                           status	equ	0xFD8
  2499                           
  2500 ;; *************** function _turnCompressorOff *****************
  2501 ;; Defined at:
  2502 ;;		line 778 in file "main.c"
  2503 ;; Parameters:    Size  Location     Type
  2504 ;;		None
  2505 ;; Auto vars:     Size  Location     Type
  2506 ;;		None
  2507 ;; Return value:  Size  Location     Type
  2508 ;;		None               void
  2509 ;; Registers used:
  2510 ;;		wreg, status,2, status,0, cstack
  2511 ;; Tracked objects:
  2512 ;;		On entry : 0/0
  2513 ;;		On exit  : 0/0
  2514 ;;		Unchanged: 0/0
  2515 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2516 ;;      Params:         0       0       0       0       0       0       0       0       0
  2517 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2518 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2519 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2520 ;;Total ram usage:        0 bytes
  2521 ;; Hardware stack levels used:    1
  2522 ;; Hardware stack levels required when called:    3
  2523 ;; This function calls:
  2524 ;;		_Busy_eep
  2525 ;;		_DelayMs
  2526 ;;		_Write_b_eep
  2527 ;; This function is called by:
  2528 ;;		_main
  2529 ;; This function uses a non-reentrant model
  2530 ;;
  2531                           
  2532                           	psect	text2
  2533  0014AA                     __ptext2:
  2534                           	opt stack 0
  2535  0014AA                     _turnCompressorOff:
  2536                           	opt stack 27
  2537                           
  2538                           ;main.c: 780: (Busy_eep(), Write_b_eep(0x00,FALSE));
  2539                           
  2540                           ;incstack = 0
  2541  0014AA  EC04  F00B         	call	_Busy_eep	;wreg free
  2542  0014AE  0E00               	movlw	0
  2543  0014B0  6E14               	movwf	Write_b_eep@badd+1,c
  2544  0014B2  0E00               	movlw	0
  2545  0014B4  6E13               	movwf	Write_b_eep@badd,c
  2546  0014B6  0E00               	movlw	0
  2547  0014B8  6E15               	movwf	Write_b_eep@bdat,c
  2548  0014BA  ECCA  F009         	call	_Write_b_eep	;wreg free
  2549                           
  2550                           ;main.c: 781: PORTDbits.RD3 = 0;
  2551  0014BE  9683               	bcf	3971,3,c	;volatile
  2552                           
  2553                           ;main.c: 782: PORTEbits.RE0 = 1;
  2554  0014C0  8084               	bsf	3972,0,c	;volatile
  2555                           
  2556                           ;main.c: 783: DelayMs(200);
  2557  0014C2  0E00               	movlw	0
  2558  0014C4  6E14               	movwf	DelayMs@i+1,c
  2559  0014C6  0EC8               	movlw	200
  2560  0014C8  6E13               	movwf	DelayMs@i,c
  2561  0014CA  EC0E  F009         	call	_DelayMs	;wreg free
  2562                           
  2563                           ;main.c: 784: PORTEbits.RE0 = 0;
  2564  0014CE  9084               	bcf	3972,0,c	;volatile
  2565  0014D0  0012               	return	
  2566  0014D2                     __end_of_turnCompressorOff:
  2567                           	opt stack 0
  2568                           tblptru	equ	0xFF8
  2569                           tblptrh	equ	0xFF7
  2570                           tblptrl	equ	0xFF6
  2571                           tablat	equ	0xFF5
  2572                           postinc0	equ	0xFEE
  2573                           wreg	equ	0xFE8
  2574                           postdec1	equ	0xFE5
  2575                           fsr1l	equ	0xFE1
  2576                           status	equ	0xFD8
  2577                           
  2578 ;; *************** function _Write_b_eep *****************
  2579 ;; Defined at:
  2580 ;;		line 30 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\pic18\plib\EEP\write_B.c"
  2581 ;; Parameters:    Size  Location     Type
  2582 ;;  badd            2   18[COMRAM] unsigned int 
  2583 ;;  bdat            1   20[COMRAM] unsigned char 
  2584 ;; Auto vars:     Size  Location     Type
  2585 ;;  GIE_BIT_VAL     1   21[COMRAM] unsigned char 
  2586 ;; Return value:  Size  Location     Type
  2587 ;;		None               void
  2588 ;; Registers used:
  2589 ;;		wreg, status,2
  2590 ;; Tracked objects:
  2591 ;;		On entry : 0/0
  2592 ;;		On exit  : 0/0
  2593 ;;		Unchanged: 0/0
  2594 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2595 ;;      Params:         3       0       0       0       0       0       0       0       0
  2596 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2597 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2598 ;;      Totals:         4       0       0       0       0       0       0       0       0
  2599 ;;Total ram usage:        4 bytes
  2600 ;; Hardware stack levels used:    1
  2601 ;; Hardware stack levels required when called:    2
  2602 ;; This function calls:
  2603 ;;		Nothing
  2604 ;; This function is called by:
  2605 ;;		_main
  2606 ;;		_turnCompressorOn
  2607 ;;		_turnCompressorOff
  2608 ;; This function uses a non-reentrant model
  2609 ;;
  2610                           
  2611                           	psect	text3
  2612  001394                     __ptext3:
  2613                           	opt stack 0
  2614  001394                     _Write_b_eep:
  2615                           	opt stack 27
  2616                           
  2617                           ;incstack = 0
  2618  001394  0E00               	movlw	0
  2619  001396  6E16               	movwf	Write_b_eep@GIE_BIT_VAL,c
  2620  001398  C013  FFA9         	movff	Write_b_eep@badd,4009	;volatile
  2621  00139C  C015  FFA8         	movff	Write_b_eep@bdat,4008	;volatile
  2622  0013A0  9EA6               	bcf	4006,7,c	;volatile
  2623  0013A2  9CA6               	bcf	4006,6,c	;volatile
  2624  0013A4  84A6               	bsf	4006,2,c	;volatile
  2625  0013A6  0E00               	movlw	0
  2626  0013A8  BEF2               	btfsc	intcon,7,c	;volatile
  2627  0013AA  0E01               	movlw	1
  2628  0013AC  6E16               	movwf	Write_b_eep@GIE_BIT_VAL,c
  2629  0013AE  9EF2               	bcf	intcon,7,c	;volatile
  2630  0013B0  0E55               	movlw	85
  2631  0013B2  6EA7               	movwf	4007,c	;volatile
  2632  0013B4  0EAA               	movlw	170
  2633  0013B6  6EA7               	movwf	4007,c	;volatile
  2634  0013B8  82A6               	bsf	4006,1,c	;volatile
  2635  0013BA                     l570:
  2636  0013BA  B2A6               	btfsc	4006,1,c	;volatile
  2637  0013BC  D7FE               	goto	l570
  2638  0013BE  B016               	btfsc	Write_b_eep@GIE_BIT_VAL,0,c
  2639  0013C0  D002               	bra	u3635
  2640  0013C2  9EF2               	bcf	intcon,7,c	;volatile
  2641  0013C4  D001               	bra	u3636
  2642  0013C6                     u3635:
  2643  0013C6  8EF2               	bsf	intcon,7,c	;volatile
  2644  0013C8                     u3636:
  2645  0013C8  94A6               	bcf	4006,2,c	;volatile
  2646  0013CA  0012               	return	
  2647  0013CC                     __end_of_Write_b_eep:
  2648                           	opt stack 0
  2649                           tblptru	equ	0xFF8
  2650                           tblptrh	equ	0xFF7
  2651                           tblptrl	equ	0xFF6
  2652                           tablat	equ	0xFF5
  2653                           intcon	equ	0xFF2
  2654                           postinc0	equ	0xFEE
  2655                           wreg	equ	0xFE8
  2656                           postdec1	equ	0xFE5
  2657                           fsr1l	equ	0xFE1
  2658                           status	equ	0xFD8
  2659                           
  2660 ;; *************** function _Busy_eep *****************
  2661 ;; Defined at:
  2662 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\pic18\plib\EEP\busy_eep.c"
  2663 ;; Parameters:    Size  Location     Type
  2664 ;;		None
  2665 ;; Auto vars:     Size  Location     Type
  2666 ;;		None
  2667 ;; Return value:  Size  Location     Type
  2668 ;;		None               void
  2669 ;; Registers used:
  2670 ;;		None
  2671 ;; Tracked objects:
  2672 ;;		On entry : 0/0
  2673 ;;		On exit  : 0/0
  2674 ;;		Unchanged: 0/0
  2675 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2676 ;;      Params:         0       0       0       0       0       0       0       0       0
  2677 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2678 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2679 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2680 ;;Total ram usage:        0 bytes
  2681 ;; Hardware stack levels used:    1
  2682 ;; Hardware stack levels required when called:    2
  2683 ;; This function calls:
  2684 ;;		Nothing
  2685 ;; This function is called by:
  2686 ;;		_main
  2687 ;;		_turnCompressorOn
  2688 ;;		_turnCompressorOff
  2689 ;; This function uses a non-reentrant model
  2690 ;;
  2691                           
  2692                           	psect	text4
  2693  001608                     __ptext4:
  2694                           	opt stack 0
  2695  001608                     _Busy_eep:
  2696                           	opt stack 27
  2697  001608                     l543:
  2698  001608  A2A6               	btfss	4006,1,c	;volatile
  2699  00160A  0012               	return	
  2700  00160C  D7FD               	goto	l543
  2701  00160E                     __end_of_Busy_eep:
  2702                           	opt stack 0
  2703                           tblptru	equ	0xFF8
  2704                           tblptrh	equ	0xFF7
  2705                           tblptrl	equ	0xFF6
  2706                           tablat	equ	0xFF5
  2707                           intcon	equ	0xFF2
  2708                           postinc0	equ	0xFEE
  2709                           wreg	equ	0xFE8
  2710                           postdec1	equ	0xFE5
  2711                           fsr1l	equ	0xFE1
  2712                           status	equ	0xFD8
  2713                           
  2714 ;; *************** function _setProgramSupply *****************
  2715 ;; Defined at:
  2716 ;;		line 595 in file "main.c"
  2717 ;; Parameters:    Size  Location     Type
  2718 ;;  mode            1    wreg     unsigned char 
  2719 ;; Auto vars:     Size  Location     Type
  2720 ;;  mode            1   18[COMRAM] unsigned char 
  2721 ;; Return value:  Size  Location     Type
  2722 ;;		None               void
  2723 ;; Registers used:
  2724 ;;		wreg, status,2, status,0
  2725 ;; Tracked objects:
  2726 ;;		On entry : 0/0
  2727 ;;		On exit  : 0/0
  2728 ;;		Unchanged: 0/0
  2729 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2730 ;;      Params:         0       0       0       0       0       0       0       0       0
  2731 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2732 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2733 ;;      Totals:         1       0       0       0       0       0       0       0       0
  2734 ;;Total ram usage:        1 bytes
  2735 ;; Hardware stack levels used:    1
  2736 ;; Hardware stack levels required when called:    2
  2737 ;; This function calls:
  2738 ;;		Nothing
  2739 ;; This function is called by:
  2740 ;;		_main
  2741 ;; This function uses a non-reentrant model
  2742 ;;
  2743                           
  2744                           	psect	text5
  2745  0013CC                     __ptext5:
  2746                           	opt stack 0
  2747  0013CC                     _setProgramSupply:
  2748                           	opt stack 28
  2749                           
  2750                           ;incstack = 0
  2751                           ;setProgramSupply@mode stored from wreg
  2752  0013CC  6E13               	movwf	setProgramSupply@mode,c
  2753                           
  2754                           ;main.c: 597: if (9==mode)
  2755  0013CE  5013               	movf	setProgramSupply@mode,w,c
  2756  0013D0  0A09               	xorlw	9
  2757  0013D2  A4D8               	btfss	status,2,c
  2758  0013D4  D00A               	goto	l4048
  2759                           
  2760                           ;main.c: 598: {
  2761                           ;main.c: 599: PORTAbits.RA0 = 0;
  2762  0013D6  9080               	bcf	3968,0,c	;volatile
  2763                           
  2764                           ;main.c: 600: PORTAbits.RA1=0;
  2765  0013D8  9280               	bcf	3968,1,c	;volatile
  2766                           
  2767                           ;main.c: 601: PORTAbits.RA2=0;
  2768  0013DA  9480               	bcf	3968,2,c	;volatile
  2769                           
  2770                           ;main.c: 602: PORTAbits.RA3=0;
  2771  0013DC  9680               	bcf	3968,3,c	;volatile
  2772                           
  2773                           ;main.c: 603: PORTAbits.RA5=0;
  2774  0013DE  9A80               	bcf	3968,5,c	;volatile
  2775                           
  2776                           ;main.c: 605: PORTBbits.RB7=0;
  2777  0013E0  9E81               	bcf	3969,7,c	;volatile
  2778                           
  2779                           ;main.c: 606: PORTBbits.RB6=0;
  2780  0013E2  9C81               	bcf	3969,6,c	;volatile
  2781                           
  2782                           ;main.c: 607: PORTBbits.RB5=0;
  2783  0013E4  9A81               	bcf	3969,5,c	;volatile
  2784                           
  2785                           ;main.c: 608: PORTBbits.RB4=0;
  2786  0013E6  9881               	bcf	3969,4,c	;volatile
  2787                           
  2788                           ;main.c: 609: }
  2789  0013E8  D00B               	goto	l341
  2790  0013EA                     l4048:
  2791                           
  2792                           ;main.c: 610: else if (4==mode)
  2793  0013EA  5013               	movf	setProgramSupply@mode,w,c
  2794  0013EC  0A04               	xorlw	4
  2795  0013EE  A4D8               	btfss	status,2,c
  2796  0013F0  D002               	goto	l339
  2797                           
  2798                           ;main.c: 611: {
  2799                           ;main.c: 612: PORTAbits.RA0=1;
  2800  0013F2  8080               	bsf	3968,0,c	;volatile
  2801  0013F4  D001               	goto	L1
  2802  0013F6                     l339:
  2803                           
  2804                           ;main.c: 618: else
  2805                           ;main.c: 619: {
  2806                           ;main.c: 620: PORTAbits.RA0=0;
  2807  0013F6  9080               	bcf	3968,0,c	;volatile
  2808  0013F8                     L1:
  2809                           
  2810                           ;main.c: 621: PORTAbits.RA1=1;
  2811  0013F8  8280               	bsf	3968,1,c	;volatile
  2812                           
  2813                           ;main.c: 622: PORTAbits.RA2=1;
  2814  0013FA  8480               	bsf	3968,2,c	;volatile
  2815                           
  2816                           ;main.c: 623: PORTAbits.RA3=1;
  2817  0013FC  8680               	bsf	3968,3,c	;volatile
  2818                           
  2819                           ;main.c: 624: PORTAbits.RA5=1;
  2820  0013FE  8A80               	bsf	3968,5,c	;volatile
  2821  001400                     l341:
  2822  001400  0012               	return	
  2823  001402                     __end_of_setProgramSupply:
  2824                           	opt stack 0
  2825                           tblptru	equ	0xFF8
  2826                           tblptrh	equ	0xFF7
  2827                           tblptrl	equ	0xFF6
  2828                           tablat	equ	0xFF5
  2829                           intcon	equ	0xFF2
  2830                           postinc0	equ	0xFEE
  2831                           wreg	equ	0xFE8
  2832                           postdec1	equ	0xFE5
  2833                           fsr1l	equ	0xFE1
  2834                           status	equ	0xFD8
  2835                           
  2836 ;; *************** function _setMultiplexerAndBankRelays *****************
  2837 ;; Defined at:
  2838 ;;		line 640 in file "main.c"
  2839 ;; Parameters:    Size  Location     Type
  2840 ;;  boardSelect     1    wreg     unsigned char 
  2841 ;;  sensorNumber    2   26[COMRAM] int 
  2842 ;; Auto vars:     Size  Location     Type
  2843 ;;  boardSelect     1   39[COMRAM] unsigned char 
  2844 ;;  bank            2   40[COMRAM] int 
  2845 ;;  dividend        2   37[COMRAM] int 
  2846 ;;  quotient        2   35[COMRAM] int 
  2847 ;;  temp            2   32[COMRAM] int 
  2848 ;;  remainder       2   30[COMRAM] int 
  2849 ;;  divisor         2    0        int 
  2850 ;;  channel         1   34[COMRAM] unsigned char 
  2851 ;; Return value:  Size  Location     Type
  2852 ;;                  2   26[COMRAM] int 
  2853 ;; Registers used:
  2854 ;;		wreg, status,2, status,0, prodl, cstack
  2855 ;; Tracked objects:
  2856 ;;		On entry : 0/0
  2857 ;;		On exit  : 0/0
  2858 ;;		Unchanged: 0/0
  2859 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2860 ;;      Params:         2       0       0       0       0       0       0       0       0
  2861 ;;      Locals:        12       0       0       0       0       0       0       0       0
  2862 ;;      Temps:          2       0       0       0       0       0       0       0       0
  2863 ;;      Totals:        16       0       0       0       0       0       0       0       0
  2864 ;;Total ram usage:       16 bytes
  2865 ;; Hardware stack levels used:    1
  2866 ;; Hardware stack levels required when called:    3
  2867 ;; This function calls:
  2868 ;;		_DelayMs
  2869 ;;		___awdiv
  2870 ;; This function is called by:
  2871 ;;		_main
  2872 ;; This function uses a non-reentrant model
  2873 ;;
  2874                           
  2875                           	psect	text6
  2876  000A1C                     __ptext6:
  2877                           	opt stack 0
  2878  000A1C                     _setMultiplexerAndBankRelays:
  2879                           	opt stack 27
  2880                           
  2881                           ;incstack = 0
  2882                           ;setMultiplexerAndBankRelays@boardSelect stored from wreg
  2883  000A1C  6E28               	movwf	setMultiplexerAndBankRelays@boardSelect,c
  2884                           
  2885                           ;main.c: 642: int quotient, dividend, remainder, divisor, temp, bank;
  2886                           ;main.c: 643: unsigned char channel;
  2887                           ;main.c: 645: if ('A'==boardSelect)
  2888  000A1E  5028               	movf	setMultiplexerAndBankRelays@boardSelect,w,c
  2889  000A20  0A41               	xorlw	65
  2890  000A22  A4D8               	btfss	status,2,c
  2891  000A24  D003               	goto	l4378
  2892                           
  2893                           ;main.c: 646: {
  2894                           ;main.c: 647: PORTDbits.RD7 = 1;
  2895  000A26  8E83               	bsf	3971,7,c	;volatile
  2896                           
  2897                           ;main.c: 648: PORTDbits.RD6 = 0;
  2898  000A28  9C83               	bcf	3971,6,c	;volatile
  2899  000A2A  D006               	goto	L2
  2900  000A2C                     l4378:
  2901                           
  2902                           ;main.c: 652: else if ('B'==boardSelect)
  2903  000A2C  5028               	movf	setMultiplexerAndBankRelays@boardSelect,w,c
  2904  000A2E  0A42               	xorlw	66
  2905  000A30  A4D8               	btfss	status,2,c
  2906  000A32  D004               	goto	l4382
  2907                           
  2908                           ;main.c: 653: {
  2909                           ;main.c: 654: PORTDbits.RD7 = 0;
  2910  000A34  9E83               	bcf	3971,7,c	;volatile
  2911                           
  2912                           ;main.c: 655: PORTDbits.RD6 = 1;
  2913  000A36  8C83               	bsf	3971,6,c	;volatile
  2914  000A38                     L2:
  2915                           
  2916                           ;main.c: 656: PORTDbits.RD5 = 0;
  2917  000A38  9A83               	bcf	3971,5,c	;volatile
  2918  000A3A  D007               	goto	L3
  2919  000A3C                     l4382:
  2920                           
  2921                           ;main.c: 659: else if ('C'==boardSelect)
  2922  000A3C  5028               	movf	setMultiplexerAndBankRelays@boardSelect,w,c
  2923  000A3E  0A43               	xorlw	67
  2924  000A40  A4D8               	btfss	status,2,c
  2925  000A42  D005               	goto	l4386
  2926                           
  2927                           ;main.c: 660: {
  2928                           ;main.c: 661: PORTDbits.RD7 = 0;
  2929  000A44  9E83               	bcf	3971,7,c	;volatile
  2930                           
  2931                           ;main.c: 662: PORTDbits.RD6 = 0;
  2932  000A46  9C83               	bcf	3971,6,c	;volatile
  2933                           
  2934                           ;main.c: 663: PORTDbits.RD5 = 1;
  2935  000A48  8A83               	bsf	3971,5,c	;volatile
  2936  000A4A                     L3:
  2937                           
  2938                           ;main.c: 664: PORTDbits.RD4 = 0;
  2939  000A4A  9883               	bcf	3971,4,c	;volatile
  2940                           
  2941                           ;main.c: 665: }
  2942  000A4C  D00E               	goto	l4390
  2943  000A4E                     l4386:
  2944                           
  2945                           ;main.c: 666: else if ('D'==boardSelect)
  2946  000A4E  5028               	movf	setMultiplexerAndBankRelays@boardSelect,w,c
  2947  000A50  0A44               	xorlw	68
  2948  000A52  A4D8               	btfss	status,2,c
  2949  000A54  D005               	goto	l350
  2950                           
  2951                           ;main.c: 667: {
  2952                           ;main.c: 668: PORTDbits.RD7 = 0;
  2953  000A56  9E83               	bcf	3971,7,c	;volatile
  2954                           
  2955                           ;main.c: 669: PORTDbits.RD6 = 0;
  2956  000A58  9C83               	bcf	3971,6,c	;volatile
  2957                           
  2958                           ;main.c: 670: PORTDbits.RD5 = 0;
  2959  000A5A  9A83               	bcf	3971,5,c	;volatile
  2960                           
  2961                           ;main.c: 671: PORTDbits.RD4 = 1;
  2962  000A5C  8883               	bsf	3971,4,c	;volatile
  2963                           
  2964                           ;main.c: 672: }
  2965  000A5E  D005               	goto	l4390
  2966  000A60                     l350:
  2967                           
  2968                           ;main.c: 673: else
  2969                           ;main.c: 674: {
  2970                           ;main.c: 675: PORTDbits.RD7 = 0;
  2971  000A60  9E83               	bcf	3971,7,c	;volatile
  2972                           
  2973                           ;main.c: 676: PORTDbits.RD6 = 0;
  2974  000A62  9C83               	bcf	3971,6,c	;volatile
  2975                           
  2976                           ;main.c: 677: PORTDbits.RD5 = 0;
  2977  000A64  9A83               	bcf	3971,5,c	;volatile
  2978                           
  2979                           ;main.c: 678: PORTDbits.RD4 = 0;
  2980  000A66  9883               	bcf	3971,4,c	;volatile
  2981                           
  2982                           ;main.c: 679: return(FALSE);
  2983                           ;	Return value of _setMultiplexerAndBankRelays is never used
  2984  000A68  D0A0               	goto	l352
  2985  000A6A                     l4390:
  2986                           
  2987                           ;main.c: 680: }
  2988                           ;main.c: 682: if(sensorNumber>32)
  2989  000A6A  501C               	movf	setMultiplexerAndBankRelays@sensorNumber+1,w,c
  2990  000A6C  0A80               	xorlw	128
  2991  000A6E  0F80               	addlw	-128
  2992  000A70  0E21               	movlw	33
  2993  000A72  B4D8               	btfsc	status,2,c
  2994  000A74  5C1B               	subwf	setMultiplexerAndBankRelays@sensorNumber,w,c
  2995  000A76  B0D8               	btfsc	status,0,c
  2996  000A78  D00A               	goto	u4790
  2997                           
  2998                           ;main.c: 686: }
  2999                           ;main.c: 687: if(sensorNumber<0)
  3000                           
  3001                           ;main.c: 685: return(FALSE);
  3002                           ;	Return value of _setMultiplexerAndBankRelays is never used
  3003                           
  3004                           ;main.c: 683: {
  3005                           ;main.c: 684: errorFlag=(unsigned char)errorFlag|0x10;
  3006  000A7A  501C               	movf	setMultiplexerAndBankRelays@sensorNumber+1,w,c
  3007  000A7C  0A80               	xorlw	128
  3008  000A7E  6EF3               	movwf	prodl,c
  3009  000A80  0E80               	movlw	128
  3010  000A82  5CF3               	subwf	prodl,w,c
  3011  000A84  0E00               	movlw	0
  3012  000A86  B4D8               	btfsc	status,2,c
  3013  000A88  5C1B               	subwf	setMultiplexerAndBankRelays@sensorNumber,w,c
  3014  000A8A  B0D8               	btfsc	status,0,c
  3015  000A8C  D004               	goto	l4402
  3016  000A8E                     u4790:
  3017                           
  3018                           ;main.c: 688: {
  3019                           ;main.c: 689: errorFlag=(unsigned char)(errorFlag|0x10);
  3020  000A8E  5041               	movf	_errorFlag,w,c
  3021  000A90  0910               	iorlw	16
  3022  000A92  6E41               	movwf	_errorFlag,c
  3023  000A94  D08A               	goto	l352
  3024  000A96                     l4402:
  3025                           
  3026                           ;main.c: 691: }
  3027                           ;main.c: 693: dividend=sensorNumber-1;
  3028  000A96  0EFF               	movlw	255
  3029  000A98  241B               	addwf	setMultiplexerAndBankRelays@sensorNumber,w,c
  3030  000A9A  6E26               	movwf	setMultiplexerAndBankRelays@dividend,c
  3031  000A9C  0EFF               	movlw	255
  3032  000A9E  201C               	addwfc	setMultiplexerAndBankRelays@sensorNumber+1,w,c
  3033  000AA0  6E27               	movwf	setMultiplexerAndBankRelays@dividend+1,c
  3034                           
  3035                           ;main.c: 694: quotient=dividend/8;
  3036  000AA2  C026  F013         	movff	setMultiplexerAndBankRelays@dividend,___awdiv@dividend
  3037  000AA6  C027  F014         	movff	setMultiplexerAndBankRelays@dividend+1,___awdiv@dividend+1
  3038  000AAA  0E00               	movlw	0
  3039  000AAC  6E16               	movwf	___awdiv@divisor+1,c
  3040  000AAE  0E08               	movlw	8
  3041  000AB0  6E15               	movwf	___awdiv@divisor,c
  3042  000AB2  EC4F  F007         	call	___awdiv	;wreg free
  3043  000AB6  C013  F024         	movff	?___awdiv,setMultiplexerAndBankRelays@quotient
  3044  000ABA  C014  F025         	movff	?___awdiv+1,setMultiplexerAndBankRelays@quotient+1
  3045                           
  3046                           ;main.c: 695: bank=quotient+1;
  3047  000ABE  0E01               	movlw	1
  3048  000AC0  2424               	addwf	setMultiplexerAndBankRelays@quotient,w,c
  3049  000AC2  6E29               	movwf	setMultiplexerAndBankRelays@bank,c
  3050  000AC4  0E00               	movlw	0
  3051  000AC6  2025               	addwfc	setMultiplexerAndBankRelays@quotient+1,w,c
  3052  000AC8  6E2A               	movwf	setMultiplexerAndBankRelays@bank+1,c
  3053                           
  3054                           ;main.c: 696: temp=quotient*8;
  3055  000ACA  C024  F01D         	movff	setMultiplexerAndBankRelays@quotient,??_setMultiplexerAndBankRelays
  3056  000ACE  C025  F01E         	movff	setMultiplexerAndBankRelays@quotient+1,??_setMultiplexerAndBankRelays+1
  3057  000AD2  90D8               	bcf	status,0,c
  3058  000AD4  361D               	rlcf	??_setMultiplexerAndBankRelays,f,c
  3059  000AD6  361E               	rlcf	??_setMultiplexerAndBankRelays+1,f,c
  3060  000AD8  90D8               	bcf	status,0,c
  3061  000ADA  361D               	rlcf	??_setMultiplexerAndBankRelays,f,c
  3062  000ADC  361E               	rlcf	??_setMultiplexerAndBankRelays+1,f,c
  3063  000ADE  90D8               	bcf	status,0,c
  3064  000AE0  361D               	rlcf	??_setMultiplexerAndBankRelays,f,c
  3065  000AE2  361E               	rlcf	??_setMultiplexerAndBankRelays+1,f,c
  3066  000AE4  C01D  F021         	movff	??_setMultiplexerAndBankRelays,setMultiplexerAndBankRelays@temp
  3067  000AE8  C01E  F022         	movff	??_setMultiplexerAndBankRelays+1,setMultiplexerAndBankRelays@temp+1
  3068                           
  3069                           ;main.c: 697: remainder=dividend-temp;
  3070  000AEC  C021  F01D         	movff	setMultiplexerAndBankRelays@temp,??_setMultiplexerAndBankRelays
  3071  000AF0  C022  F01E         	movff	setMultiplexerAndBankRelays@temp+1,??_setMultiplexerAndBankRelays+1
  3072  000AF4  1E1D               	comf	??_setMultiplexerAndBankRelays,f,c
  3073  000AF6  1E1E               	comf	??_setMultiplexerAndBankRelays+1,f,c
  3074  000AF8  4A1D               	infsnz	??_setMultiplexerAndBankRelays,f,c
  3075  000AFA  2A1E               	incf	??_setMultiplexerAndBankRelays+1,f,c
  3076  000AFC  5026               	movf	setMultiplexerAndBankRelays@dividend,w,c
  3077  000AFE  241D               	addwf	??_setMultiplexerAndBankRelays,w,c
  3078  000B00  6E1F               	movwf	setMultiplexerAndBankRelays@remainder,c
  3079  000B02  5027               	movf	setMultiplexerAndBankRelays@dividend+1,w,c
  3080  000B04  201E               	addwfc	??_setMultiplexerAndBankRelays+1,w,c
  3081  000B06  6E20               	movwf	setMultiplexerAndBankRelays@remainder+1,c
  3082                           
  3083                           ;main.c: 699: multiplexChannel=remainder;
  3084  000B08  C01F  F03A         	movff	setMultiplexerAndBankRelays@remainder,_multiplexChannel
  3085  000B0C  C020  F03B         	movff	setMultiplexerAndBankRelays@remainder+1,_multiplexChannel+1
  3086                           
  3087                           ;main.c: 700: channel=(unsigned char)(multiplexChannel&0x0F);
  3088  000B10  503A               	movf	_multiplexChannel,w,c
  3089  000B12  0B0F               	andlw	15
  3090  000B14  6E23               	movwf	setMultiplexerAndBankRelays@channel,c
  3091                           
  3092                           ;main.c: 701: PORTD=(PORTD&0xF0)|channel;
  3093  000B16  5083               	movf	3971,w,c	;volatile
  3094  000B18  0BF0               	andlw	240
  3095  000B1A  1023               	iorwf	setMultiplexerAndBankRelays@channel,w,c
  3096  000B1C  6E83               	movwf	3971,c	;volatile
  3097                           
  3098                           ;main.c: 704: if (0==sensorNumber)
  3099  000B1E  501C               	movf	setMultiplexerAndBankRelays@sensorNumber+1,w,c
  3100  000B20  101B               	iorwf	setMultiplexerAndBankRelays@sensorNumber,w,c
  3101  000B22  B4D8               	btfsc	status,2,c
  3102  000B24  D042               	goto	l352
  3103                           
  3104                           ;main.c: 708: else if(1==bank)
  3105                           
  3106                           ;main.c: 705: {
  3107                           ;main.c: 706: ;
  3108                           ;main.c: 707: }
  3109  000B26  0429               	decf	setMultiplexerAndBankRelays@bank,w,c
  3110  000B28  102A               	iorwf	setMultiplexerAndBankRelays@bank+1,w,c
  3111  000B2A  A4D8               	btfss	status,2,c
  3112  000B2C  D00B               	goto	l4438
  3113                           
  3114                           ;main.c: 709: {
  3115                           ;main.c: 710: PORTBbits.RB6=0;
  3116  000B2E  9C81               	bcf	3969,6,c	;volatile
  3117                           
  3118                           ;main.c: 711: PORTBbits.RB5=0;
  3119  000B30  9A81               	bcf	3969,5,c	;volatile
  3120                           
  3121                           ;main.c: 712: PORTBbits.RB4=0;
  3122  000B32  9881               	bcf	3969,4,c	;volatile
  3123                           
  3124                           ;main.c: 713: DelayMs(10);
  3125  000B34  0E00               	movlw	0
  3126  000B36  6E14               	movwf	DelayMs@i+1,c
  3127  000B38  0E0A               	movlw	10
  3128  000B3A  6E13               	movwf	DelayMs@i,c
  3129  000B3C  EC0E  F009         	call	_DelayMs	;wreg free
  3130                           
  3131                           ;main.c: 715: PORTBbits.RB7=1;
  3132  000B40  8E81               	bsf	3969,7,c	;volatile
  3133  000B42  D02F               	goto	L6
  3134  000B44                     l4438:
  3135                           
  3136                           ;main.c: 722: else if(2==bank)
  3137  000B44  5029               	movf	setMultiplexerAndBankRelays@bank,w,c
  3138  000B46  0A02               	xorlw	2
  3139  000B48  102A               	iorwf	setMultiplexerAndBankRelays@bank+1,w,c
  3140  000B4A  A4D8               	btfss	status,2,c
  3141  000B4C  D00B               	goto	l4454
  3142                           
  3143                           ;main.c: 723: {
  3144                           ;main.c: 724: PORTBbits.RB7=0;
  3145  000B4E  9E81               	bcf	3969,7,c	;volatile
  3146                           
  3147                           ;main.c: 725: PORTBbits.RB5=0;
  3148  000B50  9A81               	bcf	3969,5,c	;volatile
  3149                           
  3150                           ;main.c: 726: PORTBbits.RB4=0;
  3151  000B52  9881               	bcf	3969,4,c	;volatile
  3152                           
  3153                           ;main.c: 727: DelayMs(10);
  3154  000B54  0E00               	movlw	0
  3155  000B56  6E14               	movwf	DelayMs@i+1,c
  3156  000B58  0E0A               	movlw	10
  3157  000B5A  6E13               	movwf	DelayMs@i,c
  3158  000B5C  EC0E  F009         	call	_DelayMs	;wreg free
  3159                           
  3160                           ;main.c: 729: PORTBbits.RB6=1;
  3161  000B60  8C81               	bsf	3969,6,c	;volatile
  3162  000B62  D01F               	goto	L6
  3163  000B64                     l4454:
  3164                           
  3165                           ;main.c: 736: else if(3==bank)
  3166  000B64  5029               	movf	setMultiplexerAndBankRelays@bank,w,c
  3167  000B66  0A03               	xorlw	3
  3168  000B68  102A               	iorwf	setMultiplexerAndBankRelays@bank+1,w,c
  3169  000B6A  A4D8               	btfss	status,2,c
  3170  000B6C  D00B               	goto	l4470
  3171                           
  3172                           ;main.c: 737: {
  3173                           ;main.c: 738: PORTBbits.RB7=0;
  3174  000B6E  9E81               	bcf	3969,7,c	;volatile
  3175                           
  3176                           ;main.c: 739: PORTBbits.RB6=0;
  3177  000B70  9C81               	bcf	3969,6,c	;volatile
  3178                           
  3179                           ;main.c: 740: PORTBbits.RB4=0;
  3180  000B72  9881               	bcf	3969,4,c	;volatile
  3181                           
  3182                           ;main.c: 741: DelayMs(10);
  3183  000B74  0E00               	movlw	0
  3184  000B76  6E14               	movwf	DelayMs@i+1,c
  3185  000B78  0E0A               	movlw	10
  3186  000B7A  6E13               	movwf	DelayMs@i,c
  3187  000B7C  EC0E  F009         	call	_DelayMs	;wreg free
  3188                           
  3189                           ;main.c: 743: PORTBbits.RB5=1;
  3190  000B80  8A81               	bsf	3969,5,c	;volatile
  3191  000B82  D00F               	goto	L6
  3192  000B84                     l4470:
  3193                           
  3194                           ;main.c: 750: else if(4==bank)
  3195  000B84  5029               	movf	setMultiplexerAndBankRelays@bank,w,c
  3196  000B86  0A04               	xorlw	4
  3197  000B88  102A               	iorwf	setMultiplexerAndBankRelays@bank+1,w,c
  3198  000B8A  A4D8               	btfss	status,2,c
  3199  000B8C  D00E               	goto	l352
  3200                           
  3201                           ;main.c: 751: {
  3202                           ;main.c: 752: PORTBbits.RB7=0;
  3203  000B8E  9E81               	bcf	3969,7,c	;volatile
  3204                           
  3205                           ;main.c: 753: PORTBbits.RB6=0;
  3206  000B90  9C81               	bcf	3969,6,c	;volatile
  3207                           
  3208                           ;main.c: 754: PORTBbits.RB5=0;
  3209  000B92  9A81               	bcf	3969,5,c	;volatile
  3210                           
  3211                           ;main.c: 755: DelayMs(10);
  3212  000B94  0E00               	movlw	0
  3213  000B96  6E14               	movwf	DelayMs@i+1,c
  3214  000B98  0E0A               	movlw	10
  3215  000B9A  6E13               	movwf	DelayMs@i,c
  3216  000B9C  EC0E  F009         	call	_DelayMs	;wreg free
  3217                           
  3218                           ;main.c: 757: PORTBbits.RB4=1;
  3219  000BA0  8881               	bsf	3969,4,c	;volatile
  3220  000BA2                     L6:
  3221                           
  3222                           ;main.c: 759: PORTAbits.RA1=1;
  3223  000BA2  8280               	bsf	3968,1,c	;volatile
  3224                           
  3225                           ;main.c: 760: PORTAbits.RA2=1;
  3226  000BA4  8480               	bsf	3968,2,c	;volatile
  3227                           
  3228                           ;main.c: 761: PORTAbits.RA3=1;
  3229  000BA6  8680               	bsf	3968,3,c	;volatile
  3230                           
  3231                           ;main.c: 762: PORTAbits.RA5=1;
  3232  000BA8  8A80               	bsf	3968,5,c	;volatile
  3233  000BAA                     l352:
  3234  000BAA  0012               	return	
  3235  000BAC                     __end_of_setMultiplexerAndBankRelays:
  3236                           	opt stack 0
  3237                           tblptru	equ	0xFF8
  3238                           tblptrh	equ	0xFF7
  3239                           tblptrl	equ	0xFF6
  3240                           tablat	equ	0xFF5
  3241                           prodl	equ	0xFF3
  3242                           intcon	equ	0xFF2
  3243                           postinc0	equ	0xFEE
  3244                           wreg	equ	0xFE8
  3245                           postdec1	equ	0xFE5
  3246                           fsr1l	equ	0xFE1
  3247                           status	equ	0xFD8
  3248                           
  3249 ;; *************** function ___awdiv *****************
  3250 ;; Defined at:
  3251 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\awdiv.c"
  3252 ;; Parameters:    Size  Location     Type
  3253 ;;  dividend        2   18[COMRAM] int 
  3254 ;;  divisor         2   20[COMRAM] int 
  3255 ;; Auto vars:     Size  Location     Type
  3256 ;;  quotient        2   24[COMRAM] int 
  3257 ;;  sign            1   23[COMRAM] unsigned char 
  3258 ;;  counter         1   22[COMRAM] unsigned char 
  3259 ;; Return value:  Size  Location     Type
  3260 ;;                  2   18[COMRAM] int 
  3261 ;; Registers used:
  3262 ;;		wreg, status,2, status,0, prodl
  3263 ;; Tracked objects:
  3264 ;;		On entry : 0/0
  3265 ;;		On exit  : 0/0
  3266 ;;		Unchanged: 0/0
  3267 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3268 ;;      Params:         4       0       0       0       0       0       0       0       0
  3269 ;;      Locals:         4       0       0       0       0       0       0       0       0
  3270 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3271 ;;      Totals:         8       0       0       0       0       0       0       0       0
  3272 ;;Total ram usage:        8 bytes
  3273 ;; Hardware stack levels used:    1
  3274 ;; Hardware stack levels required when called:    2
  3275 ;; This function calls:
  3276 ;;		Nothing
  3277 ;; This function is called by:
  3278 ;;		_setMultiplexerAndBankRelays
  3279 ;; This function uses a non-reentrant model
  3280 ;;
  3281                           
  3282                           	psect	text7
  3283  000E9E                     __ptext7:
  3284                           	opt stack 0
  3285  000E9E                     ___awdiv:
  3286                           	opt stack 27
  3287                           
  3288                           ;incstack = 0
  3289  000E9E  0E00               	movlw	0
  3290  000EA0  6E18               	movwf	___awdiv@sign,c
  3291  000EA2  5016               	movf	___awdiv@divisor+1,w,c
  3292  000EA4  0A80               	xorlw	128
  3293  000EA6  6EF3               	movwf	prodl,c
  3294  000EA8  0E80               	movlw	128
  3295  000EAA  5CF3               	subwf	prodl,w,c
  3296  000EAC  0E00               	movlw	0
  3297  000EAE  B4D8               	btfsc	status,2,c
  3298  000EB0  5C15               	subwf	___awdiv@divisor,w,c
  3299  000EB2  B0D8               	btfsc	status,0,c
  3300  000EB4  D006               	goto	l3920
  3301  000EB6  6C15               	negf	___awdiv@divisor,c
  3302  000EB8  1E16               	comf	___awdiv@divisor+1,f,c
  3303  000EBA  B0D8               	btfsc	status,0,c
  3304  000EBC  2A16               	incf	___awdiv@divisor+1,f,c
  3305  000EBE  0E01               	movlw	1
  3306  000EC0  6E18               	movwf	___awdiv@sign,c
  3307  000EC2                     l3920:
  3308  000EC2  5014               	movf	___awdiv@dividend+1,w,c
  3309  000EC4  0A80               	xorlw	128
  3310  000EC6  6EF3               	movwf	prodl,c
  3311  000EC8  0E80               	movlw	128
  3312  000ECA  5CF3               	subwf	prodl,w,c
  3313  000ECC  0E00               	movlw	0
  3314  000ECE  B4D8               	btfsc	status,2,c
  3315  000ED0  5C13               	subwf	___awdiv@dividend,w,c
  3316  000ED2  B0D8               	btfsc	status,0,c
  3317  000ED4  D006               	goto	l3926
  3318  000ED6  6C13               	negf	___awdiv@dividend,c
  3319  000ED8  1E14               	comf	___awdiv@dividend+1,f,c
  3320  000EDA  B0D8               	btfsc	status,0,c
  3321  000EDC  2A14               	incf	___awdiv@dividend+1,f,c
  3322  000EDE  0E01               	movlw	1
  3323  000EE0  1A18               	xorwf	___awdiv@sign,f,c
  3324  000EE2                     l3926:
  3325  000EE2  0E00               	movlw	0
  3326  000EE4  6E1A               	movwf	___awdiv@quotient+1,c
  3327  000EE6  0E00               	movlw	0
  3328  000EE8  6E19               	movwf	___awdiv@quotient,c
  3329  000EEA  5016               	movf	___awdiv@divisor+1,w,c
  3330  000EEC  1015               	iorwf	___awdiv@divisor,w,c
  3331  000EEE  B4D8               	btfsc	status,2,c
  3332  000EF0  D01C               	goto	l3948
  3333  000EF2  0E01               	movlw	1
  3334  000EF4  6E17               	movwf	___awdiv@counter,c
  3335  000EF6  D004               	goto	l3934
  3336  000EF8                     l3932:
  3337  000EF8  90D8               	bcf	status,0,c
  3338  000EFA  3615               	rlcf	___awdiv@divisor,f,c
  3339  000EFC  3616               	rlcf	___awdiv@divisor+1,f,c
  3340  000EFE  2A17               	incf	___awdiv@counter,f,c
  3341  000F00                     l3934:
  3342  000F00  AE16               	btfss	___awdiv@divisor+1,7,c
  3343  000F02  D7FA               	goto	l3932
  3344  000F04                     l3936:
  3345  000F04  90D8               	bcf	status,0,c
  3346  000F06  3619               	rlcf	___awdiv@quotient,f,c
  3347  000F08  361A               	rlcf	___awdiv@quotient+1,f,c
  3348  000F0A  5015               	movf	___awdiv@divisor,w,c
  3349  000F0C  5C13               	subwf	___awdiv@dividend,w,c
  3350  000F0E  5016               	movf	___awdiv@divisor+1,w,c
  3351  000F10  5814               	subwfb	___awdiv@dividend+1,w,c
  3352  000F12  A0D8               	btfss	status,0,c
  3353  000F14  D005               	goto	l3944
  3354  000F16  5015               	movf	___awdiv@divisor,w,c
  3355  000F18  5E13               	subwf	___awdiv@dividend,f,c
  3356  000F1A  5016               	movf	___awdiv@divisor+1,w,c
  3357  000F1C  5A14               	subwfb	___awdiv@dividend+1,f,c
  3358  000F1E  8019               	bsf	___awdiv@quotient,0,c
  3359  000F20                     l3944:
  3360  000F20  90D8               	bcf	status,0,c
  3361  000F22  3216               	rrcf	___awdiv@divisor+1,f,c
  3362  000F24  3215               	rrcf	___awdiv@divisor,f,c
  3363  000F26  2E17               	decfsz	___awdiv@counter,f,c
  3364  000F28  D7ED               	goto	l3936
  3365  000F2A                     l3948:
  3366  000F2A  5018               	movf	___awdiv@sign,w,c
  3367  000F2C  B4D8               	btfsc	status,2,c
  3368  000F2E  D004               	goto	l3952
  3369  000F30  6C19               	negf	___awdiv@quotient,c
  3370  000F32  1E1A               	comf	___awdiv@quotient+1,f,c
  3371  000F34  B0D8               	btfsc	status,0,c
  3372  000F36  2A1A               	incf	___awdiv@quotient+1,f,c
  3373  000F38                     l3952:
  3374  000F38  C019  F013         	movff	___awdiv@quotient,?___awdiv
  3375  000F3C  C01A  F014         	movff	___awdiv@quotient+1,?___awdiv+1
  3376  000F40  0012               	return	
  3377  000F42                     __end_of___awdiv:
  3378                           	opt stack 0
  3379                           tblptru	equ	0xFF8
  3380                           tblptrh	equ	0xFF7
  3381                           tblptrl	equ	0xFF6
  3382                           tablat	equ	0xFF5
  3383                           prodl	equ	0xFF3
  3384                           intcon	equ	0xFF2
  3385                           postinc0	equ	0xFEE
  3386                           wreg	equ	0xFE8
  3387                           postdec1	equ	0xFE5
  3388                           fsr1l	equ	0xFE1
  3389                           status	equ	0xFD8
  3390                           
  3391 ;; *************** function _DelayMs *****************
  3392 ;; Defined at:
  3393 ;;		line 18 in file "DELAY16.c"
  3394 ;; Parameters:    Size  Location     Type
  3395 ;;  i               2   18[COMRAM] unsigned int 
  3396 ;; Auto vars:     Size  Location     Type
  3397 ;;  j               2   20[COMRAM] int 
  3398 ;;  k               1   22[COMRAM] unsigned char 
  3399 ;; Return value:  Size  Location     Type
  3400 ;;		None               void
  3401 ;; Registers used:
  3402 ;;		wreg, status,2, status,0
  3403 ;; Tracked objects:
  3404 ;;		On entry : 0/0
  3405 ;;		On exit  : 0/0
  3406 ;;		Unchanged: 0/0
  3407 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3408 ;;      Params:         2       0       0       0       0       0       0       0       0
  3409 ;;      Locals:         3       0       0       0       0       0       0       0       0
  3410 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3411 ;;      Totals:         5       0       0       0       0       0       0       0       0
  3412 ;;Total ram usage:        5 bytes
  3413 ;; Hardware stack levels used:    1
  3414 ;; Hardware stack levels required when called:    2
  3415 ;; This function calls:
  3416 ;;		Nothing
  3417 ;; This function is called by:
  3418 ;;		_main
  3419 ;;		_setMultiplexerAndBankRelays
  3420 ;;		_turnCompressorOn
  3421 ;;		_turnCompressorOff
  3422 ;; This function uses a non-reentrant model
  3423 ;;
  3424                           
  3425                           	psect	text8
  3426  00121C                     __ptext8:
  3427                           	opt stack 0
  3428  00121C                     _DelayMs:
  3429                           	opt stack 27
  3430                           
  3431                           ;DELAY16.c: 20: int j;
  3432                           ;DELAY16.c: 21: unsigned char k;
  3433                           ;DELAY16.c: 23: for(j=0; j<i; j++)
  3434                           
  3435                           ;incstack = 0
  3436  00121C  0E00               	movlw	0
  3437  00121E  6E16               	movwf	DelayMs@j+1,c
  3438  001220  0E00               	movlw	0
  3439  001222  6E15               	movwf	DelayMs@j,c
  3440  001224  D016               	goto	l3756
  3441  001226                     l373:
  3442                           
  3443                           ;DELAY16.c: 24: {
  3444                           ;DELAY16.c: 25: k=255;
  3445  001226  6817               	setf	DelayMs@k,c
  3446  001228                     l3746:
  3447  001228  0617               	decf	DelayMs@k,f,c
  3448  00122A  2817               	incf	DelayMs@k& (0+255),w,c
  3449  00122C  A4D8               	btfss	status,2,c
  3450  00122E  D7FC               	goto	l3746
  3451                           
  3452                           ;DELAY16.c: 27: k=255;
  3453  001230  6817               	setf	DelayMs@k,c
  3454  001232                     l3748:
  3455  001232  0617               	decf	DelayMs@k,f,c
  3456  001234  2817               	incf	DelayMs@k& (0+255),w,c
  3457  001236  A4D8               	btfss	status,2,c
  3458  001238  D7FC               	goto	l3748
  3459                           
  3460                           ;DELAY16.c: 29: k=255;
  3461  00123A  6817               	setf	DelayMs@k,c
  3462  00123C                     l3750:
  3463  00123C  0617               	decf	DelayMs@k,f,c
  3464  00123E  2817               	incf	DelayMs@k& (0+255),w,c
  3465  001240  A4D8               	btfss	status,2,c
  3466  001242  D7FC               	goto	l3750
  3467                           
  3468                           ;DELAY16.c: 31: k=255;
  3469  001244  6817               	setf	DelayMs@k,c
  3470  001246                     l3752:
  3471  001246  0617               	decf	DelayMs@k,f,c
  3472  001248  2817               	incf	DelayMs@k& (0+255),w,c
  3473  00124A  A4D8               	btfss	status,2,c
  3474  00124C  D7FC               	goto	l3752
  3475  00124E  4A15               	infsnz	DelayMs@j,f,c
  3476  001250  2A16               	incf	DelayMs@j+1,f,c
  3477  001252                     l3756:
  3478  001252  5013               	movf	DelayMs@i,w,c
  3479  001254  5C15               	subwf	DelayMs@j,w,c
  3480  001256  5014               	movf	DelayMs@i+1,w,c
  3481  001258  5816               	subwfb	DelayMs@j+1,w,c
  3482  00125A  B0D8               	btfsc	status,0,c
  3483  00125C  0012               	return	
  3484  00125E  D7E3               	goto	l373
  3485  001260                     __end_of_DelayMs:
  3486                           	opt stack 0
  3487                           tblptru	equ	0xFF8
  3488                           tblptrh	equ	0xFF7
  3489                           tblptrl	equ	0xFF6
  3490                           tablat	equ	0xFF5
  3491                           prodl	equ	0xFF3
  3492                           intcon	equ	0xFF2
  3493                           postinc0	equ	0xFEE
  3494                           wreg	equ	0xFE8
  3495                           postdec1	equ	0xFE5
  3496                           fsr1l	equ	0xFE1
  3497                           status	equ	0xFD8
  3498                           
  3499 ;; *************** function _printf *****************
  3500 ;; Defined at:
  3501 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\doprnt.c"
  3502 ;; Parameters:    Size  Location     Type
  3503 ;;  f               2   30[COMRAM] PTR const unsigned char 
  3504 ;;		 -> STR_29(26), STR_28(30), STR_27(31), STR_26(13), 
  3505 ;;		 -> STR_25(24), STR_24(24), STR_23(11), STR_22(19), 
  3506 ;;		 -> STR_21(27), STR_20(11), STR_19(36), STR_18(36), 
  3507 ;;		 -> STR_17(11), STR_16(19), STR_15(11), STR_14(36), 
  3508 ;;		 -> STR_13(36), STR_12(11), STR_11(19), STR_10(12), 
  3509 ;;		 -> STR_9(19), STR_8(19), STR_7(20), STR_6(16), 
  3510 ;;		 -> STR_5(17), STR_4(16), STR_3(21), STR_2(62), 
  3511 ;;		 -> STR_1(74), 
  3512 ;; Auto vars:     Size  Location     Type
  3513 ;;  _val            5   50[COMRAM] struct .
  3514 ;;  ap              2   48[COMRAM] PTR void [1]
  3515 ;;		 -> ?_printf(2), 
  3516 ;;  c               1   55[COMRAM] char 
  3517 ;;  prec            1   47[COMRAM] char 
  3518 ;;  flag            1   46[COMRAM] unsigned char 
  3519 ;; Return value:  Size  Location     Type
  3520 ;;                  2   30[COMRAM] int 
  3521 ;; Registers used:
  3522 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3523 ;; Tracked objects:
  3524 ;;		On entry : 0/0
  3525 ;;		On exit  : 0/0
  3526 ;;		Unchanged: 0/0
  3527 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3528 ;;      Params:        14       0       0       0       0       0       0       0       0
  3529 ;;      Locals:        10       0       0       0       0       0       0       0       0
  3530 ;;      Temps:          2       0       0       0       0       0       0       0       0
  3531 ;;      Totals:        26       0       0       0       0       0       0       0       0
  3532 ;;Total ram usage:       26 bytes
  3533 ;; Hardware stack levels used:    1
  3534 ;; Hardware stack levels required when called:    3
  3535 ;; This function calls:
  3536 ;;		___lwdiv
  3537 ;;		___lwmod
  3538 ;;		_putch
  3539 ;; This function is called by:
  3540 ;;		_main
  3541 ;; This function uses a non-reentrant model
  3542 ;;
  3543                           
  3544                           	psect	text9
  3545  000BAC                     __ptext9:
  3546                           	opt stack 0
  3547  000BAC                     _printf:
  3548                           	opt stack 27
  3549                           
  3550                           ;doprnt.c: 466: va_list ap;
  3551                           ;doprnt.c: 499: signed char c;
  3552                           ;doprnt.c: 506: signed char prec;
  3553                           ;doprnt.c: 508: unsigned char flag;
  3554                           ;doprnt.c: 527: union {
  3555                           ;doprnt.c: 528: unsigned int _val;
  3556                           ;doprnt.c: 529: struct {
  3557                           ;doprnt.c: 530: const char * _cp;
  3558                           ;doprnt.c: 531: unsigned _len;
  3559                           ;doprnt.c: 532: } _str;
  3560                           ;doprnt.c: 533: } _val;
  3561                           ;doprnt.c: 542: *ap = __va_start();
  3562                           
  3563                           ;incstack = 0
  3564  000BAC  0E00               	movlw	high (?_printf+2)
  3565  000BAE  6E32               	movwf	printf@ap+1,c
  3566  000BB0  0E21               	movlw	low (?_printf+2)
  3567  000BB2  6E31               	movwf	printf@ap,c
  3568                           
  3569                           ;doprnt.c: 545: while(c = *f++) {
  3570  000BB4  D09B               	goto	l4106
  3571  000BB6                     l4054:
  3572                           
  3573                           ;doprnt.c: 547: if(c != '%')
  3574  000BB6  5038               	movf	printf@c,w,c
  3575  000BB8  0A25               	xorlw	37
  3576  000BBA  B4D8               	btfsc	status,2,c
  3577  000BBC  D004               	goto	l4058
  3578                           
  3579                           ;doprnt.c: 549: {
  3580                           ;doprnt.c: 550: (putch(c) );
  3581  000BBE  5038               	movf	printf@c,w,c
  3582  000BC0  ECF8  F00A         	call	_putch
  3583                           
  3584                           ;doprnt.c: 551: continue;
  3585  000BC4  D093               	goto	l4106
  3586  000BC6                     l4058:
  3587                           
  3588                           ;doprnt.c: 552: }
  3589                           ;doprnt.c: 557: flag = 0;
  3590  000BC6  0E00               	movlw	0
  3591  000BC8  6E2F               	movwf	printf@flag,c
  3592                           
  3593                           ;doprnt.c: 644: switch(c = *f++) {
  3594  000BCA  D00E               	goto	l4068
  3595  000BCC                     l4060:
  3596                           
  3597                           ;doprnt.c: 808: c = (*(int *)__va_arg((*(int **)ap), (int)0));
  3598  000BCC  C031  FFD9         	movff	printf@ap,fsr2l
  3599  000BD0  C032  FFDA         	movff	printf@ap+1,fsr2h
  3600  000BD4  50DF               	movf	indf2,w,c
  3601  000BD6  6E38               	movwf	printf@c,c
  3602  000BD8  0E02               	movlw	2
  3603  000BDA  2631               	addwf	printf@ap,f,c
  3604  000BDC  0E00               	movlw	0
  3605  000BDE  2232               	addwfc	printf@ap+1,f,c
  3606  000BE0                     l4064:
  3607                           
  3608                           ;doprnt.c: 818: (putch(c) );
  3609  000BE0  5038               	movf	printf@c,w,c
  3610  000BE2  ECF8  F00A         	call	_putch
  3611                           
  3612                           ;doprnt.c: 819: continue;
  3613  000BE6  D082               	goto	l4106
  3614  000BE8                     l4068:
  3615  000BE8  C01F  FFF6         	movff	printf@f,tblptrl
  3616  000BEC  C020  FFF7         	movff	printf@f+1,tblptrh
  3617  000BF0  4A1F               	infsnz	printf@f,f,c
  3618  000BF2  2A20               	incf	printf@f+1,f,c
  3619  000BF4                     	if	0	;tblptru may be non-zero
  3620  000BF4                     	endif
  3621  000BF4                     	if	0	;tblptru may be non-zero
  3622  000BF4                     	endif
  3623  000BF4  0008               	tblrd		*
  3624  000BF6  CFF5 F038          	movff	tablat,printf@c
  3625  000BFA  5038               	movf	printf@c& (0+255),w,c
  3626                           
  3627                           ; Switch size 1, requested type "space"
  3628                           ; Number of cases is 4, Range of values is 0 to 105
  3629                           ; switch strategies available:
  3630                           ; Name         Instructions Cycles
  3631                           ; simple_byte           13     7 (average)
  3632                           ;	Chosen strategy is simple_byte
  3633  000BFC  0A00               	xorlw	0	; case 0
  3634  000BFE  B4D8               	btfsc	status,2,c
  3635  000C00  D080               	goto	l538
  3636  000C02  0A63               	xorlw	99	; case 99
  3637  000C04  B4D8               	btfsc	status,2,c
  3638  000C06  D7E2               	goto	l4060
  3639  000C08  0A07               	xorlw	7	; case 100
  3640  000C0A  B4D8               	btfsc	status,2,c
  3641  000C0C  D003               	goto	l4070
  3642  000C0E  0A0D               	xorlw	13	; case 105
  3643  000C10  A4D8               	btfss	status,2,c
  3644  000C12  D7E6               	goto	l4064
  3645  000C14                     l4070:
  3646                           
  3647                           ;doprnt.c: 1262: {
  3648                           ;doprnt.c: 1268: _val._val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  3649  000C14  C031  FFD9         	movff	printf@ap,fsr2l
  3650  000C18  C032  FFDA         	movff	printf@ap+1,fsr2h
  3651  000C1C  CFDE F033          	movff	postinc2,printf@_val
  3652  000C20  CFDD F034          	movff	postdec2,printf@_val+1
  3653  000C24  0E02               	movlw	2
  3654  000C26  2631               	addwf	printf@ap,f,c
  3655  000C28  0E00               	movlw	0
  3656  000C2A  2232               	addwfc	printf@ap+1,f,c
  3657                           
  3658                           ;doprnt.c: 1270: if((int)_val._val < 0) {
  3659  000C2C  5034               	movf	printf@_val+1,w,c
  3660  000C2E  0A80               	xorlw	128
  3661  000C30  6EF3               	movwf	prodl,c
  3662  000C32  0E80               	movlw	128
  3663  000C34  5CF3               	subwf	prodl,w,c
  3664  000C36  0E00               	movlw	0
  3665  000C38  B4D8               	btfsc	status,2,c
  3666  000C3A  5C33               	subwf	printf@_val,w,c
  3667  000C3C  B0D8               	btfsc	status,0,c
  3668  000C3E  D006               	goto	l4080
  3669                           
  3670                           ;doprnt.c: 1271: flag |= 0x03;
  3671  000C40  0E03               	movlw	3
  3672  000C42  122F               	iorwf	printf@flag,f,c
  3673                           
  3674                           ;doprnt.c: 1272: _val._val = -_val._val;
  3675  000C44  6C33               	negf	printf@_val,c
  3676  000C46  1E34               	comf	printf@_val+1,f,c
  3677  000C48  B0D8               	btfsc	status,0,c
  3678  000C4A  2A34               	incf	printf@_val+1,f,c
  3679  000C4C                     l4080:
  3680                           
  3681                           ;doprnt.c: 1273: }
  3682                           ;doprnt.c: 1275: }
  3683                           ;doprnt.c: 1314: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  3684  000C4C  0E01               	movlw	1
  3685  000C4E  6E38               	movwf	printf@c,c
  3686  000C50  5038               	movf	printf@c,w,c
  3687  000C52  0A05               	xorlw	5
  3688  000C54  B4D8               	btfsc	status,2,c
  3689  000C56  D016               	goto	l4094
  3690                           
  3691                           ;doprnt.c: 1315: if(_val._val < dpowers[c])
  3692  000C58  5038               	movf	printf@c,w,c
  3693  000C5A  0D02               	mullw	2
  3694  000C5C  0E73               	movlw	low _dpowers
  3695  000C5E  24F3               	addwf	prodl,w,c
  3696  000C60  6EF6               	movwf	tblptrl,c
  3697  000C62  0E7D               	movlw	high _dpowers
  3698  000C64  20F4               	addwfc	prodh,w,c
  3699  000C66  6EF7               	movwf	tblptrh,c
  3700  000C68                     	if	0	;There are less than 3 active tblptr bytes
  3701  000C68                     	endif
  3702  000C68  0009               	tblrd		*+
  3703  000C6A  CFF5 F02D          	movff	tablat,??_printf
  3704  000C6E  0009               	tblrd		*+
  3705  000C70  CFF5 F02E          	movff	tablat,??_printf+1
  3706  000C74  502D               	movf	??_printf,w,c
  3707  000C76  5C33               	subwf	printf@_val,w,c
  3708  000C78  502E               	movf	??_printf+1,w,c
  3709  000C7A  5834               	subwfb	printf@_val+1,w,c
  3710  000C7C  A0D8               	btfss	status,0,c
  3711  000C7E  D002               	goto	l4094
  3712                           
  3713                           ;doprnt.c: 1316: break;
  3714  000C80  2A38               	incf	printf@c,f,c
  3715  000C82  D7E6               	goto	L7
  3716  000C84                     l4094:
  3717                           
  3718                           ;doprnt.c: 1431: {
  3719                           ;doprnt.c: 1447: if(flag & 0x03)
  3720  000C84  C02F  F02D         	movff	printf@flag,??_printf
  3721  000C88  0E03               	movlw	3
  3722  000C8A  162D               	andwf	??_printf,f,c
  3723  000C8C  B4D8               	btfsc	status,2,c
  3724  000C8E  D003               	goto	l4098
  3725                           
  3726                           ;doprnt.c: 1448: (putch('-') );
  3727  000C90  0E2D               	movlw	45
  3728  000C92  ECF8  F00A         	call	_putch
  3729  000C96                     l4098:
  3730                           
  3731                           ;doprnt.c: 1478: }
  3732                           ;doprnt.c: 1481: prec = c;
  3733  000C96  C038  F030         	movff	printf@c,printf@prec
  3734                           
  3735                           ;doprnt.c: 1483: while(prec--) {
  3736  000C9A  D024               	goto	l4104
  3737  000C9C                     l4100:
  3738                           
  3739                           ;doprnt.c: 1487: {
  3740                           ;doprnt.c: 1498: c = (_val._val / dpowers[prec]) % 10 + '0';
  3741  000C9C  5030               	movf	printf@prec,w,c
  3742  000C9E  0D02               	mullw	2
  3743  000CA0  0E73               	movlw	low _dpowers
  3744  000CA2  24F3               	addwf	prodl,w,c
  3745  000CA4  6EF6               	movwf	tblptrl,c
  3746  000CA6  0E7D               	movlw	high _dpowers
  3747  000CA8  20F4               	addwfc	prodh,w,c
  3748  000CAA  6EF7               	movwf	tblptrh,c
  3749  000CAC                     	if	0	;There are less than 3 active tblptr bytes
  3750  000CAC                     	endif
  3751  000CAC  0009               	tblrd		*+
  3752  000CAE  CFF5 F015          	movff	tablat,___lwdiv@divisor
  3753  000CB2  000A               	tblrd		*-
  3754  000CB4  CFF5 F016          	movff	tablat,___lwdiv@divisor+1
  3755  000CB8  C033  F013         	movff	printf@_val,___lwdiv@dividend
  3756  000CBC  C034  F014         	movff	printf@_val+1,___lwdiv@dividend+1
  3757  000CC0  EC9C  F008         	call	___lwdiv	;wreg free
  3758  000CC4  C013  F01A         	movff	?___lwdiv,___lwmod@dividend
  3759  000CC8  C014  F01B         	movff	?___lwdiv+1,___lwmod@dividend+1
  3760  000CCC  0E00               	movlw	0
  3761  000CCE  6E1D               	movwf	___lwmod@divisor+1,c
  3762  000CD0  0E0A               	movlw	10
  3763  000CD2  6E1C               	movwf	___lwmod@divisor,c
  3764  000CD4  EC30  F009         	call	___lwmod	;wreg free
  3765  000CD8  501A               	movf	?___lwmod,w,c
  3766  000CDA  0F30               	addlw	48
  3767  000CDC  6E38               	movwf	printf@c,c
  3768                           
  3769                           ;doprnt.c: 1532: }
  3770                           ;doprnt.c: 1533: (putch(c) );
  3771  000CDE  5038               	movf	printf@c,w,c
  3772  000CE0  ECF8  F00A         	call	_putch
  3773  000CE4                     l4104:
  3774  000CE4  0630               	decf	printf@prec,f,c
  3775  000CE6  2830               	incf	printf@prec& (0+255),w,c
  3776  000CE8  A4D8               	btfss	status,2,c
  3777  000CEA  D7D8               	goto	l4100
  3778  000CEC                     l4106:
  3779  000CEC  C01F  FFF6         	movff	printf@f,tblptrl
  3780  000CF0  C020  FFF7         	movff	printf@f+1,tblptrh
  3781  000CF4  4A1F               	infsnz	printf@f,f,c
  3782  000CF6  2A20               	incf	printf@f+1,f,c
  3783  000CF8                     	if	0	;tblptru may be non-zero
  3784  000CF8                     	endif
  3785  000CF8                     	if	0	;tblptru may be non-zero
  3786  000CF8                     	endif
  3787  000CF8  0008               	tblrd		*
  3788  000CFA  CFF5 F038          	movff	tablat,printf@c
  3789  000CFE  6638               	tstfsz	printf@c& (0+255),c
  3790  000D00  D75A               	goto	l4054
  3791  000D02                     l538:
  3792  000D02  0012               	return	
  3793  000D04                     __end_of_printf:
  3794                           	opt stack 0
  3795                           tblptru	equ	0xFF8
  3796                           tblptrh	equ	0xFF7
  3797                           tblptrl	equ	0xFF6
  3798                           tablat	equ	0xFF5
  3799                           prodh	equ	0xFF4
  3800                           prodl	equ	0xFF3
  3801                           intcon	equ	0xFF2
  3802                           postinc0	equ	0xFEE
  3803                           wreg	equ	0xFE8
  3804                           postdec1	equ	0xFE5
  3805                           fsr1l	equ	0xFE1
  3806                           indf2	equ	0xFDF
  3807                           postinc2	equ	0xFDE
  3808                           postdec2	equ	0xFDD
  3809                           fsr2h	equ	0xFDA
  3810                           fsr2l	equ	0xFD9
  3811                           status	equ	0xFD8
  3812                           
  3813 ;; *************** function _putch *****************
  3814 ;; Defined at:
  3815 ;;		line 392 in file "main.c"
  3816 ;; Parameters:    Size  Location     Type
  3817 ;;  byte            1    wreg     unsigned char 
  3818 ;; Auto vars:     Size  Location     Type
  3819 ;;  byte            1   18[COMRAM] unsigned char 
  3820 ;; Return value:  Size  Location     Type
  3821 ;;		None               void
  3822 ;; Registers used:
  3823 ;;		wreg
  3824 ;; Tracked objects:
  3825 ;;		On entry : 0/0
  3826 ;;		On exit  : 0/0
  3827 ;;		Unchanged: 0/0
  3828 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3829 ;;      Params:         0       0       0       0       0       0       0       0       0
  3830 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3831 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3832 ;;      Totals:         1       0       0       0       0       0       0       0       0
  3833 ;;Total ram usage:        1 bytes
  3834 ;; Hardware stack levels used:    1
  3835 ;; Hardware stack levels required when called:    2
  3836 ;; This function calls:
  3837 ;;		Nothing
  3838 ;; This function is called by:
  3839 ;;		_printf
  3840 ;; This function uses a non-reentrant model
  3841 ;;
  3842                           
  3843                           	psect	text10
  3844  0015F0                     __ptext10:
  3845                           	opt stack 0
  3846  0015F0                     _putch:
  3847                           	opt stack 27
  3848                           
  3849                           ;incstack = 0
  3850                           ;putch@byte stored from wreg
  3851  0015F0  6E13               	movwf	putch@byte,c
  3852  0015F2                     l256:
  3853  0015F2  A89E               	btfss	3998,4,c	;volatile
  3854  0015F4  D7FE               	goto	l256
  3855                           
  3856                           ;main.c: 396: TXREG = byte;
  3857  0015F6  C013  FFAD         	movff	putch@byte,4013	;volatile
  3858                           
  3859                           ;main.c: 397: return;
  3860  0015FA  0012               	return	
  3861  0015FC                     __end_of_putch:
  3862                           	opt stack 0
  3863                           tblptru	equ	0xFF8
  3864                           tblptrh	equ	0xFF7
  3865                           tblptrl	equ	0xFF6
  3866                           tablat	equ	0xFF5
  3867                           prodh	equ	0xFF4
  3868                           prodl	equ	0xFF3
  3869                           intcon	equ	0xFF2
  3870                           postinc0	equ	0xFEE
  3871                           wreg	equ	0xFE8
  3872                           postdec1	equ	0xFE5
  3873                           fsr1l	equ	0xFE1
  3874                           indf2	equ	0xFDF
  3875                           postinc2	equ	0xFDE
  3876                           postdec2	equ	0xFDD
  3877                           fsr2h	equ	0xFDA
  3878                           fsr2l	equ	0xFD9
  3879                           status	equ	0xFD8
  3880                           
  3881 ;; *************** function ___lwmod *****************
  3882 ;; Defined at:
  3883 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\lwmod.c"
  3884 ;; Parameters:    Size  Location     Type
  3885 ;;  dividend        2   25[COMRAM] unsigned int 
  3886 ;;  divisor         2   27[COMRAM] unsigned int 
  3887 ;; Auto vars:     Size  Location     Type
  3888 ;;  counter         1   29[COMRAM] unsigned char 
  3889 ;; Return value:  Size  Location     Type
  3890 ;;                  2   25[COMRAM] unsigned int 
  3891 ;; Registers used:
  3892 ;;		wreg, status,2, status,0
  3893 ;; Tracked objects:
  3894 ;;		On entry : 0/0
  3895 ;;		On exit  : 0/0
  3896 ;;		Unchanged: 0/0
  3897 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3898 ;;      Params:         4       0       0       0       0       0       0       0       0
  3899 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3900 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3901 ;;      Totals:         5       0       0       0       0       0       0       0       0
  3902 ;;Total ram usage:        5 bytes
  3903 ;; Hardware stack levels used:    1
  3904 ;; Hardware stack levels required when called:    2
  3905 ;; This function calls:
  3906 ;;		Nothing
  3907 ;; This function is called by:
  3908 ;;		_printf
  3909 ;; This function uses a non-reentrant model
  3910 ;;
  3911                           
  3912                           	psect	text11
  3913  001260                     __ptext11:
  3914                           	opt stack 0
  3915  001260                     ___lwmod:
  3916                           	opt stack 27
  3917                           
  3918                           ;incstack = 0
  3919  001260  501D               	movf	___lwmod@divisor+1,w,c
  3920  001262  101C               	iorwf	___lwmod@divisor,w,c
  3921  001264  B4D8               	btfsc	status,2,c
  3922  001266  D018               	goto	l1147
  3923  001268  0E01               	movlw	1
  3924  00126A  6E1E               	movwf	___lwmod@counter,c
  3925  00126C  D004               	goto	l3984
  3926  00126E                     l3982:
  3927  00126E  90D8               	bcf	status,0,c
  3928  001270  361C               	rlcf	___lwmod@divisor,f,c
  3929  001272  361D               	rlcf	___lwmod@divisor+1,f,c
  3930  001274  2A1E               	incf	___lwmod@counter,f,c
  3931  001276                     l3984:
  3932  001276  AE1D               	btfss	___lwmod@divisor+1,7,c
  3933  001278  D7FA               	goto	l3982
  3934  00127A                     l3986:
  3935  00127A  501C               	movf	___lwmod@divisor,w,c
  3936  00127C  5C1A               	subwf	___lwmod@dividend,w,c
  3937  00127E  501D               	movf	___lwmod@divisor+1,w,c
  3938  001280  581B               	subwfb	___lwmod@dividend+1,w,c
  3939  001282  A0D8               	btfss	status,0,c
  3940  001284  D004               	goto	l3990
  3941  001286  501C               	movf	___lwmod@divisor,w,c
  3942  001288  5E1A               	subwf	___lwmod@dividend,f,c
  3943  00128A  501D               	movf	___lwmod@divisor+1,w,c
  3944  00128C  5A1B               	subwfb	___lwmod@dividend+1,f,c
  3945  00128E                     l3990:
  3946  00128E  90D8               	bcf	status,0,c
  3947  001290  321D               	rrcf	___lwmod@divisor+1,f,c
  3948  001292  321C               	rrcf	___lwmod@divisor,f,c
  3949  001294  2E1E               	decfsz	___lwmod@counter,f,c
  3950  001296  D7F1               	goto	l3986
  3951  001298                     l1147:
  3952  001298  C01A  F01A         	movff	___lwmod@dividend,?___lwmod
  3953  00129C  C01B  F01B         	movff	___lwmod@dividend+1,?___lwmod+1
  3954  0012A0  0012               	return	
  3955  0012A2                     __end_of___lwmod:
  3956                           	opt stack 0
  3957                           tblptru	equ	0xFF8
  3958                           tblptrh	equ	0xFF7
  3959                           tblptrl	equ	0xFF6
  3960                           tablat	equ	0xFF5
  3961                           prodh	equ	0xFF4
  3962                           prodl	equ	0xFF3
  3963                           intcon	equ	0xFF2
  3964                           postinc0	equ	0xFEE
  3965                           wreg	equ	0xFE8
  3966                           postdec1	equ	0xFE5
  3967                           fsr1l	equ	0xFE1
  3968                           indf2	equ	0xFDF
  3969                           postinc2	equ	0xFDE
  3970                           postdec2	equ	0xFDD
  3971                           fsr2h	equ	0xFDA
  3972                           fsr2l	equ	0xFD9
  3973                           status	equ	0xFD8
  3974                           
  3975 ;; *************** function ___lwdiv *****************
  3976 ;; Defined at:
  3977 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\lwdiv.c"
  3978 ;; Parameters:    Size  Location     Type
  3979 ;;  dividend        2   18[COMRAM] unsigned int 
  3980 ;;  divisor         2   20[COMRAM] unsigned int 
  3981 ;; Auto vars:     Size  Location     Type
  3982 ;;  quotient        2   23[COMRAM] unsigned int 
  3983 ;;  counter         1   22[COMRAM] unsigned char 
  3984 ;; Return value:  Size  Location     Type
  3985 ;;                  2   18[COMRAM] unsigned int 
  3986 ;; Registers used:
  3987 ;;		wreg, status,2, status,0
  3988 ;; Tracked objects:
  3989 ;;		On entry : 0/0
  3990 ;;		On exit  : 0/0
  3991 ;;		Unchanged: 0/0
  3992 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3993 ;;      Params:         4       0       0       0       0       0       0       0       0
  3994 ;;      Locals:         3       0       0       0       0       0       0       0       0
  3995 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3996 ;;      Totals:         7       0       0       0       0       0       0       0       0
  3997 ;;Total ram usage:        7 bytes
  3998 ;; Hardware stack levels used:    1
  3999 ;; Hardware stack levels required when called:    2
  4000 ;; This function calls:
  4001 ;;		Nothing
  4002 ;; This function is called by:
  4003 ;;		_printf
  4004 ;; This function uses a non-reentrant model
  4005 ;;
  4006                           
  4007                           	psect	text12
  4008  001138                     __ptext12:
  4009                           	opt stack 0
  4010  001138                     ___lwdiv:
  4011                           	opt stack 27
  4012                           
  4013                           ;incstack = 0
  4014  001138  0E00               	movlw	0
  4015  00113A  6E19               	movwf	___lwdiv@quotient+1,c
  4016  00113C  0E00               	movlw	0
  4017  00113E  6E18               	movwf	___lwdiv@quotient,c
  4018  001140  5016               	movf	___lwdiv@divisor+1,w,c
  4019  001142  1015               	iorwf	___lwdiv@divisor,w,c
  4020  001144  B4D8               	btfsc	status,2,c
  4021  001146  D01C               	goto	l1137
  4022  001148  0E01               	movlw	1
  4023  00114A  6E17               	movwf	___lwdiv@counter,c
  4024  00114C  D004               	goto	l3964
  4025  00114E                     l3962:
  4026  00114E  90D8               	bcf	status,0,c
  4027  001150  3615               	rlcf	___lwdiv@divisor,f,c
  4028  001152  3616               	rlcf	___lwdiv@divisor+1,f,c
  4029  001154  2A17               	incf	___lwdiv@counter,f,c
  4030  001156                     l3964:
  4031  001156  AE16               	btfss	___lwdiv@divisor+1,7,c
  4032  001158  D7FA               	goto	l3962
  4033  00115A                     l3966:
  4034  00115A  90D8               	bcf	status,0,c
  4035  00115C  3618               	rlcf	___lwdiv@quotient,f,c
  4036  00115E  3619               	rlcf	___lwdiv@quotient+1,f,c
  4037  001160  5015               	movf	___lwdiv@divisor,w,c
  4038  001162  5C13               	subwf	___lwdiv@dividend,w,c
  4039  001164  5016               	movf	___lwdiv@divisor+1,w,c
  4040  001166  5814               	subwfb	___lwdiv@dividend+1,w,c
  4041  001168  A0D8               	btfss	status,0,c
  4042  00116A  D005               	goto	l3974
  4043  00116C  5015               	movf	___lwdiv@divisor,w,c
  4044  00116E  5E13               	subwf	___lwdiv@dividend,f,c
  4045  001170  5016               	movf	___lwdiv@divisor+1,w,c
  4046  001172  5A14               	subwfb	___lwdiv@dividend+1,f,c
  4047  001174  8018               	bsf	___lwdiv@quotient,0,c
  4048  001176                     l3974:
  4049  001176  90D8               	bcf	status,0,c
  4050  001178  3216               	rrcf	___lwdiv@divisor+1,f,c
  4051  00117A  3215               	rrcf	___lwdiv@divisor,f,c
  4052  00117C  2E17               	decfsz	___lwdiv@counter,f,c
  4053  00117E  D7ED               	goto	l3966
  4054  001180                     l1137:
  4055  001180  C018  F013         	movff	___lwdiv@quotient,?___lwdiv
  4056  001184  C019  F014         	movff	___lwdiv@quotient+1,?___lwdiv+1
  4057  001188  0012               	return	
  4058  00118A                     __end_of___lwdiv:
  4059                           	opt stack 0
  4060                           tblptru	equ	0xFF8
  4061                           tblptrh	equ	0xFF7
  4062                           tblptrl	equ	0xFF6
  4063                           tablat	equ	0xFF5
  4064                           prodh	equ	0xFF4
  4065                           prodl	equ	0xFF3
  4066                           intcon	equ	0xFF2
  4067                           postinc0	equ	0xFEE
  4068                           wreg	equ	0xFE8
  4069                           postdec1	equ	0xFE5
  4070                           fsr1l	equ	0xFE1
  4071                           indf2	equ	0xFDF
  4072                           postinc2	equ	0xFDE
  4073                           postdec2	equ	0xFDD
  4074                           fsr2h	equ	0xFDA
  4075                           fsr2l	equ	0xFD9
  4076                           status	equ	0xFD8
  4077                           
  4078 ;; *************** function _parseInString *****************
  4079 ;; Defined at:
  4080 ;;		line 411 in file "main.c"
  4081 ;; Parameters:    Size  Location     Type
  4082 ;;		None
  4083 ;; Auto vars:     Size  Location     Type
  4084 ;;  alphaString    32   32[BANK0 ] unsigned char [32]
  4085 ;;  numString      32    0[BANK0 ] unsigned char [32]
  4086 ;;  value           2   66[BANK0 ] int 
  4087 ;;  ch              1   71[BANK0 ] unsigned char 
  4088 ;;  i               1   70[BANK0 ] unsigned char 
  4089 ;;  j               1   69[BANK0 ] unsigned char 
  4090 ;;  command         1   68[BANK0 ] unsigned char 
  4091 ;;  k               1   65[BANK0 ] unsigned char 
  4092 ;;  punctuationC    1   64[BANK0 ] unsigned char 
  4093 ;; Return value:  Size  Location     Type
  4094 ;;                  1    wreg      unsigned char 
  4095 ;; Registers used:
  4096 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4097 ;; Tracked objects:
  4098 ;;		On entry : 0/0
  4099 ;;		On exit  : 0/0
  4100 ;;		Unchanged: 0/0
  4101 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4102 ;;      Params:         0       0       0       0       0       0       0       0       0
  4103 ;;      Locals:         0      72       0       0       0       0       0       0       0
  4104 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4105 ;;      Totals:         0      72       0       0       0       0       0       0       0
  4106 ;;Total ram usage:       72 bytes
  4107 ;; Hardware stack levels used:    1
  4108 ;; Hardware stack levels required when called:    4
  4109 ;; This function calls:
  4110 ;;		_atoi
  4111 ;;		_isalpha
  4112 ;;		_isdigit
  4113 ;;		_ispunct
  4114 ;;		_isspace
  4115 ;;		_strcmp
  4116 ;; This function is called by:
  4117 ;;		_main
  4118 ;; This function uses a non-reentrant model
  4119 ;;
  4120                           
  4121                           	psect	text13
  4122  00001C                     __ptext13:
  4123                           	opt stack 0
  4124  00001C                     _parseInString:
  4125                           	opt stack 26
  4126                           
  4127                           ;main.c: 413: unsigned char i, j, k, ch;
  4128                           ;main.c: 414: char alphaString[32]="\0";
  4129                           
  4130                           ;incstack = 0
  4131  00001C  EE20  F0B7         	lfsr	2,parseInString@F5704
  4132  000020  EE10  F080         	lfsr	1,parseInString@alphaString
  4133  000024  0E20               	movlw	32
  4134  000026                     u4301:
  4135  000026  CFDE FFE6          	movff	postinc2,postinc1
  4136  00002A  2EE8               	decfsz	wreg,f,c
  4137  00002C  D7FC               	goto	u4301
  4138                           
  4139                           ;main.c: 415: char numString[32]="\0";
  4140  00002E  EE20  F0D7         	lfsr	2,parseInString@F5706
  4141  000032  EE10  F060         	lfsr	1,parseInString@numString
  4142  000036  0E20               	movlw	32
  4143  000038                     u4311:
  4144  000038  CFDE FFE6          	movff	postinc2,postinc1
  4145  00003C  2EE8               	decfsz	wreg,f,c
  4146  00003E  D7FC               	goto	u4311
  4147                           
  4148                           ;main.c: 416: int value;
  4149                           ;main.c: 417: unsigned char punctuationChar=0;
  4150  000040  0E00               	movlw	0
  4151  000042  0100               	movlb	0	; () banked
  4152  000044  6FA0               	movwf	parseInString@punctuationChar& (0+255),b
  4153                           
  4154                           ; BSR set to: 0
  4155                           ;main.c: 418: unsigned char command;
  4156                           ;main.c: 420: i=0;
  4157  000046  0E00               	movlw	0
  4158  000048  0100               	movlb	0	; () banked
  4159  00004A  6FA6               	movwf	parseInString@i& (0+255),b
  4160                           
  4161                           ; BSR set to: 0
  4162                           ;main.c: 421: punctuationChar=0;
  4163  00004C  0E00               	movlw	0
  4164  00004E  0100               	movlb	0	; () banked
  4165  000050  6FA0               	movwf	parseInString@punctuationChar& (0+255),b
  4166                           
  4167                           ; BSR set to: 0
  4168                           ;main.c: 422: command=0;
  4169  000052  0E00               	movlw	0
  4170  000054  0100               	movlb	0	; () banked
  4171  000056  6FA4               	movwf	parseInString@command& (0+255),b
  4172                           
  4173                           ; BSR set to: 0
  4174                           ;main.c: 423: value=0;
  4175  000058  0E00               	movlw	0
  4176  00005A  0100               	movlb	0	; () banked
  4177  00005C  6FA3               	movwf	(parseInString@value+1)& (0+255),b
  4178  00005E  0E00               	movlw	0
  4179  000060  0100               	movlb	0	; () banked
  4180  000062  6FA2               	movwf	parseInString@value& (0+255),b
  4181                           
  4182                           ; BSR set to: 0
  4183                           ;main.c: 424: potValue=0;
  4184  000064  0E00               	movlw	0
  4185  000066  6E3D               	movwf	_potValue+1,c
  4186  000068  0E00               	movlw	0
  4187  00006A  6E3C               	movwf	_potValue,c
  4188                           
  4189                           ; BSR set to: 0
  4190                           ;main.c: 425: k=0;
  4191  00006C  0E00               	movlw	0
  4192  00006E  0100               	movlb	0	; () banked
  4193  000070  6FA1               	movwf	parseInString@k& (0+255),b
  4194                           
  4195                           ; BSR set to: 0
  4196                           ;main.c: 426: OTP_Validation_Flag=0;
  4197  000072  0E00               	movlw	0
  4198  000074  6E3E               	movwf	_OTP_Validation_Flag,c
  4199                           
  4200                           ; BSR set to: 0
  4201                           ;main.c: 431: if('>'!=UARTbuffer[0])
  4202  000076  0101               	movlb	1	; () banked
  4203  000078  5100               	movf	_UARTbuffer& (0+255),w,b
  4204  00007A  0A3E               	xorlw	62
  4205  00007C  B4D8               	btfsc	status,2,c
  4206  00007E  D004               	goto	l4144
  4207                           
  4208                           ; BSR set to: 1
  4209                           ;main.c: 432: {
  4210                           ;main.c: 433: UARTbuffer[0]=0;
  4211  000080  0E00               	movlw	0
  4212  000082  0101               	movlb	1	; () banked
  4213  000084  6F00               	movwf	_UARTbuffer& (0+255),b
  4214  000086  D246               	goto	u4710
  4215  000088                     l4144:
  4216                           
  4217                           ; BSR set to: 1
  4218                           ;main.c: 435: }
  4219                           ;main.c: 436: UARTbuffer[0]=0;
  4220  000088  0E00               	movlw	0
  4221  00008A  0101               	movlb	1	; () banked
  4222  00008C  6F00               	movwf	_UARTbuffer& (0+255),b
  4223                           
  4224                           ; BSR set to: 1
  4225                           ;main.c: 439: boardSelect = UARTbuffer[1];
  4226  00008E  C101  F040         	movff	_UARTbuffer+1,_boardSelect
  4227                           
  4228                           ; BSR set to: 1
  4229                           ;main.c: 440: if('A'==boardSelect)
  4230  000092  5040               	movf	_boardSelect,w,c
  4231  000094  0A41               	xorlw	65
  4232  000096  A4D8               	btfss	status,2,c
  4233  000098  D002               	goto	l4152
  4234                           
  4235                           ; BSR set to: 1
  4236                           ;main.c: 441: {
  4237                           ;main.c: 442: slavePIC = 0xA0;
  4238  00009A  0EA0               	movlw	160
  4239  00009C  D017               	goto	L11
  4240  00009E                     l4152:
  4241                           
  4242                           ; BSR set to: 1
  4243                           ;main.c: 444: else if('B'==boardSelect)
  4244  00009E  5040               	movf	_boardSelect,w,c
  4245  0000A0  0A42               	xorlw	66
  4246  0000A2  A4D8               	btfss	status,2,c
  4247  0000A4  D002               	goto	l4156
  4248                           
  4249                           ; BSR set to: 1
  4250                           ;main.c: 445: {
  4251                           ;main.c: 446: slavePIC = 0xB0;
  4252  0000A6  0EB0               	movlw	176
  4253  0000A8  D011               	goto	L11
  4254  0000AA                     l4156:
  4255                           
  4256                           ; BSR set to: 1
  4257                           ;main.c: 448: else if('C'==boardSelect)
  4258  0000AA  5040               	movf	_boardSelect,w,c
  4259  0000AC  0A43               	xorlw	67
  4260  0000AE  A4D8               	btfss	status,2,c
  4261  0000B0  D002               	goto	l4160
  4262                           
  4263                           ; BSR set to: 1
  4264                           ;main.c: 449: {
  4265                           ;main.c: 450: slavePIC = 0xC0;
  4266  0000B2  0EC0               	movlw	192
  4267  0000B4  D00B               	goto	L11
  4268  0000B6                     l4160:
  4269                           
  4270                           ; BSR set to: 1
  4271                           ;main.c: 452: else if('D'==boardSelect)
  4272  0000B6  5040               	movf	_boardSelect,w,c
  4273  0000B8  0A44               	xorlw	68
  4274  0000BA  A4D8               	btfss	status,2,c
  4275  0000BC  D002               	goto	l4164
  4276                           
  4277                           ; BSR set to: 1
  4278                           ;main.c: 453: {
  4279                           ;main.c: 454: slavePIC = 0xD0;
  4280  0000BE  0ED0               	movlw	208
  4281  0000C0  D005               	goto	L11
  4282  0000C2                     l4164:
  4283                           
  4284                           ; BSR set to: 1
  4285                           ;main.c: 456: else if('X'==boardSelect)
  4286  0000C2  5040               	movf	_boardSelect,w,c
  4287  0000C4  0A58               	xorlw	88
  4288  0000C6  A4D8               	btfss	status,2,c
  4289  0000C8  D003               	goto	l276
  4290                           
  4291                           ; BSR set to: 1
  4292                           ;main.c: 457: {
  4293                           ;main.c: 458: slavePIC = 0x00;
  4294  0000CA  0E00               	movlw	0
  4295  0000CC                     L11:
  4296  0000CC  6E42               	movwf	_slavePIC,c
  4297                           
  4298                           ;main.c: 459: }
  4299  0000CE  D00A               	goto	l4174
  4300  0000D0                     l276:
  4301                           
  4302                           ; BSR set to: 1
  4303                           ;main.c: 460: else
  4304                           ;main.c: 461: {
  4305                           ;main.c: 462: errorFlag=0xFF;
  4306  0000D0  6841               	setf	_errorFlag,c
  4307                           
  4308                           ; BSR set to: 1
  4309                           ;main.c: 463: boardSelect = 0;
  4310  0000D2  0E00               	movlw	0
  4311  0000D4  6E40               	movwf	_boardSelect,c
  4312                           
  4313                           ;main.c: 464: slavePIC = 0x00;
  4314  0000D6  0E00               	movlw	0
  4315  0000D8  6E42               	movwf	_slavePIC,c
  4316                           
  4317                           ;main.c: 465: command=7;
  4318  0000DA  0E07               	movlw	7
  4319  0000DC  0100               	movlb	0	; () banked
  4320  0000DE  6FA4               	movwf	parseInString@command& (0+255),b
  4321                           
  4322                           ; BSR set to: 0
  4323                           ;main.c: 466: return(0);
  4324  0000E0  0E00               	movlw	0
  4325  0000E2  D22C               	goto	l267
  4326  0000E4                     l4174:
  4327                           
  4328                           ;main.c: 467: }
  4329                           ;main.c: 470: punctuationChar='>';
  4330  0000E4  0E3E               	movlw	62
  4331  0000E6  0100               	movlb	0	; () banked
  4332  0000E8  6FA0               	movwf	parseInString@punctuationChar& (0+255),b
  4333                           
  4334                           ;main.c: 471: i=2;
  4335  0000EA  0E02               	movlw	2
  4336  0000EC  0100               	movlb	0	; () banked
  4337  0000EE  6FA6               	movwf	parseInString@i& (0+255),b
  4338  0000F0                     l4176:
  4339                           
  4340                           ; BSR set to: 0
  4341                           ;main.c: 473: ch=UARTbuffer[i];
  4342  0000F0  0100               	movlb	0	; () banked
  4343  0000F2  51A6               	movf	parseInString@i& (0+255),w,b
  4344  0000F4  0D01               	mullw	1
  4345  0000F6  0101               	movlb	1	; () banked
  4346  0000F8  0E00               	movlw	low _UARTbuffer
  4347  0000FA  24F3               	addwf	prodl,w,c
  4348  0000FC  6ED9               	movwf	fsr2l,c
  4349  0000FE  0101               	movlb	1	; () banked
  4350  000100  0E01               	movlw	high _UARTbuffer
  4351  000102  20F4               	addwfc	prodh,w,c
  4352  000104  6EDA               	movwf	fsr2h,c
  4353  000106  50DF               	movf	indf2,w,c
  4354  000108  0100               	movlb	0	; () banked
  4355  00010A  6FA7               	movwf	parseInString@ch& (0+255),b
  4356                           
  4357                           ; BSR set to: 0
  4358                           ;main.c: 475: if ('\r'==ch)
  4359  00010C  0100               	movlb	0	; () banked
  4360  00010E  51A7               	movf	parseInString@ch& (0+255),w,b
  4361  000110  0A0D               	xorlw	13
  4362  000112  B4D8               	btfsc	status,2,c
  4363  000114  D211               	goto	l4346
  4364                           
  4365                           ; BSR set to: 0
  4366                           ;main.c: 480: else if (isdigit(ch))
  4367                           
  4368                           ; BSR set to: 0
  4369                           
  4370                           ; BSR set to: 0
  4371                           ;main.c: 478: }
  4372                           
  4373                           ; BSR set to: 0
  4374                           ;main.c: 476: {
  4375                           ;main.c: 477: break;
  4376  000116  0100               	movlb	0	; () banked
  4377  000118  51A7               	movf	parseInString@ch& (0+255),w,b
  4378  00011A  EC9F  F00A         	call	_isdigit
  4379  00011E  A0D8               	btfss	status,0,c
  4380  000120  D085               	goto	l4234
  4381                           
  4382                           ;main.c: 481: {
  4383                           ;main.c: 482: j=0;
  4384  000122  0E00               	movlw	0
  4385  000124  0100               	movlb	0	; () banked
  4386  000126  6FA5               	movwf	parseInString@j& (0+255),b
  4387  000128                     l4188:
  4388                           
  4389                           ;main.c: 484: numString[j]=ch;
  4390  000128  0100               	movlb	0	; () banked
  4391  00012A  51A5               	movf	parseInString@j& (0+255),w,b
  4392  00012C  0D01               	mullw	1
  4393  00012E  0100               	movlb	0	; () banked
  4394  000130  0E60               	movlw	low parseInString@numString
  4395  000132  24F3               	addwf	prodl,w,c
  4396  000134  6ED9               	movwf	fsr2l,c
  4397  000136  0100               	movlb	0	; () banked
  4398  000138  0E00               	movlw	high parseInString@numString
  4399  00013A  20F4               	addwfc	prodh,w,c
  4400  00013C  6EDA               	movwf	fsr2h,c
  4401  00013E  0100               	movlb	0	; () banked
  4402  000140  C0A7  FFDF         	movff	parseInString@ch,indf2
  4403                           
  4404                           ; BSR set to: 0
  4405                           ;main.c: 485: j++;
  4406  000144  0100               	movlb	0	; () banked
  4407  000146  2BA5               	incf	parseInString@j& (0+255),f,b
  4408                           
  4409                           ; BSR set to: 0
  4410                           ;main.c: 486: if(j>=32)return(7);
  4411  000148  0E1F               	movlw	31
  4412  00014A  0100               	movlb	0	; () banked
  4413  00014C  65A5               	cpfsgt	parseInString@j& (0+255),b
  4414  00014E  D001               	goto	l4198
  4415  000150  D1E1               	goto	u4710
  4416  000152                     l4198:
  4417                           
  4418                           ; BSR set to: 0
  4419                           ;main.c: 487: i++;
  4420  000152  0100               	movlb	0	; () banked
  4421  000154  2BA6               	incf	parseInString@i& (0+255),f,b
  4422                           
  4423                           ; BSR set to: 0
  4424                           ;main.c: 488: if(i>=64)return(7);
  4425  000156  0E3F               	movlw	63
  4426  000158  0100               	movlb	0	; () banked
  4427  00015A  65A6               	cpfsgt	parseInString@i& (0+255),b
  4428  00015C  D001               	goto	l4206
  4429  00015E  D1DA               	goto	u4710
  4430  000160                     l4206:
  4431                           
  4432                           ; BSR set to: 0
  4433                           ;main.c: 489: ch=UARTbuffer[i];
  4434  000160  0100               	movlb	0	; () banked
  4435  000162  51A6               	movf	parseInString@i& (0+255),w,b
  4436  000164  0D01               	mullw	1
  4437  000166  0101               	movlb	1	; () banked
  4438  000168  0E00               	movlw	low _UARTbuffer
  4439  00016A  24F3               	addwf	prodl,w,c
  4440  00016C  6ED9               	movwf	fsr2l,c
  4441  00016E  0101               	movlb	1	; () banked
  4442  000170  0E01               	movlw	high _UARTbuffer
  4443  000172  20F4               	addwfc	prodh,w,c
  4444  000174  6EDA               	movwf	fsr2h,c
  4445  000176  50DF               	movf	indf2,w,c
  4446  000178  0100               	movlb	0	; () banked
  4447  00017A  6FA7               	movwf	parseInString@ch& (0+255),b
  4448                           
  4449                           ; BSR set to: 0
  4450                           ;main.c: 490: }while(isdigit(ch));
  4451  00017C  0100               	movlb	0	; () banked
  4452  00017E  51A7               	movf	parseInString@ch& (0+255),w,b
  4453  000180  EC9F  F00A         	call	_isdigit
  4454  000184  B0D8               	btfsc	status,0,c
  4455  000186  D7D0               	goto	l4188
  4456                           
  4457                           ;main.c: 492: if(j<32)
  4458  000188  0E20               	movlw	32
  4459  00018A  0100               	movlb	0	; () banked
  4460  00018C  5DA5               	subwf	parseInString@j& (0+255),w,b
  4461  00018E  B0D8               	btfsc	status,0,c
  4462  000190  D019               	goto	l4216
  4463                           
  4464                           ; BSR set to: 0
  4465                           ;main.c: 493: {
  4466                           ;main.c: 494: numString[j]='\0';
  4467  000192  0100               	movlb	0	; () banked
  4468  000194  51A5               	movf	parseInString@j& (0+255),w,b
  4469  000196  0D01               	mullw	1
  4470  000198  0100               	movlb	0	; () banked
  4471  00019A  0E60               	movlw	low parseInString@numString
  4472  00019C  24F3               	addwf	prodl,w,c
  4473  00019E  6ED9               	movwf	fsr2l,c
  4474  0001A0  0100               	movlb	0	; () banked
  4475  0001A2  0E00               	movlw	high parseInString@numString
  4476  0001A4  20F4               	addwfc	prodh,w,c
  4477  0001A6  6EDA               	movwf	fsr2h,c
  4478  0001A8  0E00               	movlw	0
  4479  0001AA  6EDF               	movwf	indf2,c
  4480                           
  4481                           ; BSR set to: 0
  4482                           ;main.c: 495: value=atoi(numString);
  4483  0001AC  0100               	movlb	0	; () banked
  4484  0001AE  0E00               	movlw	high parseInString@numString
  4485  0001B0  6E1A               	movwf	atoi@s+1,c
  4486  0001B2  0100               	movlb	0	; () banked
  4487  0001B4  0E60               	movlw	low parseInString@numString
  4488  0001B6  6E19               	movwf	atoi@s,c
  4489  0001B8  ECEA  F006         	call	_atoi	;wreg free
  4490  0001BC  C019  F0A2         	movff	?_atoi,parseInString@value
  4491  0001C0  C01A  F0A3         	movff	?_atoi+1,parseInString@value+1
  4492  0001C4                     l4216:
  4493                           
  4494                           ;main.c: 496: }
  4495                           ;main.c: 498: if ('#'==punctuationChar)
  4496  0001C4  0100               	movlb	0	; () banked
  4497  0001C6  51A0               	movf	parseInString@punctuationChar& (0+255),w,b
  4498  0001C8  0A23               	xorlw	35
  4499  0001CA  A4D8               	btfss	status,2,c
  4500  0001CC  D00B               	goto	l4222
  4501                           
  4502                           ; BSR set to: 0
  4503                           ;main.c: 499: {
  4504                           ;main.c: 500: sensorNumber=value;
  4505  0001CE  C0A2  F047         	movff	parseInString@value,_sensorNumber
  4506  0001D2  C0A3  F048         	movff	parseInString@value+1,_sensorNumber+1
  4507                           
  4508                           ; BSR set to: 0
  4509                           ;main.c: 501: numString[0]='\0';
  4510  0001D6  0E00               	movlw	0
  4511  0001D8  0100               	movlb	0	; () banked
  4512  0001DA  6F60               	movwf	parseInString@numString& (0+255),b
  4513                           
  4514                           ;main.c: 502: punctuationChar=0;
  4515  0001DC  0E00               	movlw	0
  4516  0001DE  0100               	movlb	0	; () banked
  4517  0001E0  6FA0               	movwf	parseInString@punctuationChar& (0+255),b
  4518                           
  4519                           ;main.c: 503: }
  4520  0001E2  D19E               	goto	l4340
  4521  0001E4                     l4222:
  4522                           
  4523                           ; BSR set to: 0
  4524                           ;main.c: 504: else if (1==command)
  4525  0001E4  0100               	movlb	0	; () banked
  4526  0001E6  05A4               	decf	parseInString@command& (0+255),w,b
  4527  0001E8  A4D8               	btfss	status,2,c
  4528  0001EA  D005               	goto	l4226
  4529                           
  4530                           ; BSR set to: 0
  4531                           ;main.c: 505: {
  4532                           ;main.c: 506: potValue=value;
  4533  0001EC  C0A2  F03C         	movff	parseInString@value,_potValue
  4534  0001F0  C0A3  F03D         	movff	parseInString@value+1,_potValue+1
  4535                           
  4536                           ;main.c: 508: }
  4537  0001F4  D195               	goto	l4340
  4538  0001F6                     l4226:
  4539                           
  4540                           ; BSR set to: 0
  4541                           ;main.c: 509: else if (8==command)
  4542  0001F6  0100               	movlb	0	; () banked
  4543  0001F8  51A4               	movf	parseInString@command& (0+255),w,b
  4544  0001FA  0A08               	xorlw	8
  4545  0001FC  A4D8               	btfss	status,2,c
  4546  0001FE  D190               	goto	l4340
  4547                           
  4548                           ; BSR set to: 0
  4549                           ;main.c: 510: {
  4550                           ;main.c: 511: if(k<64)(unsigned char)outBuffer[k]=value;
  4551  000200  0E40               	movlw	64
  4552  000202  0100               	movlb	0	; () banked
  4553  000204  5DA1               	subwf	parseInString@k& (0+255),w,b
  4554  000206  B0D8               	btfsc	status,0,c
  4555  000208  D00E               	goto	l4232
  4556                           
  4557                           ; BSR set to: 0
  4558  00020A  0100               	movlb	0	; () banked
  4559  00020C  51A1               	movf	parseInString@k& (0+255),w,b
  4560  00020E  0D01               	mullw	1
  4561  000210  0101               	movlb	1	; () banked
  4562  000212  0E82               	movlw	low _outBuffer
  4563  000214  24F3               	addwf	prodl,w,c
  4564  000216  6ED9               	movwf	fsr2l,c
  4565  000218  0101               	movlb	1	; () banked
  4566  00021A  0E01               	movlw	high _outBuffer
  4567  00021C  20F4               	addwfc	prodh,w,c
  4568  00021E  6EDA               	movwf	fsr2h,c
  4569  000220  0100               	movlb	0	; () banked
  4570  000222  C0A2  FFDF         	movff	parseInString@value,indf2
  4571  000226                     l4232:
  4572                           
  4573                           ; BSR set to: 0
  4574                           ;main.c: 512: k++;
  4575  000226  0100               	movlb	0	; () banked
  4576  000228  2BA1               	incf	parseInString@k& (0+255),f,b
  4577  00022A  D17A               	goto	l4340
  4578  00022C                     l4234:
  4579                           
  4580                           ;main.c: 520: else if(isalpha(ch))
  4581  00022C  0100               	movlb	0	; () banked
  4582  00022E  51A7               	movf	parseInString@ch& (0+255),w,b
  4583  000230  EC01  F00A         	call	_isalpha
  4584  000234  A0D8               	btfss	status,0,c
  4585  000236  D147               	goto	l4320
  4586                           
  4587                           ;main.c: 521: {
  4588                           ;main.c: 522: j=0;
  4589  000238  0E00               	movlw	0
  4590  00023A  0100               	movlb	0	; () banked
  4591  00023C  6FA5               	movwf	parseInString@j& (0+255),b
  4592  00023E                     l4238:
  4593                           
  4594                           ;main.c: 524: alphaString[j]=ch;
  4595  00023E  0100               	movlb	0	; () banked
  4596  000240  51A5               	movf	parseInString@j& (0+255),w,b
  4597  000242  0D01               	mullw	1
  4598  000244  0100               	movlb	0	; () banked
  4599  000246  0E80               	movlw	low parseInString@alphaString
  4600  000248  24F3               	addwf	prodl,w,c
  4601  00024A  6ED9               	movwf	fsr2l,c
  4602  00024C  0100               	movlb	0	; () banked
  4603  00024E  0E00               	movlw	high parseInString@alphaString
  4604  000250  20F4               	addwfc	prodh,w,c
  4605  000252  6EDA               	movwf	fsr2h,c
  4606  000254  0100               	movlb	0	; () banked
  4607  000256  C0A7  FFDF         	movff	parseInString@ch,indf2
  4608                           
  4609                           ; BSR set to: 0
  4610                           ;main.c: 525: j++;
  4611  00025A  0100               	movlb	0	; () banked
  4612  00025C  2BA5               	incf	parseInString@j& (0+255),f,b
  4613                           
  4614                           ; BSR set to: 0
  4615                           ;main.c: 526: if(j>=32)return(7);
  4616  00025E  0E1F               	movlw	31
  4617  000260  0100               	movlb	0	; () banked
  4618  000262  65A5               	cpfsgt	parseInString@j& (0+255),b
  4619  000264  D001               	goto	l4248
  4620  000266  D156               	goto	u4710
  4621  000268                     l4248:
  4622                           
  4623                           ; BSR set to: 0
  4624                           ;main.c: 527: i++;
  4625  000268  0100               	movlb	0	; () banked
  4626  00026A  2BA6               	incf	parseInString@i& (0+255),f,b
  4627                           
  4628                           ; BSR set to: 0
  4629                           ;main.c: 528: if(i>=64)return(7);
  4630  00026C  0E3F               	movlw	63
  4631  00026E  0100               	movlb	0	; () banked
  4632  000270  65A6               	cpfsgt	parseInString@i& (0+255),b
  4633  000272  D001               	goto	l4256
  4634  000274  D14F               	goto	u4710
  4635  000276                     l4256:
  4636                           
  4637                           ; BSR set to: 0
  4638                           ;main.c: 529: ch=UARTbuffer[i];
  4639  000276  0100               	movlb	0	; () banked
  4640  000278  51A6               	movf	parseInString@i& (0+255),w,b
  4641  00027A  0D01               	mullw	1
  4642  00027C  0101               	movlb	1	; () banked
  4643  00027E  0E00               	movlw	low _UARTbuffer
  4644  000280  24F3               	addwf	prodl,w,c
  4645  000282  6ED9               	movwf	fsr2l,c
  4646  000284  0101               	movlb	1	; () banked
  4647  000286  0E01               	movlw	high _UARTbuffer
  4648  000288  20F4               	addwfc	prodh,w,c
  4649  00028A  6EDA               	movwf	fsr2h,c
  4650  00028C  50DF               	movf	indf2,w,c
  4651  00028E  0100               	movlb	0	; () banked
  4652  000290  6FA7               	movwf	parseInString@ch& (0+255),b
  4653                           
  4654                           ; BSR set to: 0
  4655                           ;main.c: 530: }while((isalpha(ch))||('_'==ch)||(isdigit(ch)));
  4656  000292  0100               	movlb	0	; () banked
  4657  000294  51A7               	movf	parseInString@ch& (0+255),w,b
  4658  000296  EC01  F00A         	call	_isalpha
  4659  00029A  B0D8               	btfsc	status,0,c
  4660  00029C  D7D0               	goto	l4238
  4661  00029E  0100               	movlb	0	; () banked
  4662  0002A0  51A7               	movf	parseInString@ch& (0+255),w,b
  4663  0002A2  0A5F               	xorlw	95
  4664  0002A4  B4D8               	btfsc	status,2,c
  4665  0002A6  D7CB               	goto	l4238
  4666                           
  4667                           ; BSR set to: 0
  4668  0002A8  0100               	movlb	0	; () banked
  4669  0002AA  51A7               	movf	parseInString@ch& (0+255),w,b
  4670  0002AC  EC9F  F00A         	call	_isdigit
  4671  0002B0  B0D8               	btfsc	status,0,c
  4672  0002B2  D7C5               	goto	l4238
  4673                           
  4674                           ;main.c: 532: if(j<32)
  4675  0002B4  0E20               	movlw	32
  4676  0002B6  0100               	movlb	0	; () banked
  4677  0002B8  5DA5               	subwf	parseInString@j& (0+255),w,b
  4678  0002BA  B0D8               	btfsc	status,0,c
  4679  0002BC  D00D               	goto	l4268
  4680                           
  4681                           ; BSR set to: 0
  4682                           ;main.c: 533: {
  4683                           ;main.c: 534: alphaString[j]='\0';
  4684  0002BE  0100               	movlb	0	; () banked
  4685  0002C0  51A5               	movf	parseInString@j& (0+255),w,b
  4686  0002C2  0D01               	mullw	1
  4687  0002C4  0100               	movlb	0	; () banked
  4688  0002C6  0E80               	movlw	low parseInString@alphaString
  4689  0002C8  24F3               	addwf	prodl,w,c
  4690  0002CA  6ED9               	movwf	fsr2l,c
  4691  0002CC  0100               	movlb	0	; () banked
  4692  0002CE  0E00               	movlw	high parseInString@alphaString
  4693  0002D0  20F4               	addwfc	prodh,w,c
  4694  0002D2  6EDA               	movwf	fsr2h,c
  4695  0002D4  0E00               	movlw	0
  4696  0002D6  6EDF               	movwf	indf2,c
  4697  0002D8                     l4268:
  4698                           
  4699                           ; BSR set to: 0
  4700                           ;main.c: 535: }
  4701                           ;main.c: 537: if(0==strcmp("WRITE", alphaString))
  4702  0002D8  0E7F               	movlw	high STR_30
  4703  0002DA  6E14               	movwf	strcmp@s1+1,c
  4704  0002DC  0ECE               	movlw	low STR_30
  4705  0002DE  6E13               	movwf	strcmp@s1,c
  4706  0002E0  0100               	movlb	0	; () banked
  4707  0002E2  0E00               	movlw	high parseInString@alphaString
  4708  0002E4  6E16               	movwf	strcmp@s2+1,c
  4709  0002E6  0100               	movlb	0	; () banked
  4710  0002E8  0E80               	movlw	low parseInString@alphaString
  4711  0002EA  6E15               	movwf	strcmp@s2,c
  4712  0002EC  ECC5  F008         	call	_strcmp	;wreg free
  4713  0002F0  5014               	movf	?_strcmp+1,w,c
  4714  0002F2  1013               	iorwf	?_strcmp,w,c
  4715  0002F4  A4D8               	btfss	status,2,c
  4716  0002F6  D002               	goto	l4272
  4717                           
  4718                           ;main.c: 538: command=1;
  4719  0002F8  0E01               	movlw	1
  4720  0002FA  D0CA               	goto	L21
  4721  0002FC                     l4272:
  4722                           
  4723                           ;main.c: 539: else if(0==strcmp("COM", alphaString))
  4724  0002FC  0E7F               	movlw	high STR_31
  4725  0002FE  6E14               	movwf	strcmp@s1+1,c
  4726  000300  0EF6               	movlw	low STR_31
  4727  000302  6E13               	movwf	strcmp@s1,c
  4728  000304  0100               	movlb	0	; () banked
  4729  000306  0E00               	movlw	high parseInString@alphaString
  4730  000308  6E16               	movwf	strcmp@s2+1,c
  4731  00030A  0100               	movlb	0	; () banked
  4732  00030C  0E80               	movlw	low parseInString@alphaString
  4733  00030E  6E15               	movwf	strcmp@s2,c
  4734  000310  ECC5  F008         	call	_strcmp	;wreg free
  4735  000314  5014               	movf	?_strcmp+1,w,c
  4736  000316  1013               	iorwf	?_strcmp,w,c
  4737  000318  A4D8               	btfss	status,2,c
  4738  00031A  D002               	goto	l4276
  4739                           
  4740                           ;main.c: 540: command=6;
  4741  00031C  0E06               	movlw	6
  4742  00031E  D0B8               	goto	L21
  4743  000320                     l4276:
  4744                           
  4745                           ;main.c: 541: else if(0==strcmp("READ", alphaString))
  4746  000320  0E7F               	movlw	high STR_32
  4747  000322  6E14               	movwf	strcmp@s1+1,c
  4748  000324  0EDE               	movlw	low STR_32
  4749  000326  6E13               	movwf	strcmp@s1,c
  4750  000328  0100               	movlb	0	; () banked
  4751  00032A  0E00               	movlw	high parseInString@alphaString
  4752  00032C  6E16               	movwf	strcmp@s2+1,c
  4753  00032E  0100               	movlb	0	; () banked
  4754  000330  0E80               	movlw	low parseInString@alphaString
  4755  000332  6E15               	movwf	strcmp@s2,c
  4756  000334  ECC5  F008         	call	_strcmp	;wreg free
  4757  000338  5014               	movf	?_strcmp+1,w,c
  4758  00033A  1013               	iorwf	?_strcmp,w,c
  4759  00033C  A4D8               	btfss	status,2,c
  4760  00033E  D002               	goto	l4280
  4761                           
  4762                           ;main.c: 542: command=2;
  4763  000340  0E02               	movlw	2
  4764  000342  D0A6               	goto	L21
  4765  000344                     l4280:
  4766                           
  4767                           ;main.c: 543: else if(0==strcmp("PROG", alphaString))
  4768  000344  0E7F               	movlw	high STR_33
  4769  000346  6E14               	movwf	strcmp@s1+1,c
  4770  000348  0EE3               	movlw	low STR_33
  4771  00034A  6E13               	movwf	strcmp@s1,c
  4772  00034C  0100               	movlb	0	; () banked
  4773  00034E  0E00               	movlw	high parseInString@alphaString
  4774  000350  6E16               	movwf	strcmp@s2+1,c
  4775  000352  0100               	movlb	0	; () banked
  4776  000354  0E80               	movlw	low parseInString@alphaString
  4777  000356  6E15               	movwf	strcmp@s2,c
  4778  000358  ECC5  F008         	call	_strcmp	;wreg free
  4779  00035C  5014               	movf	?_strcmp+1,w,c
  4780  00035E  1013               	iorwf	?_strcmp,w,c
  4781  000360  A4D8               	btfss	status,2,c
  4782  000362  D002               	goto	l4284
  4783                           
  4784                           ;main.c: 544: command=3;
  4785  000364  0E03               	movlw	3
  4786  000366  D094               	goto	L21
  4787  000368                     l4284:
  4788                           
  4789                           ;main.c: 545: else if(0==strcmp("POT1", alphaString))
  4790  000368  0E7F               	movlw	high STR_34
  4791  00036A  6E14               	movwf	strcmp@s1+1,c
  4792  00036C  0ED4               	movlw	low STR_34
  4793  00036E  6E13               	movwf	strcmp@s1,c
  4794  000370  0100               	movlb	0	; () banked
  4795  000372  0E00               	movlw	high parseInString@alphaString
  4796  000374  6E16               	movwf	strcmp@s2+1,c
  4797  000376  0100               	movlb	0	; () banked
  4798  000378  0E80               	movlw	low parseInString@alphaString
  4799  00037A  6E15               	movwf	strcmp@s2,c
  4800  00037C  ECC5  F008         	call	_strcmp	;wreg free
  4801  000380  5014               	movf	?_strcmp+1,w,c
  4802  000382  1013               	iorwf	?_strcmp,w,c
  4803  000384  A4D8               	btfss	status,2,c
  4804  000386  D004               	goto	l4288
  4805                           
  4806                           ;main.c: 546: potSelect=1;
  4807  000388  0E00               	movlw	0
  4808  00038A  6E46               	movwf	_potSelect+1,c
  4809  00038C  0E01               	movlw	1
  4810  00038E  D013               	goto	L16
  4811  000390                     l4288:
  4812                           
  4813                           ;main.c: 547: else if(0==strcmp("POT2", alphaString))
  4814  000390  0E7F               	movlw	high STR_35
  4815  000392  6E14               	movwf	strcmp@s1+1,c
  4816  000394  0ED9               	movlw	low STR_35
  4817  000396  6E13               	movwf	strcmp@s1,c
  4818  000398  0100               	movlb	0	; () banked
  4819  00039A  0E00               	movlw	high parseInString@alphaString
  4820  00039C  6E16               	movwf	strcmp@s2+1,c
  4821  00039E  0100               	movlb	0	; () banked
  4822  0003A0  0E80               	movlw	low parseInString@alphaString
  4823  0003A2  6E15               	movwf	strcmp@s2,c
  4824  0003A4  ECC5  F008         	call	_strcmp	;wreg free
  4825  0003A8  5014               	movf	?_strcmp+1,w,c
  4826  0003AA  1013               	iorwf	?_strcmp,w,c
  4827  0003AC  A4D8               	btfss	status,2,c
  4828  0003AE  D005               	goto	l4292
  4829                           
  4830                           ;main.c: 548: potSelect=2;
  4831  0003B0  0E00               	movlw	0
  4832  0003B2  6E46               	movwf	_potSelect+1,c
  4833  0003B4  0E02               	movlw	2
  4834  0003B6                     L16:
  4835  0003B6  6E45               	movwf	_potSelect,c
  4836  0003B8  D0B3               	goto	l4340
  4837  0003BA                     l4292:
  4838                           
  4839                           ;main.c: 549: else if(0==strcmp("OTP", alphaString))
  4840  0003BA  0E7F               	movlw	high STR_36
  4841  0003BC  6E14               	movwf	strcmp@s1+1,c
  4842  0003BE  0EFA               	movlw	low STR_36
  4843  0003C0  6E13               	movwf	strcmp@s1,c
  4844  0003C2  0100               	movlb	0	; () banked
  4845  0003C4  0E00               	movlw	high parseInString@alphaString
  4846  0003C6  6E16               	movwf	strcmp@s2+1,c
  4847  0003C8  0100               	movlb	0	; () banked
  4848  0003CA  0E80               	movlw	low parseInString@alphaString
  4849  0003CC  6E15               	movwf	strcmp@s2,c
  4850  0003CE  ECC5  F008         	call	_strcmp	;wreg free
  4851  0003D2  5014               	movf	?_strcmp+1,w,c
  4852  0003D4  1013               	iorwf	?_strcmp,w,c
  4853  0003D6  A4D8               	btfss	status,2,c
  4854  0003D8  D002               	goto	l4296
  4855                           
  4856                           ;main.c: 550: command=4;
  4857  0003DA  0E04               	movlw	4
  4858  0003DC  D059               	goto	L21
  4859  0003DE                     l4296:
  4860                           
  4861                           ;main.c: 551: else if(0==strcmp("NORM", alphaString))
  4862  0003DE  0E7F               	movlw	high STR_37
  4863  0003E0  6E14               	movwf	strcmp@s1+1,c
  4864  0003E2  0EE8               	movlw	low STR_37
  4865  0003E4  6E13               	movwf	strcmp@s1,c
  4866  0003E6  0100               	movlb	0	; () banked
  4867  0003E8  0E00               	movlw	high parseInString@alphaString
  4868  0003EA  6E16               	movwf	strcmp@s2+1,c
  4869  0003EC  0100               	movlb	0	; () banked
  4870  0003EE  0E80               	movlw	low parseInString@alphaString
  4871  0003F0  6E15               	movwf	strcmp@s2,c
  4872  0003F2  ECC5  F008         	call	_strcmp	;wreg free
  4873  0003F6  5014               	movf	?_strcmp+1,w,c
  4874  0003F8  1013               	iorwf	?_strcmp,w,c
  4875  0003FA  A4D8               	btfss	status,2,c
  4876  0003FC  D002               	goto	l4300
  4877                           
  4878                           ;main.c: 552: command=5;
  4879  0003FE  0E05               	movlw	5
  4880  000400  D047               	goto	L21
  4881  000402                     l4300:
  4882                           
  4883                           ;main.c: 553: else if(0==strcmp("OFF", alphaString))
  4884  000402  0E7F               	movlw	high (STR_40+11)
  4885  000404  6E14               	movwf	strcmp@s1+1,c
  4886  000406  0E8D               	movlw	low (STR_40+11)
  4887  000408  6E13               	movwf	strcmp@s1,c
  4888  00040A  0100               	movlb	0	; () banked
  4889  00040C  0E00               	movlw	high parseInString@alphaString
  4890  00040E  6E16               	movwf	strcmp@s2+1,c
  4891  000410  0100               	movlb	0	; () banked
  4892  000412  0E80               	movlw	low parseInString@alphaString
  4893  000414  6E15               	movwf	strcmp@s2,c
  4894  000416  ECC5  F008         	call	_strcmp	;wreg free
  4895  00041A  5014               	movf	?_strcmp+1,w,c
  4896  00041C  1013               	iorwf	?_strcmp,w,c
  4897  00041E  A4D8               	btfss	status,2,c
  4898  000420  D002               	goto	l4304
  4899                           
  4900                           ;main.c: 554: command=9;
  4901  000422  0E09               	movlw	9
  4902  000424  D035               	goto	L21
  4903  000426                     l4304:
  4904                           
  4905                           ;main.c: 555: else if (0==strcmp("I2C", alphaString))
  4906  000426  0E7F               	movlw	high STR_39
  4907  000428  6E14               	movwf	strcmp@s1+1,c
  4908  00042A  0EF2               	movlw	low STR_39
  4909  00042C  6E13               	movwf	strcmp@s1,c
  4910  00042E  0100               	movlb	0	; () banked
  4911  000430  0E00               	movlw	high parseInString@alphaString
  4912  000432  6E16               	movwf	strcmp@s2+1,c
  4913  000434  0100               	movlb	0	; () banked
  4914  000436  0E80               	movlw	low parseInString@alphaString
  4915  000438  6E15               	movwf	strcmp@s2,c
  4916  00043A  ECC5  F008         	call	_strcmp	;wreg free
  4917  00043E  5014               	movf	?_strcmp+1,w,c
  4918  000440  1013               	iorwf	?_strcmp,w,c
  4919  000442  A4D8               	btfss	status,2,c
  4920  000444  D002               	goto	l4308
  4921                           
  4922                           ;main.c: 556: command=10;
  4923  000446  0E0A               	movlw	10
  4924  000448  D023               	goto	L21
  4925  00044A                     l4308:
  4926                           
  4927                           ;main.c: 557: else if(0==strcmp("COMPRESSOR_OFF", alphaString))
  4928  00044A  0E7F               	movlw	high STR_40
  4929  00044C  6E14               	movwf	strcmp@s1+1,c
  4930  00044E  0E82               	movlw	low STR_40
  4931  000450  6E13               	movwf	strcmp@s1,c
  4932  000452  0100               	movlb	0	; () banked
  4933  000454  0E00               	movlw	high parseInString@alphaString
  4934  000456  6E16               	movwf	strcmp@s2+1,c
  4935  000458  0100               	movlb	0	; () banked
  4936  00045A  0E80               	movlw	low parseInString@alphaString
  4937  00045C  6E15               	movwf	strcmp@s2,c
  4938  00045E  ECC5  F008         	call	_strcmp	;wreg free
  4939  000462  5014               	movf	?_strcmp+1,w,c
  4940  000464  1013               	iorwf	?_strcmp,w,c
  4941  000466  A4D8               	btfss	status,2,c
  4942  000468  D002               	goto	l4312
  4943                           
  4944                           ;main.c: 558: command=12;
  4945  00046A  0E0C               	movlw	12
  4946  00046C  D011               	goto	L21
  4947  00046E                     l4312:
  4948                           
  4949                           ;main.c: 559: else if(0==strcmp("COMPRESSOR_ON", alphaString))
  4950  00046E  0E7F               	movlw	high STR_41
  4951  000470  6E14               	movwf	strcmp@s1+1,c
  4952  000472  0E91               	movlw	low STR_41
  4953  000474  6E13               	movwf	strcmp@s1,c
  4954  000476  0100               	movlb	0	; () banked
  4955  000478  0E00               	movlw	high parseInString@alphaString
  4956  00047A  6E16               	movwf	strcmp@s2+1,c
  4957  00047C  0100               	movlb	0	; () banked
  4958  00047E  0E80               	movlw	low parseInString@alphaString
  4959  000480  6E15               	movwf	strcmp@s2,c
  4960  000482  ECC5  F008         	call	_strcmp	;wreg free
  4961  000486  5014               	movf	?_strcmp+1,w,c
  4962  000488  1013               	iorwf	?_strcmp,w,c
  4963  00048A  A4D8               	btfss	status,2,c
  4964  00048C  D004               	goto	l4316
  4965                           
  4966                           ;main.c: 560: command=11;
  4967  00048E  0E0B               	movlw	11
  4968  000490                     L21:
  4969  000490  0100               	movlb	0	; () banked
  4970  000492  6FA4               	movwf	parseInString@command& (0+255),b
  4971  000494  D045               	goto	l4340
  4972  000496                     l4316:
  4973                           
  4974                           ;main.c: 561: else if(0==strcmp("LEDS", alphaString))
  4975  000496  0E7F               	movlw	high STR_42
  4976  000498  6E14               	movwf	strcmp@s1+1,c
  4977  00049A  0EED               	movlw	low STR_42
  4978  00049C  6E13               	movwf	strcmp@s1,c
  4979  00049E  0100               	movlb	0	; () banked
  4980  0004A0  0E00               	movlw	high parseInString@alphaString
  4981  0004A2  6E16               	movwf	strcmp@s2+1,c
  4982  0004A4  0100               	movlb	0	; () banked
  4983  0004A6  0E80               	movlw	low parseInString@alphaString
  4984  0004A8  6E15               	movwf	strcmp@s2,c
  4985  0004AA  ECC5  F008         	call	_strcmp	;wreg free
  4986  0004AE  5014               	movf	?_strcmp+1,w,c
  4987  0004B0  1013               	iorwf	?_strcmp,w,c
  4988  0004B2  A4D8               	btfss	status,2,c
  4989  0004B4  D035               	goto	l4340
  4990                           
  4991                           ;main.c: 562: {
  4992                           ;main.c: 563: command=8;
  4993  0004B6  0E08               	movlw	8
  4994  0004B8  0100               	movlb	0	; () banked
  4995  0004BA  6FA4               	movwf	parseInString@command& (0+255),b
  4996                           
  4997                           ;main.c: 564: sensorNumber=0;
  4998  0004BC  0E00               	movlw	0
  4999  0004BE  6E48               	movwf	_sensorNumber+1,c
  5000  0004C0  0E00               	movlw	0
  5001  0004C2  6E47               	movwf	_sensorNumber,c
  5002  0004C4  D02D               	goto	l4340
  5003  0004C6                     l4320:
  5004                           
  5005                           ;main.c: 567: else if (ispunct(ch))
  5006  0004C6  0100               	movlb	0	; () banked
  5007  0004C8  51A7               	movf	parseInString@ch& (0+255),w,b
  5008  0004CA  EC72  F009         	call	_ispunct
  5009  0004CE  A0D8               	btfss	status,0,c
  5010  0004D0  D023               	goto	l4338
  5011                           
  5012                           ;main.c: 568: {
  5013                           ;main.c: 569: punctuationChar=ch;
  5014  0004D2  C0A7  F0A0         	movff	parseInString@ch,parseInString@punctuationChar
  5015                           
  5016                           ;main.c: 570: if('#'==ch)
  5017  0004D6  0100               	movlb	0	; () banked
  5018  0004D8  51A7               	movf	parseInString@ch& (0+255),w,b
  5019  0004DA  0A23               	xorlw	35
  5020  0004DC  A4D8               	btfss	status,2,c
  5021  0004DE  D020               	goto	l4340
  5022                           
  5023                           ; BSR set to: 0
  5024                           ;main.c: 571: {
  5025                           ;main.c: 572: i++;
  5026  0004E0  0100               	movlb	0	; () banked
  5027  0004E2  2BA6               	incf	parseInString@i& (0+255),f,b
  5028                           
  5029                           ; BSR set to: 0
  5030                           ;main.c: 575: if(i<64) ch=UARTbuffer[i];
  5031  0004E4  0E40               	movlw	64
  5032  0004E6  0100               	movlb	0	; () banked
  5033  0004E8  5DA6               	subwf	parseInString@i& (0+255),w,b
  5034  0004EA  B0D8               	btfsc	status,0,c
  5035  0004EC  D00E               	goto	l4332
  5036                           
  5037                           ; BSR set to: 0
  5038  0004EE  0100               	movlb	0	; () banked
  5039  0004F0  51A6               	movf	parseInString@i& (0+255),w,b
  5040  0004F2  0D01               	mullw	1
  5041  0004F4  0101               	movlb	1	; () banked
  5042  0004F6  0E00               	movlw	low _UARTbuffer
  5043  0004F8  24F3               	addwf	prodl,w,c
  5044  0004FA  6ED9               	movwf	fsr2l,c
  5045  0004FC  0101               	movlb	1	; () banked
  5046  0004FE  0E01               	movlw	high _UARTbuffer
  5047  000500  20F4               	addwfc	prodh,w,c
  5048  000502  6EDA               	movwf	fsr2h,c
  5049  000504  50DF               	movf	indf2,w,c
  5050  000506  0100               	movlb	0	; () banked
  5051  000508  6FA7               	movwf	parseInString@ch& (0+255),b
  5052  00050A                     l4332:
  5053                           
  5054                           ; BSR set to: 0
  5055                           ;main.c: 576: if('S'!=ch) return(7);
  5056  00050A  0100               	movlb	0	; () banked
  5057  00050C  51A7               	movf	parseInString@ch& (0+255),w,b
  5058  00050E  0A53               	xorlw	83
  5059  000510  B4D8               	btfsc	status,2,c
  5060  000512  D006               	goto	l4340
  5061  000514                     u4710:
  5062                           
  5063                           ; BSR set to: 0
  5064  000514  0E07               	movlw	7
  5065  000516  D012               	goto	l267
  5066  000518                     l4338:
  5067                           
  5068                           ;main.c: 579: else if (isspace(ch))
  5069  000518  0100               	movlb	0	; () banked
  5070  00051A  51A7               	movf	parseInString@ch& (0+255),w,b
  5071  00051C  EC17  F00A         	call	_isspace
  5072  000520                     l4340:
  5073                           
  5074                           ;main.c: 582: }
  5075                           ;main.c: 583: i++;
  5076  000520  0100               	movlb	0	; () banked
  5077  000522  2BA6               	incf	parseInString@i& (0+255),f,b
  5078                           
  5079                           ; BSR set to: 0
  5080                           ;main.c: 584: }while((i<64)&&('\r'!=ch));
  5081  000524  0E40               	movlw	64
  5082  000526  0100               	movlb	0	; () banked
  5083  000528  5DA6               	subwf	parseInString@i& (0+255),w,b
  5084  00052A  B0D8               	btfsc	status,0,c
  5085  00052C  D005               	goto	l4346
  5086                           
  5087                           ; BSR set to: 0
  5088  00052E  0100               	movlb	0	; () banked
  5089  000530  51A7               	movf	parseInString@ch& (0+255),w,b
  5090  000532  0A0D               	xorlw	13
  5091  000534  A4D8               	btfss	status,2,c
  5092  000536  D5DC               	goto	l4176
  5093  000538                     l4346:
  5094                           
  5095                           ; BSR set to: 0
  5096                           ;main.c: 586: return(command);
  5097  000538  0100               	movlb	0	; () banked
  5098  00053A  51A4               	movf	parseInString@command& (0+255),w,b
  5099  00053C                     l267:
  5100  00053C  0012               	return	
  5101  00053E                     __end_of_parseInString:
  5102                           	opt stack 0
  5103                           tblptru	equ	0xFF8
  5104                           tblptrh	equ	0xFF7
  5105                           tblptrl	equ	0xFF6
  5106                           tablat	equ	0xFF5
  5107                           prodh	equ	0xFF4
  5108                           prodl	equ	0xFF3
  5109                           intcon	equ	0xFF2
  5110                           postinc0	equ	0xFEE
  5111                           wreg	equ	0xFE8
  5112                           postinc1	equ	0xFE6
  5113                           postdec1	equ	0xFE5
  5114                           fsr1l	equ	0xFE1
  5115                           indf2	equ	0xFDF
  5116                           postinc2	equ	0xFDE
  5117                           postdec2	equ	0xFDD
  5118                           fsr2h	equ	0xFDA
  5119                           fsr2l	equ	0xFD9
  5120                           status	equ	0xFD8
  5121                           
  5122 ;; *************** function _strcmp *****************
  5123 ;; Defined at:
  5124 ;;		line 33 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\strcmp.c"
  5125 ;; Parameters:    Size  Location     Type
  5126 ;;  s1              2   18[COMRAM] PTR const unsigned char 
  5127 ;;		 -> STR_42(5), STR_41(14), STR_40(15), STR_39(4), 
  5128 ;;		 -> STR_38(4), STR_37(5), STR_36(4), STR_35(5), 
  5129 ;;		 -> STR_34(5), STR_33(5), STR_32(5), STR_31(4), 
  5130 ;;		 -> STR_30(6), 
  5131 ;;  s2              2   20[COMRAM] PTR const unsigned char 
  5132 ;;		 -> parseInString@alphaString(32), 
  5133 ;; Auto vars:     Size  Location     Type
  5134 ;;  r               1   23[COMRAM] char 
  5135 ;; Return value:  Size  Location     Type
  5136 ;;                  2   18[COMRAM] int 
  5137 ;; Registers used:
  5138 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  5139 ;; Tracked objects:
  5140 ;;		On entry : 0/0
  5141 ;;		On exit  : 0/0
  5142 ;;		Unchanged: 0/0
  5143 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5144 ;;      Params:         4       0       0       0       0       0       0       0       0
  5145 ;;      Locals:         1       0       0       0       0       0       0       0       0
  5146 ;;      Temps:          1       0       0       0       0       0       0       0       0
  5147 ;;      Totals:         6       0       0       0       0       0       0       0       0
  5148 ;;Total ram usage:        6 bytes
  5149 ;; Hardware stack levels used:    1
  5150 ;; Hardware stack levels required when called:    2
  5151 ;; This function calls:
  5152 ;;		Nothing
  5153 ;; This function is called by:
  5154 ;;		_parseInString
  5155 ;; This function uses a non-reentrant model
  5156 ;;
  5157                           
  5158                           	psect	text14
  5159  00118A                     __ptext14:
  5160                           	opt stack 0
  5161  00118A                     _strcmp:
  5162                           	opt stack 27
  5163                           
  5164                           ;incstack = 0
  5165  00118A  D004               	goto	l3818
  5166  00118C                     l3816:
  5167  00118C  4A13               	infsnz	strcmp@s1,f,c
  5168  00118E  2A14               	incf	strcmp@s1+1,f,c
  5169  001190  4A15               	infsnz	strcmp@s2,f,c
  5170  001192  2A16               	incf	strcmp@s2+1,f,c
  5171  001194                     l3818:
  5172  001194  C013  FFF6         	movff	strcmp@s1,tblptrl
  5173  001198  C014  FFF7         	movff	strcmp@s1+1,tblptrh
  5174  00119C                     	if	0	;tblptru may be non-zero
  5175  00119C                     	endif
  5176  00119C                     	if	0	;tblptru may be non-zero
  5177  00119C                     	endif
  5178  00119C  0008               	tblrd		*
  5179  00119E  CFF5 F017          	movff	tablat,??_strcmp
  5180  0011A2  C015  FFD9         	movff	strcmp@s2,fsr2l
  5181  0011A6  C016  FFDA         	movff	strcmp@s2+1,fsr2h
  5182  0011AA  50DF               	movf	indf2,w,c
  5183  0011AC  0800               	sublw	0
  5184  0011AE  2417               	addwf	??_strcmp,w,c
  5185  0011B0  6E18               	movwf	strcmp@r,c
  5186  0011B2  6618               	tstfsz	strcmp@r& (0+255),c
  5187  0011B4  D009               	goto	l3822
  5188  0011B6  C013  FFF6         	movff	strcmp@s1,tblptrl
  5189  0011BA  C014  FFF7         	movff	strcmp@s1+1,tblptrh
  5190  0011BE                     	if	0	;tblptru may be non-zero
  5191  0011BE                     	endif
  5192  0011BE                     	if	0	;tblptru may be non-zero
  5193  0011BE                     	endif
  5194  0011BE  0008               	tblrd		*
  5195  0011C0  50F5               	movf	tablat,w,c
  5196  0011C2  0900               	iorlw	0
  5197  0011C4  A4D8               	btfss	status,2,c
  5198  0011C6  D7E2               	goto	l3816
  5199  0011C8                     l3822:
  5200  0011C8  5018               	movf	strcmp@r,w,c
  5201  0011CA  6E13               	movwf	?_strcmp,c
  5202  0011CC  6A14               	clrf	?_strcmp+1,c
  5203  0011CE  BE13               	btfsc	?_strcmp,7,c
  5204  0011D0  0614               	decf	?_strcmp+1,f,c
  5205  0011D2  0012               	return	
  5206  0011D4                     __end_of_strcmp:
  5207                           	opt stack 0
  5208                           tblptru	equ	0xFF8
  5209                           tblptrh	equ	0xFF7
  5210                           tblptrl	equ	0xFF6
  5211                           tablat	equ	0xFF5
  5212                           prodh	equ	0xFF4
  5213                           prodl	equ	0xFF3
  5214                           intcon	equ	0xFF2
  5215                           postinc0	equ	0xFEE
  5216                           wreg	equ	0xFE8
  5217                           postinc1	equ	0xFE6
  5218                           postdec1	equ	0xFE5
  5219                           fsr1l	equ	0xFE1
  5220                           indf2	equ	0xFDF
  5221                           postinc2	equ	0xFDE
  5222                           postdec2	equ	0xFDD
  5223                           fsr2h	equ	0xFDA
  5224                           fsr2l	equ	0xFD9
  5225                           status	equ	0xFD8
  5226                           
  5227 ;; *************** function _isspace *****************
  5228 ;; Defined at:
  5229 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\isspace.c"
  5230 ;; Parameters:    Size  Location     Type
  5231 ;;  c               1    wreg     unsigned char 
  5232 ;; Auto vars:     Size  Location     Type
  5233 ;;  c               1   20[COMRAM] unsigned char 
  5234 ;; Return value:  Size  Location     Type
  5235 ;;		None               void
  5236 ;; Registers used:
  5237 ;;		wreg, status,2, status,0
  5238 ;; Tracked objects:
  5239 ;;		On entry : 0/0
  5240 ;;		On exit  : 0/0
  5241 ;;		Unchanged: 0/0
  5242 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5243 ;;      Params:         0       0       0       0       0       0       0       0       0
  5244 ;;      Locals:         2       0       0       0       0       0       0       0       0
  5245 ;;      Temps:          1       0       0       0       0       0       0       0       0
  5246 ;;      Totals:         3       0       0       0       0       0       0       0       0
  5247 ;;Total ram usage:        3 bytes
  5248 ;; Hardware stack levels used:    1
  5249 ;; Hardware stack levels required when called:    2
  5250 ;; This function calls:
  5251 ;;		Nothing
  5252 ;; This function is called by:
  5253 ;;		_parseInString
  5254 ;; This function uses a non-reentrant model
  5255 ;;
  5256                           
  5257                           	psect	text15
  5258  00142E                     __ptext15:
  5259                           	opt stack 0
  5260  00142E                     _isspace:
  5261                           	opt stack 27
  5262                           
  5263                           ;incstack = 0
  5264                           ;isspace@c stored from wreg
  5265  00142E  6E15               	movwf	isspace@c,c
  5266  001430  0E01               	movlw	1
  5267  001432  6E14               	movwf	_isspace$1215,c
  5268  001434  5015               	movf	isspace@c,w,c
  5269  001436  0A20               	xorlw	32
  5270  001438  B4D8               	btfsc	status,2,c
  5271  00143A  D00A               	goto	l3860
  5272  00143C  0E0E               	movlw	14
  5273  00143E  5C15               	subwf	isspace@c,w,c
  5274  001440  B0D8               	btfsc	status,0,c
  5275  001442  D004               	goto	l3858
  5276  001444  0E09               	movlw	9
  5277  001446  5C15               	subwf	isspace@c,w,c
  5278  001448  B0D8               	btfsc	status,0,c
  5279  00144A  D002               	goto	l3860
  5280  00144C                     l3858:
  5281  00144C  0E00               	movlw	0
  5282  00144E  6E14               	movwf	_isspace$1215,c
  5283  001450                     l3860:
  5284  001450  C014  F013         	movff	_isspace$1215,??_isspace
  5285  001454  3013               	rrcf	??_isspace,w,c
  5286  001456  0012               	return	
  5287  001458                     __end_of_isspace:
  5288                           	opt stack 0
  5289                           tblptru	equ	0xFF8
  5290                           tblptrh	equ	0xFF7
  5291                           tblptrl	equ	0xFF6
  5292                           tablat	equ	0xFF5
  5293                           prodh	equ	0xFF4
  5294                           prodl	equ	0xFF3
  5295                           intcon	equ	0xFF2
  5296                           postinc0	equ	0xFEE
  5297                           wreg	equ	0xFE8
  5298                           postinc1	equ	0xFE6
  5299                           postdec1	equ	0xFE5
  5300                           fsr1l	equ	0xFE1
  5301                           indf2	equ	0xFDF
  5302                           postinc2	equ	0xFDE
  5303                           postdec2	equ	0xFDD
  5304                           fsr2h	equ	0xFDA
  5305                           fsr2l	equ	0xFD9
  5306                           status	equ	0xFD8
  5307                           
  5308 ;; *************** function _ispunct *****************
  5309 ;; Defined at:
  5310 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\ispunct.c"
  5311 ;; Parameters:    Size  Location     Type
  5312 ;;  c               1    wreg     unsigned char 
  5313 ;; Auto vars:     Size  Location     Type
  5314 ;;  c               1   18[COMRAM] unsigned char 
  5315 ;; Return value:  Size  Location     Type
  5316 ;;		None               void
  5317 ;; Registers used:
  5318 ;;		wreg, status,2, status,0
  5319 ;; Tracked objects:
  5320 ;;		On entry : 0/0
  5321 ;;		On exit  : 0/0
  5322 ;;		Unchanged: 0/0
  5323 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5324 ;;      Params:         0       0       0       0       0       0       0       0       0
  5325 ;;      Locals:         1       0       0       0       0       0       0       0       0
  5326 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5327 ;;      Totals:         1       0       0       0       0       0       0       0       0
  5328 ;;Total ram usage:        1 bytes
  5329 ;; Hardware stack levels used:    1
  5330 ;; Hardware stack levels required when called:    2
  5331 ;; This function calls:
  5332 ;;		Nothing
  5333 ;; This function is called by:
  5334 ;;		_parseInString
  5335 ;; This function uses a non-reentrant model
  5336 ;;
  5337                           
  5338                           	psect	text16
  5339  0012E4                     __ptext16:
  5340                           	opt stack 0
  5341  0012E4                     _ispunct:
  5342                           	opt stack 27
  5343                           
  5344                           ;incstack = 0
  5345                           ;ispunct@c stored from wreg
  5346  0012E4  6E13               	movwf	ispunct@c,c
  5347  0012E6  0E20               	movlw	32
  5348  0012E8  6413               	cpfsgt	ispunct@c,c
  5349  0012EA  D003               	goto	l3830
  5350  0012EC  0E2F               	movlw	47
  5351  0012EE  6413               	cpfsgt	ispunct@c,c
  5352  0012F0  D013               	goto	l3842
  5353  0012F2                     l3830:
  5354  0012F2  0E39               	movlw	57
  5355  0012F4  6413               	cpfsgt	ispunct@c,c
  5356  0012F6  D003               	goto	l3834
  5357  0012F8  0E40               	movlw	64
  5358  0012FA  6413               	cpfsgt	ispunct@c,c
  5359  0012FC  D00D               	goto	l3842
  5360  0012FE                     l3834:
  5361  0012FE  0E5A               	movlw	90
  5362  001300  6413               	cpfsgt	ispunct@c,c
  5363  001302  D003               	goto	l3838
  5364  001304  0E60               	movlw	96
  5365  001306  6413               	cpfsgt	ispunct@c,c
  5366  001308  D007               	goto	l3842
  5367  00130A                     l3838:
  5368  00130A  0E7A               	movlw	122
  5369  00130C  6413               	cpfsgt	ispunct@c,c
  5370  00130E  D006               	goto	l3846
  5371  001310  0E7F               	movlw	127
  5372  001312  5C13               	subwf	ispunct@c,w,c
  5373  001314  B0D8               	btfsc	status,0,c
  5374  001316  D002               	goto	l3846
  5375  001318                     l3842:
  5376  001318  80D8               	bsf	status,0,c
  5377  00131A  D001               	goto	l1035
  5378  00131C                     l3846:
  5379  00131C  90D8               	bcf	status,0,c
  5380  00131E                     l1035:
  5381  00131E  0012               	return	
  5382  001320                     __end_of_ispunct:
  5383                           	opt stack 0
  5384                           tblptru	equ	0xFF8
  5385                           tblptrh	equ	0xFF7
  5386                           tblptrl	equ	0xFF6
  5387                           tablat	equ	0xFF5
  5388                           prodh	equ	0xFF4
  5389                           prodl	equ	0xFF3
  5390                           intcon	equ	0xFF2
  5391                           postinc0	equ	0xFEE
  5392                           wreg	equ	0xFE8
  5393                           postinc1	equ	0xFE6
  5394                           postdec1	equ	0xFE5
  5395                           fsr1l	equ	0xFE1
  5396                           indf2	equ	0xFDF
  5397                           postinc2	equ	0xFDE
  5398                           postdec2	equ	0xFDD
  5399                           fsr2h	equ	0xFDA
  5400                           fsr2l	equ	0xFD9
  5401                           status	equ	0xFD8
  5402                           
  5403 ;; *************** function _isalpha *****************
  5404 ;; Defined at:
  5405 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\isalpha.c"
  5406 ;; Parameters:    Size  Location     Type
  5407 ;;  c               1    wreg     unsigned char 
  5408 ;; Auto vars:     Size  Location     Type
  5409 ;;  c               1   23[COMRAM] unsigned char 
  5410 ;; Return value:  Size  Location     Type
  5411 ;;		None               void
  5412 ;; Registers used:
  5413 ;;		wreg, status,2, status,0, cstack
  5414 ;; Tracked objects:
  5415 ;;		On entry : 0/0
  5416 ;;		On exit  : 0/0
  5417 ;;		Unchanged: 0/0
  5418 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5419 ;;      Params:         0       0       0       0       0       0       0       0       0
  5420 ;;      Locals:         2       0       0       0       0       0       0       0       0
  5421 ;;      Temps:          1       0       0       0       0       0       0       0       0
  5422 ;;      Totals:         3       0       0       0       0       0       0       0       0
  5423 ;;Total ram usage:        3 bytes
  5424 ;; Hardware stack levels used:    1
  5425 ;; Hardware stack levels required when called:    3
  5426 ;; This function calls:
  5427 ;;		_isupper
  5428 ;; This function is called by:
  5429 ;;		_parseInString
  5430 ;; This function uses a non-reentrant model
  5431 ;;
  5432                           
  5433                           	psect	text17
  5434  001402                     __ptext17:
  5435                           	opt stack 0
  5436  001402                     _isalpha:
  5437                           	opt stack 26
  5438                           
  5439                           ;incstack = 0
  5440                           ;isalpha@c stored from wreg
  5441  001402  6E18               	movwf	isalpha@c,c
  5442  001404  0E01               	movlw	1
  5443  001406  6E17               	movwf	_isalpha$1207,c
  5444  001408  0E7B               	movlw	123
  5445  00140A  5C18               	subwf	isalpha@c,w,c
  5446  00140C  B0D8               	btfsc	status,0,c
  5447  00140E  D004               	goto	l3806
  5448  001410  0E61               	movlw	97
  5449  001412  5C18               	subwf	isalpha@c,w,c
  5450  001414  B0D8               	btfsc	status,0,c
  5451  001416  D007               	goto	l3810
  5452  001418                     l3806:
  5453  001418  5018               	movf	isalpha@c,w,c
  5454  00141A  EC8F  F00A         	call	_isupper
  5455  00141E  B0D8               	btfsc	status,0,c
  5456  001420  D002               	goto	l3810
  5457  001422  0E00               	movlw	0
  5458  001424  6E17               	movwf	_isalpha$1207,c
  5459  001426                     l3810:
  5460  001426  C017  F016         	movff	_isalpha$1207,??_isalpha
  5461  00142A  3016               	rrcf	??_isalpha,w,c
  5462  00142C  0012               	return	
  5463  00142E                     __end_of_isalpha:
  5464                           	opt stack 0
  5465                           tblptru	equ	0xFF8
  5466                           tblptrh	equ	0xFF7
  5467                           tblptrl	equ	0xFF6
  5468                           tablat	equ	0xFF5
  5469                           prodh	equ	0xFF4
  5470                           prodl	equ	0xFF3
  5471                           intcon	equ	0xFF2
  5472                           postinc0	equ	0xFEE
  5473                           wreg	equ	0xFE8
  5474                           postinc1	equ	0xFE6
  5475                           postdec1	equ	0xFE5
  5476                           fsr1l	equ	0xFE1
  5477                           indf2	equ	0xFDF
  5478                           postinc2	equ	0xFDE
  5479                           postdec2	equ	0xFDD
  5480                           fsr2h	equ	0xFDA
  5481                           fsr2l	equ	0xFD9
  5482                           status	equ	0xFD8
  5483                           
  5484 ;; *************** function _isupper *****************
  5485 ;; Defined at:
  5486 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\isupper.c"
  5487 ;; Parameters:    Size  Location     Type
  5488 ;;  c               1    wreg     unsigned char 
  5489 ;; Auto vars:     Size  Location     Type
  5490 ;;  c               1   20[COMRAM] unsigned char 
  5491 ;; Return value:  Size  Location     Type
  5492 ;;		None               void
  5493 ;; Registers used:
  5494 ;;		wreg, status,2, status,0
  5495 ;; Tracked objects:
  5496 ;;		On entry : 0/0
  5497 ;;		On exit  : 0/0
  5498 ;;		Unchanged: 0/0
  5499 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5500 ;;      Params:         0       0       0       0       0       0       0       0       0
  5501 ;;      Locals:         2       0       0       0       0       0       0       0       0
  5502 ;;      Temps:          1       0       0       0       0       0       0       0       0
  5503 ;;      Totals:         3       0       0       0       0       0       0       0       0
  5504 ;;Total ram usage:        3 bytes
  5505 ;; Hardware stack levels used:    1
  5506 ;; Hardware stack levels required when called:    2
  5507 ;; This function calls:
  5508 ;;		Nothing
  5509 ;; This function is called by:
  5510 ;;		_isalpha
  5511 ;; This function uses a non-reentrant model
  5512 ;;
  5513                           
  5514                           	psect	text18
  5515  00151E                     __ptext18:
  5516                           	opt stack 0
  5517  00151E                     _isupper:
  5518                           	opt stack 26
  5519                           
  5520                           ;incstack = 0
  5521                           ;isupper@c stored from wreg
  5522  00151E  6E15               	movwf	isupper@c,c
  5523  001520  0E00               	movlw	0
  5524  001522  6E14               	movwf	_isupper$1218,c
  5525  001524  0E5B               	movlw	91
  5526  001526  5C15               	subwf	isupper@c,w,c
  5527  001528  B0D8               	btfsc	status,0,c
  5528  00152A  D005               	goto	l3716
  5529  00152C  0E40               	movlw	64
  5530  00152E  6415               	cpfsgt	isupper@c,c
  5531  001530  D002               	goto	l3716
  5532  001532  0E01               	movlw	1
  5533  001534  6E14               	movwf	_isupper$1218,c
  5534  001536                     l3716:
  5535  001536  C014  F013         	movff	_isupper$1218,??_isupper
  5536  00153A  3013               	rrcf	??_isupper,w,c
  5537  00153C  0012               	return	
  5538  00153E                     __end_of_isupper:
  5539                           	opt stack 0
  5540                           tblptru	equ	0xFF8
  5541                           tblptrh	equ	0xFF7
  5542                           tblptrl	equ	0xFF6
  5543                           tablat	equ	0xFF5
  5544                           prodh	equ	0xFF4
  5545                           prodl	equ	0xFF3
  5546                           intcon	equ	0xFF2
  5547                           postinc0	equ	0xFEE
  5548                           wreg	equ	0xFE8
  5549                           postinc1	equ	0xFE6
  5550                           postdec1	equ	0xFE5
  5551                           fsr1l	equ	0xFE1
  5552                           indf2	equ	0xFDF
  5553                           postinc2	equ	0xFDE
  5554                           postdec2	equ	0xFDD
  5555                           fsr2h	equ	0xFDA
  5556                           fsr2l	equ	0xFD9
  5557                           status	equ	0xFD8
  5558                           
  5559 ;; *************** function _atoi *****************
  5560 ;; Defined at:
  5561 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\atoi.c"
  5562 ;; Parameters:    Size  Location     Type
  5563 ;;  s               2   24[COMRAM] PTR const unsigned char 
  5564 ;;		 -> parseInString@numString(32), 
  5565 ;; Auto vars:     Size  Location     Type
  5566 ;;  a               2   29[COMRAM] int 
  5567 ;;  sign            1   28[COMRAM] unsigned char 
  5568 ;; Return value:  Size  Location     Type
  5569 ;;                  2   24[COMRAM] int 
  5570 ;; Registers used:
  5571 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5572 ;; Tracked objects:
  5573 ;;		On entry : 0/0
  5574 ;;		On exit  : 0/0
  5575 ;;		Unchanged: 0/0
  5576 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5577 ;;      Params:         2       0       0       0       0       0       0       0       0
  5578 ;;      Locals:         3       0       0       0       0       0       0       0       0
  5579 ;;      Temps:          2       0       0       0       0       0       0       0       0
  5580 ;;      Totals:         7       0       0       0       0       0       0       0       0
  5581 ;;Total ram usage:        7 bytes
  5582 ;; Hardware stack levels used:    1
  5583 ;; Hardware stack levels required when called:    3
  5584 ;; This function calls:
  5585 ;;		___wmul
  5586 ;;		_isdigit
  5587 ;; This function is called by:
  5588 ;;		_parseInString
  5589 ;; This function uses a non-reentrant model
  5590 ;;
  5591                           
  5592                           	psect	text19
  5593  000DD4                     __ptext19:
  5594                           	opt stack 0
  5595  000DD4                     _atoi:
  5596                           	opt stack 26
  5597                           
  5598                           ;incstack = 0
  5599  000DD4  D002               	goto	l3776
  5600  000DD6                     l3774:
  5601  000DD6  4A19               	infsnz	atoi@s,f,c
  5602  000DD8  2A1A               	incf	atoi@s+1,f,c
  5603  000DDA                     l3776:
  5604  000DDA  C019  FFD9         	movff	atoi@s,fsr2l
  5605  000DDE  C01A  FFDA         	movff	atoi@s+1,fsr2h
  5606  000DE2  50DF               	movf	indf2,w,c
  5607  000DE4  0A20               	xorlw	32
  5608  000DE6  B4D8               	btfsc	status,2,c
  5609  000DE8  D7F6               	goto	l3774
  5610  000DEA  C019  FFD9         	movff	atoi@s,fsr2l
  5611  000DEE  C01A  FFDA         	movff	atoi@s+1,fsr2h
  5612  000DF2  50DF               	movf	indf2,w,c
  5613  000DF4  0A09               	xorlw	9
  5614  000DF6  B4D8               	btfsc	status,2,c
  5615  000DF8  D7EE               	goto	l3774
  5616  000DFA  0E00               	movlw	0
  5617  000DFC  6E1F               	movwf	atoi@a+1,c
  5618  000DFE  0E00               	movlw	0
  5619  000E00  6E1E               	movwf	atoi@a,c
  5620  000E02  0E00               	movlw	0
  5621  000E04  6E1D               	movwf	atoi@sign,c
  5622  000E06  0E2D               	movlw	45
  5623  000E08  C019  FFD9         	movff	atoi@s,fsr2l
  5624  000E0C  C01A  FFDA         	movff	atoi@s+1,fsr2h
  5625  000E10  62DF               	cpfseq	indf2,c
  5626  000E12  D002               	goto	l3786
  5627  000E14  2A1D               	incf	atoi@sign,f,c
  5628  000E16  D023               	goto	L22
  5629  000E18                     l3786:
  5630  000E18  0E2B               	movlw	43
  5631  000E1A  C019  FFD9         	movff	atoi@s,fsr2l
  5632  000E1E  C01A  FFDA         	movff	atoi@s+1,fsr2h
  5633  000E22  62DF               	cpfseq	indf2,c
  5634  000E24  D01E               	goto	l3794
  5635  000E26  D01B               	goto	L22
  5636  000E28                     l3790:
  5637  000E28  C01E  F013         	movff	atoi@a,___wmul@multiplier
  5638  000E2C  C01F  F014         	movff	atoi@a+1,___wmul@multiplier+1
  5639  000E30  0E00               	movlw	0
  5640  000E32  6E16               	movwf	___wmul@multiplicand+1,c
  5641  000E34  0E0A               	movlw	10
  5642  000E36  6E15               	movwf	___wmul@multiplicand,c
  5643  000E38  EC69  F00A         	call	___wmul	;wreg free
  5644  000E3C  C019  FFD9         	movff	atoi@s,fsr2l
  5645  000E40  C01A  FFDA         	movff	atoi@s+1,fsr2h
  5646  000E44  50DF               	movf	indf2,w,c
  5647  000E46  6E1B               	movwf	??_atoi& (0+255),c
  5648  000E48  6A1C               	clrf	(??_atoi+1)& (0+255),c
  5649  000E4A  5013               	movf	?___wmul,w,c
  5650  000E4C  261B               	addwf	??_atoi,f,c
  5651  000E4E  5014               	movf	?___wmul+1,w,c
  5652  000E50  221C               	addwfc	??_atoi+1,f,c
  5653  000E52  0ED0               	movlw	208
  5654  000E54  241B               	addwf	??_atoi,w,c
  5655  000E56  6E1E               	movwf	atoi@a,c
  5656  000E58  0EFF               	movlw	255
  5657  000E5A  201C               	addwfc	??_atoi+1,w,c
  5658  000E5C  6E1F               	movwf	atoi@a+1,c
  5659  000E5E                     L22:
  5660  000E5E  4A19               	infsnz	atoi@s,f,c
  5661  000E60  2A1A               	incf	atoi@s+1,f,c
  5662  000E62                     l3794:
  5663  000E62  C019  FFD9         	movff	atoi@s,fsr2l
  5664  000E66  C01A  FFDA         	movff	atoi@s+1,fsr2h
  5665  000E6A  50DF               	movf	indf2,w,c
  5666  000E6C  EC9F  F00A         	call	_isdigit
  5667  000E70  B0D8               	btfsc	status,0,c
  5668  000E72  D7DA               	goto	l3790
  5669  000E74  501D               	movf	atoi@sign,w,c
  5670  000E76  B4D8               	btfsc	status,2,c
  5671  000E78  D00D               	goto	l758
  5672  000E7A  C01E  F01B         	movff	atoi@a,??_atoi
  5673  000E7E  C01F  F01C         	movff	atoi@a+1,??_atoi+1
  5674  000E82  1E1B               	comf	??_atoi,f,c
  5675  000E84  1E1C               	comf	??_atoi+1,f,c
  5676  000E86  4A1B               	infsnz	??_atoi,f,c
  5677  000E88  2A1C               	incf	??_atoi+1,f,c
  5678  000E8A  C01B  F019         	movff	??_atoi,?_atoi
  5679  000E8E  C01C  F01A         	movff	??_atoi+1,?_atoi+1
  5680  000E92  D004               	goto	l759
  5681  000E94                     l758:
  5682  000E94  C01E  F019         	movff	atoi@a,?_atoi
  5683  000E98  C01F  F01A         	movff	atoi@a+1,?_atoi+1
  5684  000E9C                     l759:
  5685  000E9C  0012               	return	
  5686  000E9E                     __end_of_atoi:
  5687                           	opt stack 0
  5688                           tblptru	equ	0xFF8
  5689                           tblptrh	equ	0xFF7
  5690                           tblptrl	equ	0xFF6
  5691                           tablat	equ	0xFF5
  5692                           prodh	equ	0xFF4
  5693                           prodl	equ	0xFF3
  5694                           intcon	equ	0xFF2
  5695                           postinc0	equ	0xFEE
  5696                           wreg	equ	0xFE8
  5697                           postinc1	equ	0xFE6
  5698                           postdec1	equ	0xFE5
  5699                           fsr1l	equ	0xFE1
  5700                           indf2	equ	0xFDF
  5701                           postinc2	equ	0xFDE
  5702                           postdec2	equ	0xFDD
  5703                           fsr2h	equ	0xFDA
  5704                           fsr2l	equ	0xFD9
  5705                           status	equ	0xFD8
  5706                           
  5707 ;; *************** function _isdigit *****************
  5708 ;; Defined at:
  5709 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\isdigit.c"
  5710 ;; Parameters:    Size  Location     Type
  5711 ;;  c               1    wreg     unsigned char 
  5712 ;; Auto vars:     Size  Location     Type
  5713 ;;  c               1   20[COMRAM] unsigned char 
  5714 ;; Return value:  Size  Location     Type
  5715 ;;		None               void
  5716 ;; Registers used:
  5717 ;;		wreg, status,2, status,0
  5718 ;; Tracked objects:
  5719 ;;		On entry : 0/0
  5720 ;;		On exit  : 0/0
  5721 ;;		Unchanged: 0/0
  5722 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5723 ;;      Params:         0       0       0       0       0       0       0       0       0
  5724 ;;      Locals:         2       0       0       0       0       0       0       0       0
  5725 ;;      Temps:          1       0       0       0       0       0       0       0       0
  5726 ;;      Totals:         3       0       0       0       0       0       0       0       0
  5727 ;;Total ram usage:        3 bytes
  5728 ;; Hardware stack levels used:    1
  5729 ;; Hardware stack levels required when called:    2
  5730 ;; This function calls:
  5731 ;;		Nothing
  5732 ;; This function is called by:
  5733 ;;		_parseInString
  5734 ;;		_atoi
  5735 ;; This function uses a non-reentrant model
  5736 ;;
  5737                           
  5738                           	psect	text20
  5739  00153E                     __ptext20:
  5740                           	opt stack 0
  5741  00153E                     _isdigit:
  5742                           	opt stack 27
  5743                           
  5744                           ;incstack = 0
  5745                           ;isdigit@c stored from wreg
  5746  00153E  6E15               	movwf	isdigit@c,c
  5747  001540  0E00               	movlw	0
  5748  001542  6E14               	movwf	_isdigit$1210,c
  5749  001544  0E3A               	movlw	58
  5750  001546  5C15               	subwf	isdigit@c,w,c
  5751  001548  B0D8               	btfsc	status,0,c
  5752  00154A  D005               	goto	l3698
  5753  00154C  0E2F               	movlw	47
  5754  00154E  6415               	cpfsgt	isdigit@c,c
  5755  001550  D002               	goto	l3698
  5756  001552  0E01               	movlw	1
  5757  001554  6E14               	movwf	_isdigit$1210,c
  5758  001556                     l3698:
  5759  001556  C014  F013         	movff	_isdigit$1210,??_isdigit
  5760  00155A  3013               	rrcf	??_isdigit,w,c
  5761  00155C  0012               	return	
  5762  00155E                     __end_of_isdigit:
  5763                           	opt stack 0
  5764                           tblptru	equ	0xFF8
  5765                           tblptrh	equ	0xFF7
  5766                           tblptrl	equ	0xFF6
  5767                           tablat	equ	0xFF5
  5768                           prodh	equ	0xFF4
  5769                           prodl	equ	0xFF3
  5770                           intcon	equ	0xFF2
  5771                           postinc0	equ	0xFEE
  5772                           wreg	equ	0xFE8
  5773                           postinc1	equ	0xFE6
  5774                           postdec1	equ	0xFE5
  5775                           fsr1l	equ	0xFE1
  5776                           indf2	equ	0xFDF
  5777                           postinc2	equ	0xFDE
  5778                           postdec2	equ	0xFDD
  5779                           fsr2h	equ	0xFDA
  5780                           fsr2l	equ	0xFD9
  5781                           status	equ	0xFD8
  5782                           
  5783 ;; *************** function ___wmul *****************
  5784 ;; Defined at:
  5785 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\Umul16.c"
  5786 ;; Parameters:    Size  Location     Type
  5787 ;;  multiplier      2   18[COMRAM] unsigned int 
  5788 ;;  multiplicand    2   20[COMRAM] unsigned int 
  5789 ;; Auto vars:     Size  Location     Type
  5790 ;;  product         2   22[COMRAM] unsigned int 
  5791 ;; Return value:  Size  Location     Type
  5792 ;;                  2   18[COMRAM] unsigned int 
  5793 ;; Registers used:
  5794 ;;		wreg, status,2, status,0, prodl, prodh
  5795 ;; Tracked objects:
  5796 ;;		On entry : 0/0
  5797 ;;		On exit  : 0/0
  5798 ;;		Unchanged: 0/0
  5799 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5800 ;;      Params:         4       0       0       0       0       0       0       0       0
  5801 ;;      Locals:         2       0       0       0       0       0       0       0       0
  5802 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5803 ;;      Totals:         6       0       0       0       0       0       0       0       0
  5804 ;;Total ram usage:        6 bytes
  5805 ;; Hardware stack levels used:    1
  5806 ;; Hardware stack levels required when called:    2
  5807 ;; This function calls:
  5808 ;;		Nothing
  5809 ;; This function is called by:
  5810 ;;		_atoi
  5811 ;; This function uses a non-reentrant model
  5812 ;;
  5813                           
  5814                           	psect	text21
  5815  0014D2                     __ptext21:
  5816                           	opt stack 0
  5817  0014D2                     ___wmul:
  5818                           	opt stack 26
  5819                           
  5820                           ;incstack = 0
  5821  0014D2  5013               	movf	___wmul@multiplier,w,c
  5822  0014D4  0215               	mulwf	___wmul@multiplicand,c
  5823  0014D6  CFF3 F017          	movff	prodl,___wmul@product
  5824  0014DA  CFF4 F018          	movff	prodh,___wmul@product+1
  5825  0014DE  5013               	movf	___wmul@multiplier,w,c
  5826  0014E0  0216               	mulwf	___wmul@multiplicand+1,c
  5827  0014E2  50F3               	movf	prodl,w,c
  5828  0014E4  2618               	addwf	___wmul@product+1,f,c
  5829  0014E6  5014               	movf	___wmul@multiplier+1,w,c
  5830  0014E8  0215               	mulwf	___wmul@multiplicand,c
  5831  0014EA  50F3               	movf	prodl,w,c
  5832  0014EC  2618               	addwf	___wmul@product+1,f,c
  5833  0014EE  C017  F013         	movff	___wmul@product,?___wmul
  5834  0014F2  C018  F014         	movff	___wmul@product+1,?___wmul+1
  5835  0014F6  0012               	return	
  5836  0014F8                     __end_of___wmul:
  5837                           	opt stack 0
  5838                           tblptru	equ	0xFF8
  5839                           tblptrh	equ	0xFF7
  5840                           tblptrl	equ	0xFF6
  5841                           tablat	equ	0xFF5
  5842                           prodh	equ	0xFF4
  5843                           prodl	equ	0xFF3
  5844                           intcon	equ	0xFF2
  5845                           postinc0	equ	0xFEE
  5846                           wreg	equ	0xFE8
  5847                           postinc1	equ	0xFE6
  5848                           postdec1	equ	0xFE5
  5849                           fsr1l	equ	0xFE1
  5850                           indf2	equ	0xFDF
  5851                           postinc2	equ	0xFDE
  5852                           postdec2	equ	0xFDD
  5853                           fsr2h	equ	0xFDA
  5854                           fsr2l	equ	0xFD9
  5855                           status	equ	0xFD8
  5856                           
  5857 ;; *************** function _initialize_I2C *****************
  5858 ;; Defined at:
  5859 ;;		line 40 in file "AD5172_I2C.c"
  5860 ;; Parameters:    Size  Location     Type
  5861 ;;		None
  5862 ;; Auto vars:     Size  Location     Type
  5863 ;;		None
  5864 ;; Return value:  Size  Location     Type
  5865 ;;		None               void
  5866 ;; Registers used:
  5867 ;;		wreg, status,2, cstack
  5868 ;; Tracked objects:
  5869 ;;		On entry : 0/0
  5870 ;;		On exit  : 0/0
  5871 ;;		Unchanged: 0/0
  5872 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5873 ;;      Params:         0       0       0       0       0       0       0       0       0
  5874 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5875 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5876 ;;      Totals:         0       0       0       0       0       0       0       0       0
  5877 ;;Total ram usage:        0 bytes
  5878 ;; Hardware stack levels used:    1
  5879 ;; Hardware stack levels required when called:    3
  5880 ;; This function calls:
  5881 ;;		_AD5172_Stop
  5882 ;; This function is called by:
  5883 ;;		_main
  5884 ;; This function uses a non-reentrant model
  5885 ;;
  5886                           
  5887                           	psect	text22
  5888  0015CC                     __ptext22:
  5889                           	opt stack 0
  5890  0015CC                     _initialize_I2C:
  5891                           	opt stack 27
  5892                           
  5893                           ;AD5172_I2C.c: 43: SSPCON1 = 0x28;
  5894                           
  5895                           ;incstack = 0
  5896  0015CC  0E28               	movlw	40
  5897  0015CE  6EC6               	movwf	4038,c	;volatile
  5898                           
  5899                           ;AD5172_I2C.c: 45: SSPADD = 9;
  5900  0015D0  0E09               	movlw	9
  5901  0015D2  6EC8               	movwf	4040,c	;volatile
  5902                           
  5903                           ;AD5172_I2C.c: 46: SSPSTAT = 0;
  5904  0015D4  0E00               	movlw	0
  5905  0015D6  6EC7               	movwf	4039,c	;volatile
  5906                           
  5907                           ;AD5172_I2C.c: 49: AD5172_Stop();
  5908  0015D8  ECBF  F00A         	call	_AD5172_Stop	;wreg free
  5909  0015DC  0012               	return	
  5910  0015DE                     __end_of_initialize_I2C:
  5911                           	opt stack 0
  5912                           tblptru	equ	0xFF8
  5913                           tblptrh	equ	0xFF7
  5914                           tblptrl	equ	0xFF6
  5915                           tablat	equ	0xFF5
  5916                           prodh	equ	0xFF4
  5917                           prodl	equ	0xFF3
  5918                           intcon	equ	0xFF2
  5919                           postinc0	equ	0xFEE
  5920                           wreg	equ	0xFE8
  5921                           postinc1	equ	0xFE6
  5922                           postdec1	equ	0xFE5
  5923                           fsr1l	equ	0xFE1
  5924                           indf2	equ	0xFDF
  5925                           postinc2	equ	0xFDE
  5926                           postdec2	equ	0xFDD
  5927                           fsr2h	equ	0xFDA
  5928                           fsr2l	equ	0xFD9
  5929                           status	equ	0xFD8
  5930                           
  5931 ;; *************** function _initializePorts *****************
  5932 ;; Defined at:
  5933 ;;		line 269 in file "main.c"
  5934 ;; Parameters:    Size  Location     Type
  5935 ;;		None
  5936 ;; Auto vars:     Size  Location     Type
  5937 ;;		None
  5938 ;; Return value:  Size  Location     Type
  5939 ;;		None               void
  5940 ;; Registers used:
  5941 ;;		wreg, status,2
  5942 ;; Tracked objects:
  5943 ;;		On entry : 0/0
  5944 ;;		On exit  : 0/0
  5945 ;;		Unchanged: 0/0
  5946 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5947 ;;      Params:         0       0       0       0       0       0       0       0       0
  5948 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5949 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5950 ;;      Totals:         0       0       0       0       0       0       0       0       0
  5951 ;;Total ram usage:        0 bytes
  5952 ;; Hardware stack levels used:    1
  5953 ;; Hardware stack levels required when called:    2
  5954 ;; This function calls:
  5955 ;;		Nothing
  5956 ;; This function is called by:
  5957 ;;		_main
  5958 ;; This function uses a non-reentrant model
  5959 ;;
  5960                           
  5961                           	psect	text23
  5962  000F42                     __ptext23:
  5963                           	opt stack 0
  5964  000F42                     _initializePorts:
  5965                           	opt stack 28
  5966                           
  5967                           ;main.c: 275: ADCON1 = 0b00001111;
  5968                           
  5969                           ;incstack = 0
  5970  000F42  0E0F               	movlw	15
  5971  000F44  6EC1               	movwf	4033,c	;volatile
  5972                           
  5973                           ;main.c: 276: ADCON2 = 0b01111111;
  5974  000F46  0E7F               	movlw	127
  5975  000F48  6EC0               	movwf	4032,c	;volatile
  5976                           
  5977                           ;main.c: 277: ADCON0 = 0b00000000;
  5978  000F4A  0E00               	movlw	0
  5979  000F4C  6EC2               	movwf	4034,c	;volatile
  5980                           
  5981                           ;main.c: 280: PORTA = 0b00000000;
  5982  000F4E  0E00               	movlw	0
  5983  000F50  6E80               	movwf	3968,c	;volatile
  5984                           
  5985                           ;main.c: 281: TRISA = 0b00000000;
  5986  000F52  0E00               	movlw	0
  5987  000F54  6E92               	movwf	3986,c	;volatile
  5988                           
  5989                           ;main.c: 282: TRISB = 0b00001111;
  5990  000F56  0E0F               	movlw	15
  5991  000F58  6E93               	movwf	3987,c	;volatile
  5992                           
  5993                           ;main.c: 284: RBPU = 0;
  5994  000F5A  9EF1               	bcf	intcon2,7,c	;volatile
  5995                           
  5996                           ;main.c: 285: PORTC = 0x00;
  5997  000F5C  0E00               	movlw	0
  5998  000F5E  6E82               	movwf	3970,c	;volatile
  5999                           
  6000                           ;main.c: 286: TRISC = 0b10110001;
  6001  000F60  0EB1               	movlw	177
  6002  000F62  6E94               	movwf	3988,c	;volatile
  6003                           
  6004                           ;main.c: 287: PORTD = 0x00;
  6005  000F64  0E00               	movlw	0
  6006  000F66  6E83               	movwf	3971,c	;volatile
  6007                           
  6008                           ;main.c: 288: TRISD = 0x00;
  6009  000F68  0E00               	movlw	0
  6010  000F6A  6E95               	movwf	3989,c	;volatile
  6011                           
  6012                           ;main.c: 289: PORTE = 0x00;
  6013  000F6C  0E00               	movlw	0
  6014  000F6E  6E84               	movwf	3972,c	;volatile
  6015                           
  6016                           ;main.c: 290: TRISE = 0b11111000;
  6017  000F70  0EF8               	movlw	248
  6018  000F72  6E96               	movwf	3990,c	;volatile
  6019                           
  6020                           ;main.c: 294: T1CON=0x00;
  6021  000F74  0E00               	movlw	0
  6022  000F76  6ECD               	movwf	4045,c	;volatile
  6023                           
  6024                           ;main.c: 295: T1CKPS0=0;
  6025  000F78  98CD               	bcf	4045,4,c	;volatile
  6026                           
  6027                           ;main.c: 296: T1CKPS1=1;
  6028  000F7A  8ACD               	bsf	4045,5,c	;volatile
  6029                           
  6030                           ;main.c: 297: TMR1CS=0;
  6031  000F7C  92CD               	bcf	4045,1,c	;volatile
  6032                           
  6033                           ;main.c: 298: TMR1IF=0;
  6034  000F7E  909E               	bcf	3998,0,c	;volatile
  6035                           
  6036                           ;main.c: 299: TMR1IE=1;
  6037  000F80  809D               	bsf	3997,0,c	;volatile
  6038                           
  6039                           ;main.c: 300: TMR1ON=1;
  6040  000F82  80CD               	bsf	4045,0,c	;volatile
  6041                           
  6042                           ;main.c: 304: BRGH = 0;
  6043  000F84  94AC               	bcf	4012,2,c	;volatile
  6044                           
  6045                           ;main.c: 305: SPBRG = 239;
  6046  000F86  0EEF               	movlw	239
  6047  000F88  6EAF               	movwf	4015,c	;volatile
  6048                           
  6049                           ;main.c: 307: SYNC = 0;
  6050  000F8A  98AC               	bcf	4012,4,c	;volatile
  6051                           
  6052                           ;main.c: 308: SPEN = 1;
  6053  000F8C  8EAB               	bsf	4011,7,c	;volatile
  6054                           
  6055                           ;main.c: 309: CREN = 1;
  6056  000F8E  88AB               	bsf	4011,4,c	;volatile
  6057                           
  6058                           ;main.c: 310: SREN = 0;
  6059  000F90  9AAB               	bcf	4011,5,c	;volatile
  6060                           
  6061                           ;main.c: 311: TXIE = 0;
  6062  000F92  989D               	bcf	3997,4,c	;volatile
  6063                           
  6064                           ;main.c: 312: RCIE = 0;
  6065  000F94  9A9D               	bcf	3997,5,c	;volatile
  6066                           
  6067                           ;main.c: 313: TX9 = 0;
  6068  000F96  9CAC               	bcf	4012,6,c	;volatile
  6069                           
  6070                           ;main.c: 314: RX9 = 0;
  6071  000F98  9CAB               	bcf	4011,6,c	;volatile
  6072                           
  6073                           ;main.c: 315: TXEN = 1;
  6074  000F9A  8AAC               	bsf	4012,5,c	;volatile
  6075                           
  6076                           ;main.c: 317: INTCON = 0x00;
  6077  000F9C  0E00               	movlw	0
  6078  000F9E  6EF2               	movwf	intcon,c	;volatile
  6079                           
  6080                           ;main.c: 318: PIE1 = 0;
  6081  000FA0  0E00               	movlw	0
  6082  000FA2  6E9D               	movwf	3997,c	;volatile
  6083                           
  6084                           ;main.c: 319: SSPIE = 0;
  6085  000FA4  969D               	bcf	3997,3,c	;volatile
  6086                           
  6087                           ;main.c: 321: TXIE = 0;
  6088  000FA6  989D               	bcf	3997,4,c	;volatile
  6089                           
  6090                           ;main.c: 322: RCIE = 1;
  6091  000FA8  8A9D               	bsf	3997,5,c	;volatile
  6092                           
  6093                           ;main.c: 324: PEIE = 1;
  6094  000FAA  8CF2               	bsf	intcon,6,c	;volatile
  6095                           
  6096                           ;main.c: 325: TMR1IE = 1;
  6097  000FAC  809D               	bsf	3997,0,c	;volatile
  6098                           
  6099                           ;main.c: 326: TMR2IE = 0;
  6100  000FAE  929D               	bcf	3997,1,c	;volatile
  6101                           
  6102                           ;main.c: 327: GIE = 1;
  6103  000FB0  8EF2               	bsf	intcon,7,c	;volatile
  6104  000FB2  0012               	return	
  6105  000FB4                     __end_of_initializePorts:
  6106                           	opt stack 0
  6107                           tblptru	equ	0xFF8
  6108                           tblptrh	equ	0xFF7
  6109                           tblptrl	equ	0xFF6
  6110                           tablat	equ	0xFF5
  6111                           prodh	equ	0xFF4
  6112                           prodl	equ	0xFF3
  6113                           intcon	equ	0xFF2
  6114                           intcon2	equ	0xFF1
  6115                           postinc0	equ	0xFEE
  6116                           wreg	equ	0xFE8
  6117                           postinc1	equ	0xFE6
  6118                           postdec1	equ	0xFE5
  6119                           fsr1l	equ	0xFE1
  6120                           indf2	equ	0xFDF
  6121                           postinc2	equ	0xFDE
  6122                           postdec2	equ	0xFDD
  6123                           fsr2h	equ	0xFDA
  6124                           fsr2l	equ	0xFD9
  6125                           status	equ	0xFD8
  6126                           
  6127 ;; *************** function _i2c_SlaveWrite *****************
  6128 ;; Defined at:
  6129 ;;		line 240 in file "AD5172_I2C.c"
  6130 ;; Parameters:    Size  Location     Type
  6131 ;;  device          1    wreg     unsigned char 
  6132 ;;  numDataBytes    1   19[COMRAM] unsigned char 
  6133 ;; Auto vars:     Size  Location     Type
  6134 ;;  device          1   20[COMRAM] unsigned char 
  6135 ;;  i               1   22[COMRAM] unsigned char 
  6136 ;;  dataByte        1   21[COMRAM] unsigned char 
  6137 ;; Return value:  Size  Location     Type
  6138 ;;		None               void
  6139 ;; Registers used:
  6140 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6141 ;; Tracked objects:
  6142 ;;		On entry : 0/0
  6143 ;;		On exit  : 0/0
  6144 ;;		Unchanged: 0/0
  6145 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6146 ;;      Params:         1       0       0       0       0       0       0       0       0
  6147 ;;      Locals:         3       0       0       0       0       0       0       0       0
  6148 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6149 ;;      Totals:         4       0       0       0       0       0       0       0       0
  6150 ;;Total ram usage:        4 bytes
  6151 ;; Hardware stack levels used:    1
  6152 ;; Hardware stack levels required when called:    3
  6153 ;; This function calls:
  6154 ;;		_AD5172_SendByte
  6155 ;;		_AD5172_Start
  6156 ;;		_AD5172_Stop
  6157 ;;		_get_Acknowledge
  6158 ;; This function is called by:
  6159 ;;		_main
  6160 ;; This function uses a non-reentrant model
  6161 ;;
  6162                           
  6163                           	psect	text24
  6164  0010E4                     __ptext24:
  6165                           	opt stack 0
  6166  0010E4                     _i2c_SlaveWrite:
  6167                           	opt stack 27
  6168                           
  6169                           ;incstack = 0
  6170                           ;i2c_SlaveWrite@device stored from wreg
  6171  0010E4  6E15               	movwf	i2c_SlaveWrite@device,c
  6172                           
  6173                           ;AD5172_I2C.c: 241: unsigned char i, dataByte;
  6174                           ;AD5172_I2C.c: 243: errorFlag = 0x00;
  6175  0010E6  0E00               	movlw	0
  6176  0010E8  6E41               	movwf	_errorFlag,c
  6177                           
  6178                           ;AD5172_I2C.c: 246: AD5172_Start();
  6179  0010EA  ECCD  F00A         	call	_AD5172_Start	;wreg free
  6180                           
  6181                           ;AD5172_I2C.c: 248: AD5172_SendByte(device|0x00);
  6182  0010EE  5015               	movf	i2c_SlaveWrite@device,w,c
  6183  0010F0  ECAF  F00A         	call	_AD5172_SendByte
  6184                           
  6185                           ;AD5172_I2C.c: 249: errorFlag = errorFlag | get_Acknowledge();
  6186  0010F4  ECFE  F00A         	call	_get_Acknowledge	;wreg free
  6187  0010F8  1041               	iorwf	_errorFlag,w,c
  6188  0010FA  6E41               	movwf	_errorFlag,c
  6189                           
  6190                           ;AD5172_I2C.c: 252: for(i=0; i<numDataBytes; i++)
  6191  0010FC  0E00               	movlw	0
  6192  0010FE  6E17               	movwf	i2c_SlaveWrite@i,c
  6193  001100  D014               	goto	l4600
  6194  001102                     l4592:
  6195                           
  6196                           ;AD5172_I2C.c: 253: {
  6197                           ;AD5172_I2C.c: 254: dataByte = outBuffer[i];
  6198  001102  5017               	movf	i2c_SlaveWrite@i,w,c
  6199  001104  0D01               	mullw	1
  6200  001106  0101               	movlb	1	; () banked
  6201  001108  0E82               	movlw	low _outBuffer
  6202  00110A  24F3               	addwf	prodl,w,c
  6203  00110C  6ED9               	movwf	fsr2l,c
  6204  00110E  0101               	movlb	1	; () banked
  6205  001110  0E01               	movlw	high _outBuffer
  6206  001112  20F4               	addwfc	prodh,w,c
  6207  001114  6EDA               	movwf	fsr2h,c
  6208  001116  50DF               	movf	indf2,w,c
  6209  001118  6E16               	movwf	i2c_SlaveWrite@dataByte,c
  6210                           
  6211                           ; BSR set to: 1
  6212                           ;AD5172_I2C.c: 255: AD5172_SendByte(dataByte);
  6213  00111A  5016               	movf	i2c_SlaveWrite@dataByte,w,c
  6214  00111C  ECAF  F00A         	call	_AD5172_SendByte
  6215                           
  6216                           ;AD5172_I2C.c: 256: errorFlag = errorFlag | get_Acknowledge();
  6217  001120  ECFE  F00A         	call	_get_Acknowledge	;wreg free
  6218  001124  1041               	iorwf	_errorFlag,w,c
  6219  001126  6E41               	movwf	_errorFlag,c
  6220  001128  2A17               	incf	i2c_SlaveWrite@i,f,c
  6221  00112A                     l4600:
  6222  00112A  5014               	movf	i2c_SlaveWrite@numDataBytes,w,c
  6223  00112C  5C17               	subwf	i2c_SlaveWrite@i,w,c
  6224  00112E  A0D8               	btfss	status,0,c
  6225  001130  D7E8               	goto	l4592
  6226                           
  6227                           ;AD5172_I2C.c: 259: }
  6228                           ;AD5172_I2C.c: 262: AD5172_Stop();
  6229  001132  ECBF  F00A         	call	_AD5172_Stop	;wreg free
  6230  001136  0012               	return	
  6231  001138                     __end_of_i2c_SlaveWrite:
  6232                           	opt stack 0
  6233                           tblptru	equ	0xFF8
  6234                           tblptrh	equ	0xFF7
  6235                           tblptrl	equ	0xFF6
  6236                           tablat	equ	0xFF5
  6237                           prodh	equ	0xFF4
  6238                           prodl	equ	0xFF3
  6239                           intcon	equ	0xFF2
  6240                           intcon2	equ	0xFF1
  6241                           postinc0	equ	0xFEE
  6242                           wreg	equ	0xFE8
  6243                           postinc1	equ	0xFE6
  6244                           postdec1	equ	0xFE5
  6245                           fsr1l	equ	0xFE1
  6246                           indf2	equ	0xFDF
  6247                           postinc2	equ	0xFDE
  6248                           postdec2	equ	0xFDD
  6249                           fsr2h	equ	0xFDA
  6250                           fsr2l	equ	0xFD9
  6251                           status	equ	0xFD8
  6252                           
  6253 ;; *************** function _i2c_SlaveRead *****************
  6254 ;; Defined at:
  6255 ;;		line 266 in file "AD5172_I2C.c"
  6256 ;; Parameters:    Size  Location     Type
  6257 ;;  device          1    wreg     unsigned char 
  6258 ;;  numBytes        1   21[COMRAM] unsigned char 
  6259 ;; Auto vars:     Size  Location     Type
  6260 ;;  device          1   22[COMRAM] unsigned char 
  6261 ;;  i               1   23[COMRAM] unsigned char 
  6262 ;; Return value:  Size  Location     Type
  6263 ;;		None               void
  6264 ;; Registers used:
  6265 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6266 ;; Tracked objects:
  6267 ;;		On entry : 0/0
  6268 ;;		On exit  : 0/0
  6269 ;;		Unchanged: 0/0
  6270 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6271 ;;      Params:         1       0       0       0       0       0       0       0       0
  6272 ;;      Locals:         2       0       0       0       0       0       0       0       0
  6273 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6274 ;;      Totals:         3       0       0       0       0       0       0       0       0
  6275 ;;Total ram usage:        3 bytes
  6276 ;; Hardware stack levels used:    1
  6277 ;; Hardware stack levels required when called:    3
  6278 ;; This function calls:
  6279 ;;		_AD5172_ReceiveByte
  6280 ;;		_AD5172_SendByte
  6281 ;;		_AD5172_Start
  6282 ;;		_AD5172_Stop
  6283 ;;		_get_Acknowledge
  6284 ;;		_send_Acknowledge
  6285 ;; This function is called by:
  6286 ;;		_main
  6287 ;; This function uses a non-reentrant model
  6288 ;;
  6289                           
  6290                           	psect	text25
  6291  001084                     __ptext25:
  6292                           	opt stack 0
  6293  001084                     _i2c_SlaveRead:
  6294                           	opt stack 27
  6295                           
  6296                           ;incstack = 0
  6297                           ;i2c_SlaveRead@device stored from wreg
  6298  001084  6E17               	movwf	i2c_SlaveRead@device,c
  6299                           
  6300                           ;AD5172_I2C.c: 267: unsigned char i;
  6301                           ;AD5172_I2C.c: 269: errorFlag = 0x00;
  6302  001086  0E00               	movlw	0
  6303  001088  6E41               	movwf	_errorFlag,c
  6304                           
  6305                           ;AD5172_I2C.c: 272: AD5172_Start();
  6306  00108A  ECCD  F00A         	call	_AD5172_Start	;wreg free
  6307                           
  6308                           ;AD5172_I2C.c: 273: AD5172_SendByte((unsigned char)(device|0x01));
  6309  00108E  5017               	movf	i2c_SlaveRead@device,w,c
  6310  001090  0901               	iorlw	1
  6311  001092  ECAF  F00A         	call	_AD5172_SendByte
  6312                           
  6313                           ;AD5172_I2C.c: 274: errorFlag = errorFlag | get_Acknowledge();
  6314  001096  ECFE  F00A         	call	_get_Acknowledge	;wreg free
  6315  00109A  1041               	iorwf	_errorFlag,w,c
  6316  00109C  6E41               	movwf	_errorFlag,c
  6317                           
  6318                           ;AD5172_I2C.c: 276: i = 0;
  6319  00109E  0E00               	movlw	0
  6320  0010A0  6E18               	movwf	i2c_SlaveRead@i,c
  6321  0010A2                     l4614:
  6322                           
  6323                           ;AD5172_I2C.c: 279: inBuffer[i] = (unsigned char)AD5172_ReceiveByte();
  6324  0010A2  5018               	movf	i2c_SlaveRead@i,w,c
  6325  0010A4  0D01               	mullw	1
  6326  0010A6  0101               	movlb	1	; () banked
  6327  0010A8  0E41               	movlw	low _inBuffer
  6328  0010AA  24F3               	addwf	prodl,w,c
  6329  0010AC  6ED9               	movwf	fsr2l,c
  6330  0010AE  0101               	movlb	1	; () banked
  6331  0010B0  0E01               	movlw	high _inBuffer
  6332  0010B2  20F4               	addwfc	prodh,w,c
  6333  0010B4  6EDA               	movwf	fsr2h,c
  6334  0010B6  EC7C  F00A         	call	_AD5172_ReceiveByte	;wreg free
  6335  0010BA  5013               	movf	?_AD5172_ReceiveByte,w,c
  6336  0010BC  6EDF               	movwf	indf2,c
  6337                           
  6338                           ;AD5172_I2C.c: 280: i++;
  6339  0010BE  2A18               	incf	i2c_SlaveRead@i,f,c
  6340                           
  6341                           ;AD5172_I2C.c: 282: if (i < numBytes)
  6342  0010C0  5016               	movf	i2c_SlaveRead@numBytes,w,c
  6343  0010C2  5C18               	subwf	i2c_SlaveRead@i,w,c
  6344  0010C4  B0D8               	btfsc	status,0,c
  6345  0010C6  D004               	goto	l4622
  6346                           
  6347                           ;AD5172_I2C.c: 283: send_Acknowledge(0);
  6348  0010C8  0E00               	movlw	0
  6349  0010CA  EC2C  F00A         	call	_send_Acknowledge
  6350  0010CE  D003               	goto	l4624
  6351  0010D0                     l4622:
  6352                           
  6353                           ;AD5172_I2C.c: 284: else
  6354                           ;AD5172_I2C.c: 285: send_Acknowledge(1);
  6355  0010D0  0E01               	movlw	1
  6356  0010D2  EC2C  F00A         	call	_send_Acknowledge
  6357  0010D6                     l4624:
  6358                           
  6359                           ;AD5172_I2C.c: 286: } while (i < numBytes);
  6360  0010D6  5016               	movf	i2c_SlaveRead@numBytes,w,c
  6361  0010D8  5C18               	subwf	i2c_SlaveRead@i,w,c
  6362  0010DA  A0D8               	btfss	status,0,c
  6363  0010DC  D7E2               	goto	l4614
  6364                           
  6365                           ;AD5172_I2C.c: 287: AD5172_Stop();
  6366  0010DE  ECBF  F00A         	call	_AD5172_Stop	;wreg free
  6367  0010E2  0012               	return	
  6368  0010E4                     __end_of_i2c_SlaveRead:
  6369                           	opt stack 0
  6370                           tblptru	equ	0xFF8
  6371                           tblptrh	equ	0xFF7
  6372                           tblptrl	equ	0xFF6
  6373                           tablat	equ	0xFF5
  6374                           prodh	equ	0xFF4
  6375                           prodl	equ	0xFF3
  6376                           intcon	equ	0xFF2
  6377                           intcon2	equ	0xFF1
  6378                           postinc0	equ	0xFEE
  6379                           wreg	equ	0xFE8
  6380                           postinc1	equ	0xFE6
  6381                           postdec1	equ	0xFE5
  6382                           fsr1l	equ	0xFE1
  6383                           indf2	equ	0xFDF
  6384                           postinc2	equ	0xFDE
  6385                           postdec2	equ	0xFDD
  6386                           fsr2h	equ	0xFDA
  6387                           fsr2l	equ	0xFD9
  6388                           status	equ	0xFD8
  6389                           
  6390 ;; *************** function _Read_b_eep *****************
  6391 ;; Defined at:
  6392 ;;		line 23 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\pic18\plib\EEP\read_B.c"
  6393 ;; Parameters:    Size  Location     Type
  6394 ;;  badd            2   18[COMRAM] unsigned int 
  6395 ;; Auto vars:     Size  Location     Type
  6396 ;;		None
  6397 ;; Return value:  Size  Location     Type
  6398 ;;                  1    wreg      unsigned char 
  6399 ;; Registers used:
  6400 ;;		wreg, status,2
  6401 ;; Tracked objects:
  6402 ;;		On entry : 0/0
  6403 ;;		On exit  : 0/0
  6404 ;;		Unchanged: 0/0
  6405 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6406 ;;      Params:         2       0       0       0       0       0       0       0       0
  6407 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6408 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6409 ;;      Totals:         2       0       0       0       0       0       0       0       0
  6410 ;;Total ram usage:        2 bytes
  6411 ;; Hardware stack levels used:    1
  6412 ;; Hardware stack levels required when called:    2
  6413 ;; This function calls:
  6414 ;;		Nothing
  6415 ;; This function is called by:
  6416 ;;		_main
  6417 ;; This function uses a non-reentrant model
  6418 ;;
  6419                           
  6420                           	psect	text26
  6421  0015DE                     __ptext26:
  6422                           	opt stack 0
  6423  0015DE                     _Read_b_eep:
  6424                           	opt stack 28
  6425                           
  6426                           ;incstack = 0
  6427  0015DE  C013  FFA9         	movff	Read_b_eep@badd,4009	;volatile
  6428  0015E2  9CA6               	bcf	4006,6,c	;volatile
  6429  0015E4  9EA6               	bcf	4006,7,c	;volatile
  6430  0015E6  80A6               	bsf	4006,0,c	;volatile
  6431  0015E8  F000               	nop	
  6432  0015EA  F000               	nop	
  6433  0015EC  50A8               	movf	4008,w,c	;volatile
  6434  0015EE  0012               	return	
  6435  0015F0                     __end_of_Read_b_eep:
  6436                           	opt stack 0
  6437                           tblptru	equ	0xFF8
  6438                           tblptrh	equ	0xFF7
  6439                           tblptrl	equ	0xFF6
  6440                           tablat	equ	0xFF5
  6441                           prodh	equ	0xFF4
  6442                           prodl	equ	0xFF3
  6443                           intcon	equ	0xFF2
  6444                           intcon2	equ	0xFF1
  6445                           postinc0	equ	0xFEE
  6446                           wreg	equ	0xFE8
  6447                           postinc1	equ	0xFE6
  6448                           postdec1	equ	0xFE5
  6449                           fsr1l	equ	0xFE1
  6450                           indf2	equ	0xFDF
  6451                           postinc2	equ	0xFDE
  6452                           postdec2	equ	0xFDD
  6453                           fsr2h	equ	0xFDA
  6454                           fsr2l	equ	0xFD9
  6455                           status	equ	0xFD8
  6456                           
  6457 ;; *************** function _AD5172_Write *****************
  6458 ;; Defined at:
  6459 ;;		line 137 in file "AD5172_I2C.c"
  6460 ;; Parameters:    Size  Location     Type
  6461 ;;  potSelect       1    wreg     unsigned char 
  6462 ;;  dataByte        1   19[COMRAM] unsigned char 
  6463 ;; Auto vars:     Size  Location     Type
  6464 ;;  potSelect       1   20[COMRAM] unsigned char 
  6465 ;;  instructionB    1   21[COMRAM] unsigned char 
  6466 ;; Return value:  Size  Location     Type
  6467 ;;		None               void
  6468 ;; Registers used:
  6469 ;;		wreg, status,2, status,0, cstack
  6470 ;; Tracked objects:
  6471 ;;		On entry : 0/0
  6472 ;;		On exit  : 0/0
  6473 ;;		Unchanged: 0/0
  6474 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6475 ;;      Params:         1       0       0       0       0       0       0       0       0
  6476 ;;      Locals:         2       0       0       0       0       0       0       0       0
  6477 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6478 ;;      Totals:         3       0       0       0       0       0       0       0       0
  6479 ;;Total ram usage:        3 bytes
  6480 ;; Hardware stack levels used:    1
  6481 ;; Hardware stack levels required when called:    3
  6482 ;; This function calls:
  6483 ;;		_AD5172_SendByte
  6484 ;;		_AD5172_Start
  6485 ;;		_AD5172_Stop
  6486 ;;		_get_Acknowledge
  6487 ;; This function is called by:
  6488 ;;		_main
  6489 ;; This function uses a non-reentrant model
  6490 ;;
  6491                           
  6492                           	psect	text27
  6493  0011D4                     __ptext27:
  6494                           	opt stack 0
  6495  0011D4                     _AD5172_Write:
  6496                           	opt stack 27
  6497                           
  6498                           ;incstack = 0
  6499                           ;AD5172_Write@potSelect stored from wreg
  6500  0011D4  6E15               	movwf	AD5172_Write@potSelect,c
  6501                           
  6502                           ;AD5172_I2C.c: 139: unsigned char instructionByte=0x00;
  6503  0011D6  0E00               	movlw	0
  6504  0011D8  6E16               	movwf	AD5172_Write@instructionByte,c
  6505                           
  6506                           ;AD5172_I2C.c: 142: AD5172_Start();
  6507  0011DA  ECCD  F00A         	call	_AD5172_Start	;wreg free
  6508                           
  6509                           ;AD5172_I2C.c: 143: AD5172_SendByte((unsigned char)(0x00|0x5E));
  6510  0011DE  0E5E               	movlw	94
  6511  0011E0  ECAF  F00A         	call	_AD5172_SendByte
  6512                           
  6513                           ;AD5172_I2C.c: 144: errorFlag = errorFlag|get_Acknowledge();
  6514  0011E4  ECFE  F00A         	call	_get_Acknowledge	;wreg free
  6515  0011E8  1041               	iorwf	_errorFlag,w,c
  6516  0011EA  6E41               	movwf	_errorFlag,c
  6517                           
  6518                           ;AD5172_I2C.c: 147: if(1==potSelect)
  6519  0011EC  0415               	decf	AD5172_Write@potSelect,w,c
  6520  0011EE  A4D8               	btfss	status,2,c
  6521  0011F0  D002               	goto	l4500
  6522                           
  6523                           ;AD5172_I2C.c: 148: instructionByte=0x08;
  6524  0011F2  0E08               	movlw	8
  6525  0011F4  D001               	goto	L23
  6526  0011F6                     l4500:
  6527                           
  6528                           ;AD5172_I2C.c: 149: else
  6529                           ;AD5172_I2C.c: 150: instructionByte=0x88;
  6530  0011F6  0E88               	movlw	136
  6531  0011F8                     L23:
  6532  0011F8  6E16               	movwf	AD5172_Write@instructionByte,c
  6533                           
  6534                           ;AD5172_I2C.c: 152: AD5172_SendByte(instructionByte);
  6535  0011FA  5016               	movf	AD5172_Write@instructionByte,w,c
  6536  0011FC  ECAF  F00A         	call	_AD5172_SendByte
  6537                           
  6538                           ;AD5172_I2C.c: 153: errorFlag = errorFlag|get_Acknowledge();
  6539  001200  ECFE  F00A         	call	_get_Acknowledge	;wreg free
  6540  001204  1041               	iorwf	_errorFlag,w,c
  6541  001206  6E41               	movwf	_errorFlag,c
  6542                           
  6543                           ;AD5172_I2C.c: 156: AD5172_SendByte(dataByte);
  6544  001208  5014               	movf	AD5172_Write@dataByte,w,c
  6545  00120A  ECAF  F00A         	call	_AD5172_SendByte
  6546                           
  6547                           ;AD5172_I2C.c: 157: errorFlag = errorFlag|get_Acknowledge();
  6548  00120E  ECFE  F00A         	call	_get_Acknowledge	;wreg free
  6549  001212  1041               	iorwf	_errorFlag,w,c
  6550  001214  6E41               	movwf	_errorFlag,c
  6551                           
  6552                           ;AD5172_I2C.c: 160: AD5172_Stop();
  6553  001216  ECBF  F00A         	call	_AD5172_Stop	;wreg free
  6554  00121A  0012               	return	
  6555  00121C                     __end_of_AD5172_Write:
  6556                           	opt stack 0
  6557                           tblptru	equ	0xFF8
  6558                           tblptrh	equ	0xFF7
  6559                           tblptrl	equ	0xFF6
  6560                           tablat	equ	0xFF5
  6561                           prodh	equ	0xFF4
  6562                           prodl	equ	0xFF3
  6563                           intcon	equ	0xFF2
  6564                           intcon2	equ	0xFF1
  6565                           postinc0	equ	0xFEE
  6566                           wreg	equ	0xFE8
  6567                           postinc1	equ	0xFE6
  6568                           postdec1	equ	0xFE5
  6569                           fsr1l	equ	0xFE1
  6570                           indf2	equ	0xFDF
  6571                           postinc2	equ	0xFDE
  6572                           postdec2	equ	0xFDD
  6573                           fsr2h	equ	0xFDA
  6574                           fsr2l	equ	0xFD9
  6575                           status	equ	0xFD8
  6576                           
  6577 ;; *************** function _AD5172_Set *****************
  6578 ;; Defined at:
  6579 ;;		line 165 in file "AD5172_I2C.c"
  6580 ;; Parameters:    Size  Location     Type
  6581 ;;  potSelect       1    wreg     unsigned char 
  6582 ;; Auto vars:     Size  Location     Type
  6583 ;;  potSelect       1   19[COMRAM] unsigned char 
  6584 ;;  instructionB    1   20[COMRAM] unsigned char 
  6585 ;; Return value:  Size  Location     Type
  6586 ;;		None               void
  6587 ;; Registers used:
  6588 ;;		wreg, status,2, status,0, cstack
  6589 ;; Tracked objects:
  6590 ;;		On entry : 0/0
  6591 ;;		On exit  : 0/0
  6592 ;;		Unchanged: 0/0
  6593 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6594 ;;      Params:         0       0       0       0       0       0       0       0       0
  6595 ;;      Locals:         2       0       0       0       0       0       0       0       0
  6596 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6597 ;;      Totals:         2       0       0       0       0       0       0       0       0
  6598 ;;Total ram usage:        2 bytes
  6599 ;; Hardware stack levels used:    1
  6600 ;; Hardware stack levels required when called:    3
  6601 ;; This function calls:
  6602 ;;		_AD5172_SendByte
  6603 ;;		_AD5172_Start
  6604 ;;		_AD5172_Stop
  6605 ;;		_get_Acknowledge
  6606 ;; This function is called by:
  6607 ;;		_main
  6608 ;; This function uses a non-reentrant model
  6609 ;;
  6610                           
  6611                           	psect	text28
  6612  001320                     __ptext28:
  6613                           	opt stack 0
  6614  001320                     _AD5172_Set:
  6615                           	opt stack 27
  6616                           
  6617                           ;incstack = 0
  6618                           ;AD5172_Set@potSelect stored from wreg
  6619  001320  6E14               	movwf	AD5172_Set@potSelect,c
  6620                           
  6621                           ;AD5172_I2C.c: 167: unsigned char instructionByte=0x00;
  6622  001322  0E00               	movlw	0
  6623  001324  6E15               	movwf	AD5172_Set@instructionByte,c
  6624                           
  6625                           ;AD5172_I2C.c: 170: AD5172_Start();
  6626  001326  ECCD  F00A         	call	_AD5172_Start	;wreg free
  6627                           
  6628                           ;AD5172_I2C.c: 171: AD5172_SendByte((unsigned char)(0x00|0x5E));
  6629  00132A  0E5E               	movlw	94
  6630  00132C  ECAF  F00A         	call	_AD5172_SendByte
  6631                           
  6632                           ;AD5172_I2C.c: 172: errorFlag = errorFlag|get_Acknowledge();
  6633  001330  ECFE  F00A         	call	_get_Acknowledge	;wreg free
  6634  001334  1041               	iorwf	_errorFlag,w,c
  6635  001336  6E41               	movwf	_errorFlag,c
  6636                           
  6637                           ;AD5172_I2C.c: 175: if(1==potSelect)
  6638  001338  0414               	decf	AD5172_Set@potSelect,w,c
  6639  00133A  A4D8               	btfss	status,2,c
  6640  00133C  D002               	goto	l4554
  6641                           
  6642                           ;AD5172_I2C.c: 176: instructionByte=0x00;
  6643  00133E  0E00               	movlw	0
  6644  001340  D001               	goto	L24
  6645  001342                     l4554:
  6646                           
  6647                           ;AD5172_I2C.c: 177: else
  6648                           ;AD5172_I2C.c: 178: instructionByte=0x80;
  6649  001342  0E80               	movlw	128
  6650  001344                     L24:
  6651  001344  6E15               	movwf	AD5172_Set@instructionByte,c
  6652                           
  6653                           ;AD5172_I2C.c: 180: AD5172_SendByte(instructionByte);
  6654  001346  5015               	movf	AD5172_Set@instructionByte,w,c
  6655  001348  ECAF  F00A         	call	_AD5172_SendByte
  6656                           
  6657                           ;AD5172_I2C.c: 181: errorFlag = errorFlag|get_Acknowledge();
  6658  00134C  ECFE  F00A         	call	_get_Acknowledge	;wreg free
  6659  001350  1041               	iorwf	_errorFlag,w,c
  6660  001352  6E41               	movwf	_errorFlag,c
  6661                           
  6662                           ;AD5172_I2C.c: 184: AD5172_Stop();
  6663  001354  ECBF  F00A         	call	_AD5172_Stop	;wreg free
  6664  001358  0012               	return	
  6665  00135A                     __end_of_AD5172_Set:
  6666                           	opt stack 0
  6667                           tblptru	equ	0xFF8
  6668                           tblptrh	equ	0xFF7
  6669                           tblptrl	equ	0xFF6
  6670                           tablat	equ	0xFF5
  6671                           prodh	equ	0xFF4
  6672                           prodl	equ	0xFF3
  6673                           intcon	equ	0xFF2
  6674                           intcon2	equ	0xFF1
  6675                           postinc0	equ	0xFEE
  6676                           wreg	equ	0xFE8
  6677                           postinc1	equ	0xFE6
  6678                           postdec1	equ	0xFE5
  6679                           fsr1l	equ	0xFE1
  6680                           indf2	equ	0xFDF
  6681                           postinc2	equ	0xFDE
  6682                           postdec2	equ	0xFDD
  6683                           fsr2h	equ	0xFDA
  6684                           fsr2l	equ	0xFD9
  6685                           status	equ	0xFD8
  6686                           
  6687 ;; *************** function _AD5172_Read *****************
  6688 ;; Defined at:
  6689 ;;		line 208 in file "AD5172_I2C.c"
  6690 ;; Parameters:    Size  Location     Type
  6691 ;;		None
  6692 ;; Auto vars:     Size  Location     Type
  6693 ;;  temp            2   25[COMRAM] int 
  6694 ;;  dataByte        2   23[COMRAM] int 
  6695 ;;  status          1   27[COMRAM] unsigned char 
  6696 ;; Return value:  Size  Location     Type
  6697 ;;                  2   21[COMRAM] int 
  6698 ;; Registers used:
  6699 ;;		wreg, status,2, status,0, cstack
  6700 ;; Tracked objects:
  6701 ;;		On entry : 0/0
  6702 ;;		On exit  : 0/0
  6703 ;;		Unchanged: 0/0
  6704 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6705 ;;      Params:         2       0       0       0       0       0       0       0       0
  6706 ;;      Locals:         5       0       0       0       0       0       0       0       0
  6707 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6708 ;;      Totals:         7       0       0       0       0       0       0       0       0
  6709 ;;Total ram usage:        7 bytes
  6710 ;; Hardware stack levels used:    1
  6711 ;; Hardware stack levels required when called:    3
  6712 ;; This function calls:
  6713 ;;		_AD5172_ReceiveByte
  6714 ;;		_AD5172_SendByte
  6715 ;;		_AD5172_Start
  6716 ;;		_AD5172_Stop
  6717 ;;		_get_Acknowledge
  6718 ;;		_send_Acknowledge
  6719 ;; This function is called by:
  6720 ;;		_main
  6721 ;; This function uses a non-reentrant model
  6722 ;;
  6723                           
  6724                           	psect	text29
  6725  001022                     __ptext29:
  6726                           	opt stack 0
  6727  001022                     _AD5172_Read:
  6728                           	opt stack 27
  6729                           
  6730                           ;AD5172_I2C.c: 210: int dataByte, temp;
  6731                           ;AD5172_I2C.c: 211: unsigned char status;
  6732                           ;AD5172_I2C.c: 215: AD5172_Start();
  6733                           
  6734                           ;incstack = 0
  6735  001022  ECCD  F00A         	call	_AD5172_Start	;wreg free
  6736                           
  6737                           ;AD5172_I2C.c: 216: AD5172_SendByte((unsigned char)(0x5E|0x01));
  6738  001026  0E5F               	movlw	95
  6739  001028  ECAF  F00A         	call	_AD5172_SendByte
  6740                           
  6741                           ;AD5172_I2C.c: 217: errorFlag = errorFlag | get_Acknowledge();
  6742  00102C  ECFE  F00A         	call	_get_Acknowledge	;wreg free
  6743  001030  1041               	iorwf	_errorFlag,w,c
  6744  001032  6E41               	movwf	_errorFlag,c
  6745                           
  6746                           ;AD5172_I2C.c: 223: dataByte = AD5172_ReceiveByte();
  6747  001034  EC7C  F00A         	call	_AD5172_ReceiveByte	;wreg free
  6748  001038  C013  F018         	movff	?_AD5172_ReceiveByte,AD5172_Read@dataByte
  6749  00103C  C014  F019         	movff	?_AD5172_ReceiveByte+1,AD5172_Read@dataByte+1
  6750                           
  6751                           ;AD5172_I2C.c: 224: send_Acknowledge(0);
  6752  001040  0E00               	movlw	0
  6753  001042  EC2C  F00A         	call	_send_Acknowledge
  6754                           
  6755                           ;AD5172_I2C.c: 227: temp = AD5172_ReceiveByte();
  6756  001046  EC7C  F00A         	call	_AD5172_ReceiveByte	;wreg free
  6757  00104A  C013  F01A         	movff	?_AD5172_ReceiveByte,AD5172_Read@temp
  6758  00104E  C014  F01B         	movff	?_AD5172_ReceiveByte+1,AD5172_Read@temp+1
  6759                           
  6760                           ;AD5172_I2C.c: 228: status = (unsigned char)(temp & 0xC0);
  6761  001052  501A               	movf	AD5172_Read@temp,w,c
  6762  001054  0BC0               	andlw	192
  6763  001056  6E1C               	movwf	AD5172_Read@status,c
  6764                           
  6765                           ;AD5172_I2C.c: 229: if(0x00==status)OTP_Validation_Flag=0;
  6766  001058  661C               	tstfsz	AD5172_Read@status,c
  6767  00105A  D002               	goto	l4528
  6768  00105C  0E00               	movlw	0
  6769  00105E  D007               	goto	L26
  6770  001060                     l4528:
  6771                           
  6772                           ;AD5172_I2C.c: 230: else if(0xC0==status)OTP_Validation_Flag=1;
  6773  001060  501C               	movf	AD5172_Read@status,w,c
  6774  001062  0AC0               	xorlw	192
  6775  001064  A4D8               	btfss	status,2,c
  6776  001066  D002               	goto	l4532
  6777  001068  0E01               	movlw	1
  6778  00106A  D001               	goto	L26
  6779  00106C                     l4532:
  6780                           
  6781                           ;AD5172_I2C.c: 231: else OTP_Validation_Flag=2;
  6782  00106C  0E02               	movlw	2
  6783  00106E                     L26:
  6784  00106E  6E3E               	movwf	_OTP_Validation_Flag,c
  6785                           
  6786                           ;AD5172_I2C.c: 232: send_Acknowledge(1);
  6787  001070  0E01               	movlw	1
  6788  001072  EC2C  F00A         	call	_send_Acknowledge
  6789                           
  6790                           ;AD5172_I2C.c: 233: AD5172_Stop();
  6791  001076  ECBF  F00A         	call	_AD5172_Stop	;wreg free
  6792                           
  6793                           ;AD5172_I2C.c: 234: return((int)dataByte);
  6794  00107A  C018  F016         	movff	AD5172_Read@dataByte,?_AD5172_Read
  6795  00107E  C019  F017         	movff	AD5172_Read@dataByte+1,?_AD5172_Read+1
  6796  001082  0012               	return	
  6797  001084                     __end_of_AD5172_Read:
  6798                           	opt stack 0
  6799                           tblptru	equ	0xFF8
  6800                           tblptrh	equ	0xFF7
  6801                           tblptrl	equ	0xFF6
  6802                           tablat	equ	0xFF5
  6803                           prodh	equ	0xFF4
  6804                           prodl	equ	0xFF3
  6805                           intcon	equ	0xFF2
  6806                           intcon2	equ	0xFF1
  6807                           postinc0	equ	0xFEE
  6808                           wreg	equ	0xFE8
  6809                           postinc1	equ	0xFE6
  6810                           postdec1	equ	0xFE5
  6811                           fsr1l	equ	0xFE1
  6812                           indf2	equ	0xFDF
  6813                           postinc2	equ	0xFDE
  6814                           postdec2	equ	0xFDD
  6815                           fsr2h	equ	0xFDA
  6816                           fsr2l	equ	0xFD9
  6817                           status	equ	0xFD8
  6818                           
  6819 ;; *************** function _send_Acknowledge *****************
  6820 ;; Defined at:
  6821 ;;		line 111 in file "AD5172_I2C.c"
  6822 ;; Parameters:    Size  Location     Type
  6823 ;;  ack             1    wreg     unsigned char 
  6824 ;; Auto vars:     Size  Location     Type
  6825 ;;  ack             1   18[COMRAM] unsigned char 
  6826 ;; Return value:  Size  Location     Type
  6827 ;;		None               void
  6828 ;; Registers used:
  6829 ;;		wreg, status,2
  6830 ;; Tracked objects:
  6831 ;;		On entry : 0/0
  6832 ;;		On exit  : 0/0
  6833 ;;		Unchanged: 0/0
  6834 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6835 ;;      Params:         0       0       0       0       0       0       0       0       0
  6836 ;;      Locals:         1       0       0       0       0       0       0       0       0
  6837 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6838 ;;      Totals:         1       0       0       0       0       0       0       0       0
  6839 ;;Total ram usage:        1 bytes
  6840 ;; Hardware stack levels used:    1
  6841 ;; Hardware stack levels required when called:    2
  6842 ;; This function calls:
  6843 ;;		Nothing
  6844 ;; This function is called by:
  6845 ;;		_AD5172_Read
  6846 ;;		_i2c_SlaveRead
  6847 ;; This function uses a non-reentrant model
  6848 ;;
  6849                           
  6850                           	psect	text30
  6851  001458                     __ptext30:
  6852                           	opt stack 0
  6853  001458                     _send_Acknowledge:
  6854                           	opt stack 27
  6855                           
  6856                           ;incstack = 0
  6857                           ;send_Acknowledge@ack stored from wreg
  6858  001458  6E13               	movwf	send_Acknowledge@ack,c
  6859                           
  6860                           ;AD5172_I2C.c: 113: SSPIF=0;
  6861  00145A  969E               	bcf	3998,3,c	;volatile
  6862                           
  6863                           ;AD5172_I2C.c: 114: ACKDT=ack;
  6864  00145C  A013               	btfss	send_Acknowledge@ack,0,c
  6865  00145E  D001               	bra	u4015
  6866  001460  8AC5               	bsf	4037,5,c	;volatile
  6867  001462                     u4015:
  6868  001462  B013               	btfsc	send_Acknowledge@ack,0,c
  6869  001464  D001               	bra	u4016
  6870  001466  9AC5               	bcf	4037,5,c	;volatile
  6871  001468                     u4016:
  6872                           
  6873                           ;AD5172_I2C.c: 115: ACKEN=1;
  6874  001468  88C5               	bsf	4037,4,c	;volatile
  6875                           
  6876                           ;AD5172_I2C.c: 116: timeout=0;
  6877  00146A  0E00               	movlw	0
  6878  00146C  6E43               	movwf	_timeout,c
  6879  00146E                     l457:
  6880  00146E  B69E               	btfsc	3998,3,c	;volatile
  6881  001470  D003               	goto	l461
  6882  001472  0E09               	movlw	9
  6883  001474  6443               	cpfsgt	_timeout,c
  6884  001476  D7FB               	goto	l457
  6885  001478                     l461:
  6886                           
  6887                           ;AD5172_I2C.c: 118: if (SSPIF == 0) errorFlag=0x80;
  6888  001478  B69E               	btfsc	3998,3,c	;volatile
  6889  00147A  D002               	goto	l463
  6890  00147C  0E80               	movlw	128
  6891  00147E  6E41               	movwf	_errorFlag,c
  6892  001480                     l463:
  6893  001480  0012               	return	
  6894  001482                     __end_of_send_Acknowledge:
  6895                           	opt stack 0
  6896                           tblptru	equ	0xFF8
  6897                           tblptrh	equ	0xFF7
  6898                           tblptrl	equ	0xFF6
  6899                           tablat	equ	0xFF5
  6900                           prodh	equ	0xFF4
  6901                           prodl	equ	0xFF3
  6902                           intcon	equ	0xFF2
  6903                           intcon2	equ	0xFF1
  6904                           postinc0	equ	0xFEE
  6905                           wreg	equ	0xFE8
  6906                           postinc1	equ	0xFE6
  6907                           postdec1	equ	0xFE5
  6908                           fsr1l	equ	0xFE1
  6909                           indf2	equ	0xFDF
  6910                           postinc2	equ	0xFDE
  6911                           postdec2	equ	0xFDD
  6912                           fsr2h	equ	0xFDA
  6913                           fsr2l	equ	0xFD9
  6914                           status	equ	0xFD8
  6915                           
  6916 ;; *************** function _AD5172_ReceiveByte *****************
  6917 ;; Defined at:
  6918 ;;		line 123 in file "AD5172_I2C.c"
  6919 ;; Parameters:    Size  Location     Type
  6920 ;;		None
  6921 ;; Auto vars:     Size  Location     Type
  6922 ;;  byte            1   20[COMRAM] unsigned char 
  6923 ;; Return value:  Size  Location     Type
  6924 ;;                  2   18[COMRAM] int 
  6925 ;; Registers used:
  6926 ;;		wreg, status,2
  6927 ;; Tracked objects:
  6928 ;;		On entry : 0/0
  6929 ;;		On exit  : 0/0
  6930 ;;		Unchanged: 0/0
  6931 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6932 ;;      Params:         2       0       0       0       0       0       0       0       0
  6933 ;;      Locals:         1       0       0       0       0       0       0       0       0
  6934 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6935 ;;      Totals:         3       0       0       0       0       0       0       0       0
  6936 ;;Total ram usage:        3 bytes
  6937 ;; Hardware stack levels used:    1
  6938 ;; Hardware stack levels required when called:    2
  6939 ;; This function calls:
  6940 ;;		Nothing
  6941 ;; This function is called by:
  6942 ;;		_AD5172_Read
  6943 ;;		_i2c_SlaveRead
  6944 ;; This function uses a non-reentrant model
  6945 ;;
  6946                           
  6947                           	psect	text31
  6948  0014F8                     __ptext31:
  6949                           	opt stack 0
  6950  0014F8                     _AD5172_ReceiveByte:
  6951                           	opt stack 27
  6952                           
  6953                           ;AD5172_I2C.c: 125: unsigned char byte;
  6954                           ;AD5172_I2C.c: 127: SSPIF=0;
  6955                           
  6956                           ;incstack = 0
  6957  0014F8  969E               	bcf	3998,3,c	;volatile
  6958                           
  6959                           ;AD5172_I2C.c: 128: RCEN = 1;
  6960  0014FA  86C5               	bsf	4037,3,c	;volatile
  6961                           
  6962                           ;AD5172_I2C.c: 129: timeout=0;
  6963  0014FC  0E00               	movlw	0
  6964  0014FE  6E43               	movwf	_timeout,c
  6965  001500                     l466:
  6966  001500  B69E               	btfsc	3998,3,c	;volatile
  6967  001502  D003               	goto	l470
  6968  001504  0E09               	movlw	9
  6969  001506  6443               	cpfsgt	_timeout,c
  6970  001508  D7FB               	goto	l466
  6971  00150A                     l470:
  6972                           
  6973                           ;AD5172_I2C.c: 131: if (SSPIF == 0) errorFlag=0x80;
  6974  00150A  B69E               	btfsc	3998,3,c	;volatile
  6975  00150C  D002               	goto	l3906
  6976  00150E  0E80               	movlw	128
  6977  001510  6E41               	movwf	_errorFlag,c
  6978  001512                     l3906:
  6979                           
  6980                           ;AD5172_I2C.c: 132: byte = SSPBUF;
  6981  001512  CFC9 F015          	movff	4041,AD5172_ReceiveByte@byte	;volatile
  6982                           
  6983                           ;AD5172_I2C.c: 133: return (int)byte;
  6984  001516  C015  F013         	movff	AD5172_ReceiveByte@byte,?_AD5172_ReceiveByte
  6985  00151A  6A14               	clrf	?_AD5172_ReceiveByte+1,c
  6986  00151C  0012               	return	
  6987  00151E                     __end_of_AD5172_ReceiveByte:
  6988                           	opt stack 0
  6989                           tblptru	equ	0xFF8
  6990                           tblptrh	equ	0xFF7
  6991                           tblptrl	equ	0xFF6
  6992                           tablat	equ	0xFF5
  6993                           prodh	equ	0xFF4
  6994                           prodl	equ	0xFF3
  6995                           intcon	equ	0xFF2
  6996                           intcon2	equ	0xFF1
  6997                           postinc0	equ	0xFEE
  6998                           wreg	equ	0xFE8
  6999                           postinc1	equ	0xFE6
  7000                           postdec1	equ	0xFE5
  7001                           fsr1l	equ	0xFE1
  7002                           indf2	equ	0xFDF
  7003                           postinc2	equ	0xFDE
  7004                           postdec2	equ	0xFDD
  7005                           fsr2h	equ	0xFDA
  7006                           fsr2l	equ	0xFD9
  7007                           status	equ	0xFD8
  7008                           
  7009 ;; *************** function _AD5172_Program *****************
  7010 ;; Defined at:
  7011 ;;		line 188 in file "AD5172_I2C.c"
  7012 ;; Parameters:    Size  Location     Type
  7013 ;;  potSelect       1    wreg     unsigned char 
  7014 ;; Auto vars:     Size  Location     Type
  7015 ;;  potSelect       1   19[COMRAM] unsigned char 
  7016 ;;  instructionB    1   20[COMRAM] unsigned char 
  7017 ;; Return value:  Size  Location     Type
  7018 ;;		None               void
  7019 ;; Registers used:
  7020 ;;		wreg, status,2, status,0, cstack
  7021 ;; Tracked objects:
  7022 ;;		On entry : 0/0
  7023 ;;		On exit  : 0/0
  7024 ;;		Unchanged: 0/0
  7025 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7026 ;;      Params:         0       0       0       0       0       0       0       0       0
  7027 ;;      Locals:         2       0       0       0       0       0       0       0       0
  7028 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7029 ;;      Totals:         2       0       0       0       0       0       0       0       0
  7030 ;;Total ram usage:        2 bytes
  7031 ;; Hardware stack levels used:    1
  7032 ;; Hardware stack levels required when called:    3
  7033 ;; This function calls:
  7034 ;;		_AD5172_SendByte
  7035 ;;		_AD5172_Start
  7036 ;;		_AD5172_Stop
  7037 ;;		_get_Acknowledge
  7038 ;; This function is called by:
  7039 ;;		_main
  7040 ;; This function uses a non-reentrant model
  7041 ;;
  7042                           
  7043                           	psect	text32
  7044  00135A                     __ptext32:
  7045                           	opt stack 0
  7046  00135A                     _AD5172_Program:
  7047                           	opt stack 27
  7048                           
  7049                           ;incstack = 0
  7050                           ;AD5172_Program@potSelect stored from wreg
  7051  00135A  6E14               	movwf	AD5172_Program@potSelect,c
  7052                           
  7053                           ;AD5172_I2C.c: 190: unsigned char instructionByte=0x00;
  7054  00135C  0E00               	movlw	0
  7055  00135E  6E15               	movwf	AD5172_Program@instructionByte,c
  7056                           
  7057                           ;AD5172_I2C.c: 193: AD5172_Start();
  7058  001360  ECCD  F00A         	call	_AD5172_Start	;wreg free
  7059                           
  7060                           ;AD5172_I2C.c: 194: AD5172_SendByte((unsigned char)(0x00|0x5E));
  7061  001364  0E5E               	movlw	94
  7062  001366  ECAF  F00A         	call	_AD5172_SendByte
  7063                           
  7064                           ;AD5172_I2C.c: 195: errorFlag = errorFlag|get_Acknowledge();
  7065  00136A  ECFE  F00A         	call	_get_Acknowledge	;wreg free
  7066  00136E  1041               	iorwf	_errorFlag,w,c
  7067  001370  6E41               	movwf	_errorFlag,c
  7068                           
  7069                           ;AD5172_I2C.c: 197: if(1==potSelect)instructionByte=0x28;
  7070  001372  0414               	decf	AD5172_Program@potSelect,w,c
  7071  001374  A4D8               	btfss	status,2,c
  7072  001376  D002               	goto	l4574
  7073  001378  0E28               	movlw	40
  7074  00137A  D001               	goto	L27
  7075  00137C                     l4574:
  7076                           
  7077                           ;AD5172_I2C.c: 198: else instructionByte=0xA8;
  7078  00137C  0EA8               	movlw	168
  7079  00137E                     L27:
  7080  00137E  6E15               	movwf	AD5172_Program@instructionByte,c
  7081                           
  7082                           ;AD5172_I2C.c: 200: AD5172_SendByte(instructionByte);
  7083  001380  5015               	movf	AD5172_Program@instructionByte,w,c
  7084  001382  ECAF  F00A         	call	_AD5172_SendByte
  7085                           
  7086                           ;AD5172_I2C.c: 201: errorFlag = errorFlag|get_Acknowledge();
  7087  001386  ECFE  F00A         	call	_get_Acknowledge	;wreg free
  7088  00138A  1041               	iorwf	_errorFlag,w,c
  7089  00138C  6E41               	movwf	_errorFlag,c
  7090                           
  7091                           ;AD5172_I2C.c: 204: AD5172_Stop();
  7092  00138E  ECBF  F00A         	call	_AD5172_Stop	;wreg free
  7093  001392  0012               	return	
  7094  001394                     __end_of_AD5172_Program:
  7095                           	opt stack 0
  7096                           tblptru	equ	0xFF8
  7097                           tblptrh	equ	0xFF7
  7098                           tblptrl	equ	0xFF6
  7099                           tablat	equ	0xFF5
  7100                           prodh	equ	0xFF4
  7101                           prodl	equ	0xFF3
  7102                           intcon	equ	0xFF2
  7103                           intcon2	equ	0xFF1
  7104                           postinc0	equ	0xFEE
  7105                           wreg	equ	0xFE8
  7106                           postinc1	equ	0xFE6
  7107                           postdec1	equ	0xFE5
  7108                           fsr1l	equ	0xFE1
  7109                           indf2	equ	0xFDF
  7110                           postinc2	equ	0xFDE
  7111                           postdec2	equ	0xFDD
  7112                           fsr2h	equ	0xFDA
  7113                           fsr2l	equ	0xFD9
  7114                           status	equ	0xFD8
  7115                           
  7116 ;; *************** function _get_Acknowledge *****************
  7117 ;; Defined at:
  7118 ;;		line 102 in file "AD5172_I2C.c"
  7119 ;; Parameters:    Size  Location     Type
  7120 ;;		None
  7121 ;; Auto vars:     Size  Location     Type
  7122 ;;  ack             1   18[COMRAM] unsigned char 
  7123 ;; Return value:  Size  Location     Type
  7124 ;;                  1    wreg      unsigned char 
  7125 ;; Registers used:
  7126 ;;		wreg, status,2
  7127 ;; Tracked objects:
  7128 ;;		On entry : 0/0
  7129 ;;		On exit  : 0/0
  7130 ;;		Unchanged: 0/0
  7131 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7132 ;;      Params:         0       0       0       0       0       0       0       0       0
  7133 ;;      Locals:         1       0       0       0       0       0       0       0       0
  7134 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7135 ;;      Totals:         1       0       0       0       0       0       0       0       0
  7136 ;;Total ram usage:        1 bytes
  7137 ;; Hardware stack levels used:    1
  7138 ;; Hardware stack levels required when called:    2
  7139 ;; This function calls:
  7140 ;;		Nothing
  7141 ;; This function is called by:
  7142 ;;		_AD5172_Write
  7143 ;;		_AD5172_Set
  7144 ;;		_AD5172_Program
  7145 ;;		_AD5172_Read
  7146 ;;		_i2c_SlaveWrite
  7147 ;;		_i2c_SlaveRead
  7148 ;; This function uses a non-reentrant model
  7149 ;;
  7150                           
  7151                           	psect	text33
  7152  0015FC                     __ptext33:
  7153                           	opt stack 0
  7154  0015FC                     _get_Acknowledge:
  7155                           	opt stack 27
  7156                           
  7157                           ;AD5172_I2C.c: 104: unsigned char ack;
  7158                           ;AD5172_I2C.c: 106: ack = ACKSTAT;
  7159                           
  7160                           ;incstack = 0
  7161  0015FC  0E00               	movlw	0
  7162  0015FE  BCC5               	btfsc	4037,6,c	;volatile
  7163  001600  0E01               	movlw	1
  7164  001602  6E13               	movwf	get_Acknowledge@ack,c
  7165                           
  7166                           ;AD5172_I2C.c: 107: return ack;
  7167  001604  5013               	movf	get_Acknowledge@ack,w,c
  7168  001606  0012               	return	
  7169  001608                     __end_of_get_Acknowledge:
  7170                           	opt stack 0
  7171                           tblptru	equ	0xFF8
  7172                           tblptrh	equ	0xFF7
  7173                           tblptrl	equ	0xFF6
  7174                           tablat	equ	0xFF5
  7175                           prodh	equ	0xFF4
  7176                           prodl	equ	0xFF3
  7177                           intcon	equ	0xFF2
  7178                           intcon2	equ	0xFF1
  7179                           postinc0	equ	0xFEE
  7180                           wreg	equ	0xFE8
  7181                           postinc1	equ	0xFE6
  7182                           postdec1	equ	0xFE5
  7183                           fsr1l	equ	0xFE1
  7184                           indf2	equ	0xFDF
  7185                           postinc2	equ	0xFDE
  7186                           postdec2	equ	0xFDD
  7187                           fsr2h	equ	0xFDA
  7188                           fsr2l	equ	0xFD9
  7189                           status	equ	0xFD8
  7190                           
  7191 ;; *************** function _AD5172_Stop *****************
  7192 ;; Defined at:
  7193 ;;		line 56 in file "AD5172_I2C.c"
  7194 ;; Parameters:    Size  Location     Type
  7195 ;;		None
  7196 ;; Auto vars:     Size  Location     Type
  7197 ;;		None
  7198 ;; Return value:  Size  Location     Type
  7199 ;;		None               void
  7200 ;; Registers used:
  7201 ;;		wreg, status,2
  7202 ;; Tracked objects:
  7203 ;;		On entry : 0/0
  7204 ;;		On exit  : 0/0
  7205 ;;		Unchanged: 0/0
  7206 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7207 ;;      Params:         0       0       0       0       0       0       0       0       0
  7208 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7209 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7210 ;;      Totals:         0       0       0       0       0       0       0       0       0
  7211 ;;Total ram usage:        0 bytes
  7212 ;; Hardware stack levels used:    1
  7213 ;; Hardware stack levels required when called:    2
  7214 ;; This function calls:
  7215 ;;		Nothing
  7216 ;; This function is called by:
  7217 ;;		_main
  7218 ;;		_initialize_I2C
  7219 ;;		_AD5172_Write
  7220 ;;		_AD5172_Set
  7221 ;;		_AD5172_Program
  7222 ;;		_AD5172_Read
  7223 ;;		_i2c_SlaveWrite
  7224 ;;		_i2c_SlaveRead
  7225 ;; This function uses a non-reentrant model
  7226 ;;
  7227                           
  7228                           	psect	text34
  7229  00157E                     __ptext34:
  7230                           	opt stack 0
  7231  00157E                     _AD5172_Stop:
  7232                           	opt stack 27
  7233                           
  7234                           ;AD5172_I2C.c: 58: SSPIF = 0;
  7235                           
  7236                           ;incstack = 0
  7237  00157E  969E               	bcf	3998,3,c	;volatile
  7238                           
  7239                           ;AD5172_I2C.c: 59: PEN = 1;
  7240  001580  84C5               	bsf	4037,2,c	;volatile
  7241                           
  7242                           ;AD5172_I2C.c: 60: timeout=0;
  7243  001582  0E00               	movlw	0
  7244  001584  6E43               	movwf	_timeout,c
  7245  001586                     l427:
  7246  001586  B69E               	btfsc	3998,3,c	;volatile
  7247  001588  D003               	goto	l431
  7248  00158A  0E09               	movlw	9
  7249  00158C  6443               	cpfsgt	_timeout,c
  7250  00158E  D7FB               	goto	l427
  7251  001590                     l431:
  7252                           
  7253                           ;AD5172_I2C.c: 62: if (SSPIF == 0) errorFlag=0x80;
  7254  001590  B69E               	btfsc	3998,3,c	;volatile
  7255  001592  D002               	goto	l433
  7256  001594  0E80               	movlw	128
  7257  001596  6E41               	movwf	_errorFlag,c
  7258  001598                     l433:
  7259  001598  0012               	return	
  7260  00159A                     __end_of_AD5172_Stop:
  7261                           	opt stack 0
  7262                           tblptru	equ	0xFF8
  7263                           tblptrh	equ	0xFF7
  7264                           tblptrl	equ	0xFF6
  7265                           tablat	equ	0xFF5
  7266                           prodh	equ	0xFF4
  7267                           prodl	equ	0xFF3
  7268                           intcon	equ	0xFF2
  7269                           intcon2	equ	0xFF1
  7270                           postinc0	equ	0xFEE
  7271                           wreg	equ	0xFE8
  7272                           postinc1	equ	0xFE6
  7273                           postdec1	equ	0xFE5
  7274                           fsr1l	equ	0xFE1
  7275                           indf2	equ	0xFDF
  7276                           postinc2	equ	0xFDE
  7277                           postdec2	equ	0xFDD
  7278                           fsr2h	equ	0xFDA
  7279                           fsr2l	equ	0xFD9
  7280                           status	equ	0xFD8
  7281                           
  7282 ;; *************** function _AD5172_Start *****************
  7283 ;; Defined at:
  7284 ;;		line 67 in file "AD5172_I2C.c"
  7285 ;; Parameters:    Size  Location     Type
  7286 ;;		None
  7287 ;; Auto vars:     Size  Location     Type
  7288 ;;		None
  7289 ;; Return value:  Size  Location     Type
  7290 ;;		None               void
  7291 ;; Registers used:
  7292 ;;		wreg, status,2
  7293 ;; Tracked objects:
  7294 ;;		On entry : 0/0
  7295 ;;		On exit  : 0/0
  7296 ;;		Unchanged: 0/0
  7297 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7298 ;;      Params:         0       0       0       0       0       0       0       0       0
  7299 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7300 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7301 ;;      Totals:         0       0       0       0       0       0       0       0       0
  7302 ;;Total ram usage:        0 bytes
  7303 ;; Hardware stack levels used:    1
  7304 ;; Hardware stack levels required when called:    2
  7305 ;; This function calls:
  7306 ;;		Nothing
  7307 ;; This function is called by:
  7308 ;;		_AD5172_Write
  7309 ;;		_AD5172_Set
  7310 ;;		_AD5172_Program
  7311 ;;		_AD5172_Read
  7312 ;;		_i2c_SlaveWrite
  7313 ;;		_i2c_SlaveRead
  7314 ;; This function uses a non-reentrant model
  7315 ;;
  7316                           
  7317                           	psect	text35
  7318  00159A                     __ptext35:
  7319                           	opt stack 0
  7320  00159A                     _AD5172_Start:
  7321                           	opt stack 27
  7322                           
  7323                           ;AD5172_I2C.c: 69: SSPIF=0;
  7324                           
  7325                           ;incstack = 0
  7326  00159A  969E               	bcf	3998,3,c	;volatile
  7327                           
  7328                           ;AD5172_I2C.c: 70: SEN = 1;
  7329  00159C  80C5               	bsf	4037,0,c	;volatile
  7330                           
  7331                           ;AD5172_I2C.c: 71: timeout=0;
  7332  00159E  0E00               	movlw	0
  7333  0015A0  6E43               	movwf	_timeout,c
  7334  0015A2                     l436:
  7335  0015A2  B69E               	btfsc	3998,3,c	;volatile
  7336  0015A4  D003               	goto	l440
  7337  0015A6  0E09               	movlw	9
  7338  0015A8  6443               	cpfsgt	_timeout,c
  7339  0015AA  D7FB               	goto	l436
  7340  0015AC                     l440:
  7341                           
  7342                           ;AD5172_I2C.c: 73: if (SSPIF == 0) errorFlag=0x80;
  7343  0015AC  B69E               	btfsc	3998,3,c	;volatile
  7344  0015AE  D002               	goto	l442
  7345  0015B0  0E80               	movlw	128
  7346  0015B2  6E41               	movwf	_errorFlag,c
  7347  0015B4                     l442:
  7348  0015B4  0012               	return	
  7349  0015B6                     __end_of_AD5172_Start:
  7350                           	opt stack 0
  7351                           tblptru	equ	0xFF8
  7352                           tblptrh	equ	0xFF7
  7353                           tblptrl	equ	0xFF6
  7354                           tablat	equ	0xFF5
  7355                           prodh	equ	0xFF4
  7356                           prodl	equ	0xFF3
  7357                           intcon	equ	0xFF2
  7358                           intcon2	equ	0xFF1
  7359                           postinc0	equ	0xFEE
  7360                           wreg	equ	0xFE8
  7361                           postinc1	equ	0xFE6
  7362                           postdec1	equ	0xFE5
  7363                           fsr1l	equ	0xFE1
  7364                           indf2	equ	0xFDF
  7365                           postinc2	equ	0xFDE
  7366                           postdec2	equ	0xFDD
  7367                           fsr2h	equ	0xFDA
  7368                           fsr2l	equ	0xFD9
  7369                           status	equ	0xFD8
  7370                           
  7371 ;; *************** function _AD5172_SendByte *****************
  7372 ;; Defined at:
  7373 ;;		line 91 in file "AD5172_I2C.c"
  7374 ;; Parameters:    Size  Location     Type
  7375 ;;  byte            1    wreg     unsigned char 
  7376 ;; Auto vars:     Size  Location     Type
  7377 ;;  byte            1   18[COMRAM] unsigned char 
  7378 ;; Return value:  Size  Location     Type
  7379 ;;		None               void
  7380 ;; Registers used:
  7381 ;;		wreg, status,2
  7382 ;; Tracked objects:
  7383 ;;		On entry : 0/0
  7384 ;;		On exit  : 0/0
  7385 ;;		Unchanged: 0/0
  7386 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7387 ;;      Params:         0       0       0       0       0       0       0       0       0
  7388 ;;      Locals:         1       0       0       0       0       0       0       0       0
  7389 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7390 ;;      Totals:         1       0       0       0       0       0       0       0       0
  7391 ;;Total ram usage:        1 bytes
  7392 ;; Hardware stack levels used:    1
  7393 ;; Hardware stack levels required when called:    2
  7394 ;; This function calls:
  7395 ;;		Nothing
  7396 ;; This function is called by:
  7397 ;;		_AD5172_Write
  7398 ;;		_AD5172_Set
  7399 ;;		_AD5172_Program
  7400 ;;		_AD5172_Read
  7401 ;;		_i2c_SlaveWrite
  7402 ;;		_i2c_SlaveRead
  7403 ;; This function uses a non-reentrant model
  7404 ;;
  7405                           
  7406                           	psect	text36
  7407  00155E                     __ptext36:
  7408                           	opt stack 0
  7409  00155E                     _AD5172_SendByte:
  7410                           	opt stack 27
  7411                           
  7412                           ;incstack = 0
  7413                           ;AD5172_SendByte@byte stored from wreg
  7414  00155E  6E13               	movwf	AD5172_SendByte@byte,c
  7415                           
  7416                           ;AD5172_I2C.c: 93: SSPIF = 0;
  7417  001560  969E               	bcf	3998,3,c	;volatile
  7418                           
  7419                           ;AD5172_I2C.c: 94: SSPBUF = byte;
  7420  001562  C013  FFC9         	movff	AD5172_SendByte@byte,4041	;volatile
  7421                           
  7422                           ;AD5172_I2C.c: 95: timeout=0;
  7423  001566  0E00               	movlw	0
  7424  001568  6E43               	movwf	_timeout,c
  7425  00156A                     l445:
  7426  00156A  B69E               	btfsc	3998,3,c	;volatile
  7427  00156C  D003               	goto	l449
  7428  00156E  0E09               	movlw	9
  7429  001570  6443               	cpfsgt	_timeout,c
  7430  001572  D7FB               	goto	l445
  7431  001574                     l449:
  7432                           
  7433                           ;AD5172_I2C.c: 97: if (SSPIF == 0) errorFlag=0x80;
  7434  001574  B69E               	btfsc	3998,3,c	;volatile
  7435  001576  D002               	goto	l451
  7436  001578  0E80               	movlw	128
  7437  00157A  6E41               	movwf	_errorFlag,c
  7438  00157C                     l451:
  7439  00157C  0012               	return	
  7440  00157E                     __end_of_AD5172_SendByte:
  7441                           	opt stack 0
  7442                           tblptru	equ	0xFF8
  7443                           tblptrh	equ	0xFF7
  7444                           tblptrl	equ	0xFF6
  7445                           tablat	equ	0xFF5
  7446                           prodh	equ	0xFF4
  7447                           prodl	equ	0xFF3
  7448                           intcon	equ	0xFF2
  7449                           intcon2	equ	0xFF1
  7450                           postinc0	equ	0xFEE
  7451                           wreg	equ	0xFE8
  7452                           postinc1	equ	0xFE6
  7453                           postdec1	equ	0xFE5
  7454                           fsr1l	equ	0xFE1
  7455                           indf2	equ	0xFDF
  7456                           postinc2	equ	0xFDE
  7457                           postdec2	equ	0xFDD
  7458                           fsr2h	equ	0xFDA
  7459                           fsr2l	equ	0xFD9
  7460                           status	equ	0xFD8
  7461                           
  7462 ;; *************** function _isr *****************
  7463 ;; Defined at:
  7464 ;;		line 347 in file "main.c"
  7465 ;; Parameters:    Size  Location     Type
  7466 ;;		None
  7467 ;; Auto vars:     Size  Location     Type
  7468 ;;  ch              1   17[COMRAM] unsigned char 
  7469 ;;  temp            1   16[COMRAM] unsigned char 
  7470 ;;  dummy           1   15[COMRAM] unsigned char 
  7471 ;; Return value:  Size  Location     Type
  7472 ;;		None               void
  7473 ;; Registers used:
  7474 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7475 ;; Tracked objects:
  7476 ;;		On entry : 0/0
  7477 ;;		On exit  : 0/0
  7478 ;;		Unchanged: 0/0
  7479 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7480 ;;      Params:         0       0       0       0       0       0       0       0       0
  7481 ;;      Locals:         3       0       0       0       0       0       0       0       0
  7482 ;;      Temps:         14       0       0       0       0       0       0       0       0
  7483 ;;      Totals:        17       0       0       0       0       0       0       0       0
  7484 ;;Total ram usage:       17 bytes
  7485 ;; Hardware stack levels used:    1
  7486 ;; Hardware stack levels required when called:    1
  7487 ;; This function calls:
  7488 ;;		_toupper
  7489 ;; This function is called by:
  7490 ;;		Interrupt level 2
  7491 ;; This function uses a non-reentrant model
  7492 ;;
  7493                           
  7494                           	psect	intcode
  7495  000008                     __pintcode:
  7496                           	opt stack 0
  7497  000008                     _isr:
  7498                           	opt stack 26
  7499                           
  7500                           ;incstack = 0
  7501  000008  CFFA F002          	movff	pclath,??_isr
  7502  00000C  CFFB F003          	movff	pclatu,??_isr+1
  7503  000010  CFE9 F004          	movff	fsr0l,??_isr+2
  7504  000014  ED82  F006         	call	int_func,f	;refresh shadow registers
  7505                           pclatu	equ	0xFFB
  7506                           pclath	equ	0xFFA
  7507                           tblptru	equ	0xFF8
  7508                           tblptrh	equ	0xFF7
  7509                           tblptrl	equ	0xFF6
  7510                           tablat	equ	0xFF5
  7511                           prodh	equ	0xFF4
  7512                           prodl	equ	0xFF3
  7513                           intcon	equ	0xFF2
  7514                           intcon2	equ	0xFF1
  7515                           postinc0	equ	0xFEE
  7516                           fsr0l	equ	0xFE9
  7517                           wreg	equ	0xFE8
  7518                           postinc1	equ	0xFE6
  7519                           postdec1	equ	0xFE5
  7520                           fsr1l	equ	0xFE1
  7521                           indf2	equ	0xFDF
  7522                           postinc2	equ	0xFDE
  7523                           postdec2	equ	0xFDD
  7524                           fsr2h	equ	0xFDA
  7525                           fsr2l	equ	0xFD9
  7526                           status	equ	0xFD8
  7527                           
  7528                           	psect	intcode_body
  7529  000D04                     __pintcode_body:
  7530                           	opt stack 26
  7531  000D04                     int_func:
  7532                           	opt stack 26
  7533  000D04  0006               	pop		; remove dummy address from shadow register refresh
  7534  000D06  CFEA F005          	movff	fsr0h,??_isr+3
  7535  000D0A  CFE1 F006          	movff	fsr1l,??_isr+4
  7536  000D0E  CFE2 F007          	movff	fsr1h,??_isr+5
  7537  000D12  CFD9 F008          	movff	fsr2l,??_isr+6
  7538  000D16  CFDA F009          	movff	fsr2h,??_isr+7
  7539  000D1A  CFF3 F00A          	movff	prodl,??_isr+8
  7540  000D1E  CFF4 F00B          	movff	prodh,??_isr+9
  7541  000D22  CFF6 F00C          	movff	tblptrl,??_isr+10
  7542  000D26  CFF7 F00D          	movff	tblptrh,??_isr+11
  7543  000D2A  CFF8 F00E          	movff	tblptru,??_isr+12
  7544  000D2E  CFF5 F00F          	movff	tablat,??_isr+13
  7545                           
  7546                           ;main.c: 349: unsigned char dummy, ch, temp;
  7547                           ;main.c: 350: static unsigned char i=0;
  7548                           ;main.c: 352: if (OERR == 1)
  7549  000D32  A2AB               	btfss	4011,1,c	;volatile
  7550  000D34  D006               	goto	i2l247
  7551                           
  7552                           ;main.c: 353: {
  7553                           ;main.c: 354: CREN = 0;
  7554  000D36  98AB               	bcf	4011,4,c	;volatile
  7555                           
  7556                           ;main.c: 355: CREN = 1;
  7557  000D38  88AB               	bsf	4011,4,c	;volatile
  7558                           
  7559                           ;main.c: 356: dummy = RCREG;
  7560  000D3A  CFAE F010          	movff	4014,isr@dummy	;volatile
  7561                           
  7562                           ;main.c: 357: dummy = RCREG;
  7563  000D3E  CFAE F010          	movff	4014,isr@dummy	;volatile
  7564  000D42                     i2l247:
  7565                           
  7566                           ;main.c: 358: }
  7567                           ;main.c: 360: if (RCIF == 1)
  7568  000D42  AA9E               	btfss	3998,5,c	;volatile
  7569  000D44  D026               	goto	i2l3680
  7570                           
  7571                           ;main.c: 361: {
  7572                           ;main.c: 362: RCIF = 0;
  7573  000D46  9A9E               	bcf	3998,5,c	;volatile
  7574                           
  7575                           ;main.c: 363: temp = RCREG;
  7576  000D48  CFAE F011          	movff	4014,isr@temp	;volatile
  7577                           
  7578                           ;main.c: 364: ch=toupper(temp);
  7579  000D4C  5011               	movf	isr@temp,w,c
  7580  000D4E  ECDB  F00A         	call	_toupper
  7581  000D52  6E12               	movwf	isr@ch,c
  7582                           
  7583                           ;main.c: 366: if('>'==ch)i=0;
  7584  000D54  5012               	movf	isr@ch,w,c
  7585  000D56  0A3E               	xorlw	62
  7586  000D58  A4D8               	btfss	status,2,c
  7587  000D5A  D002               	goto	i2l3670
  7588  000D5C  0E00               	movlw	0
  7589  000D5E  6E44               	movwf	isr@i,c
  7590  000D60                     i2l3670:
  7591                           
  7592                           ;main.c: 368: if(i<64)
  7593  000D60  0E40               	movlw	64
  7594  000D62  5C44               	subwf	isr@i,w,c
  7595  000D64  B0D8               	btfsc	status,0,c
  7596  000D66  D00D               	goto	i2l3676
  7597                           
  7598                           ;main.c: 369: {
  7599                           ;main.c: 370: UARTbuffer[i]=ch;
  7600  000D68  5044               	movf	isr@i,w,c
  7601  000D6A  0D01               	mullw	1
  7602  000D6C  0101               	movlb	1	; () banked
  7603  000D6E  0E00               	movlw	low _UARTbuffer
  7604  000D70  24F3               	addwf	prodl,w,c
  7605  000D72  6ED9               	movwf	fsr2l,c
  7606  000D74  0101               	movlb	1	; () banked
  7607  000D76  0E01               	movlw	high _UARTbuffer
  7608  000D78  20F4               	addwfc	prodh,w,c
  7609  000D7A  6EDA               	movwf	fsr2h,c
  7610  000D7C  C012  FFDF         	movff	isr@ch,indf2
  7611                           
  7612                           ; BSR set to: 1
  7613                           ;main.c: 371: i++;
  7614  000D80  2A44               	incf	isr@i,f,c
  7615  000D82                     i2l3676:
  7616                           
  7617                           ;main.c: 372: }
  7618                           ;main.c: 374: if('\r'==ch)
  7619  000D82  5012               	movf	isr@ch,w,c
  7620  000D84  0A0D               	xorlw	13
  7621  000D86  A4D8               	btfss	status,2,c
  7622  000D88  D004               	goto	i2l3680
  7623                           
  7624                           ;main.c: 375: {
  7625                           ;main.c: 376: i = 0;
  7626  000D8A  0E00               	movlw	0
  7627  000D8C  6E44               	movwf	isr@i,c
  7628                           
  7629                           ;main.c: 377: UARTflag = TRUE;
  7630  000D8E  0E01               	movlw	1
  7631  000D90  6E3F               	movwf	_UARTflag,c
  7632  000D92                     i2l3680:
  7633                           
  7634                           ;main.c: 378: }
  7635                           ;main.c: 379: }
  7636                           ;main.c: 382: if(1==TMR1IF)
  7637  000D92  A09E               	btfss	3998,0,c	;volatile
  7638  000D94  D002               	goto	i2l253
  7639                           
  7640                           ;main.c: 383: {
  7641                           ;main.c: 384: TMR1IF=0;
  7642  000D96  909E               	bcf	3998,0,c	;volatile
  7643                           
  7644                           ;main.c: 385: timeout++;
  7645  000D98  2A43               	incf	_timeout,f,c
  7646  000D9A                     i2l253:
  7647  000D9A  C00F  FFF5         	movff	??_isr+13,tablat
  7648  000D9E  C00E  FFF8         	movff	??_isr+12,tblptru
  7649  000DA2  C00D  FFF7         	movff	??_isr+11,tblptrh
  7650  000DA6  C00C  FFF6         	movff	??_isr+10,tblptrl
  7651  000DAA  C00B  FFF4         	movff	??_isr+9,prodh
  7652  000DAE  C00A  FFF3         	movff	??_isr+8,prodl
  7653  000DB2  C009  FFDA         	movff	??_isr+7,fsr2h
  7654  000DB6  C008  FFD9         	movff	??_isr+6,fsr2l
  7655  000DBA  C007  FFE2         	movff	??_isr+5,fsr1h
  7656  000DBE  C006  FFE1         	movff	??_isr+4,fsr1l
  7657  000DC2  C005  FFEA         	movff	??_isr+3,fsr0h
  7658  000DC6  C004  FFE9         	movff	??_isr+2,fsr0l
  7659  000DCA  C003  FFFB         	movff	??_isr+1,pclatu
  7660  000DCE  C002  FFFA         	movff	??_isr,pclath
  7661  000DD2  0011               	retfie		f
  7662  000DD4                     __end_of_isr:
  7663                           	opt stack 0
  7664                           pclatu	equ	0xFFB
  7665                           pclath	equ	0xFFA
  7666                           tblptru	equ	0xFF8
  7667                           tblptrh	equ	0xFF7
  7668                           tblptrl	equ	0xFF6
  7669                           tablat	equ	0xFF5
  7670                           prodh	equ	0xFF4
  7671                           prodl	equ	0xFF3
  7672                           intcon	equ	0xFF2
  7673                           intcon2	equ	0xFF1
  7674                           postinc0	equ	0xFEE
  7675                           fsr0h	equ	0xFEA
  7676                           fsr0l	equ	0xFE9
  7677                           wreg	equ	0xFE8
  7678                           postinc1	equ	0xFE6
  7679                           postdec1	equ	0xFE5
  7680                           fsr1h	equ	0xFE2
  7681                           fsr1l	equ	0xFE1
  7682                           indf2	equ	0xFDF
  7683                           postinc2	equ	0xFDE
  7684                           postdec2	equ	0xFDD
  7685                           fsr2h	equ	0xFDA
  7686                           fsr2l	equ	0xFD9
  7687                           status	equ	0xFD8
  7688                           
  7689 ;; *************** function _toupper *****************
  7690 ;; Defined at:
  7691 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\toupper.c"
  7692 ;; Parameters:    Size  Location     Type
  7693 ;;  c               1    wreg     unsigned char 
  7694 ;; Auto vars:     Size  Location     Type
  7695 ;;  c               1    0[COMRAM] unsigned char 
  7696 ;; Return value:  Size  Location     Type
  7697 ;;                  1    wreg      unsigned char 
  7698 ;; Registers used:
  7699 ;;		wreg, status,2, status,0
  7700 ;; Tracked objects:
  7701 ;;		On entry : 0/0
  7702 ;;		On exit  : 0/0
  7703 ;;		Unchanged: 0/0
  7704 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7705 ;;      Params:         0       0       0       0       0       0       0       0       0
  7706 ;;      Locals:         1       0       0       0       0       0       0       0       0
  7707 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7708 ;;      Totals:         1       0       0       0       0       0       0       0       0
  7709 ;;Total ram usage:        1 bytes
  7710 ;; Hardware stack levels used:    1
  7711 ;; This function calls:
  7712 ;;		Nothing
  7713 ;; This function is called by:
  7714 ;;		_isr
  7715 ;; This function uses a non-reentrant model
  7716 ;;
  7717                           
  7718                           	psect	text38
  7719  0015B6                     __ptext38:
  7720                           	opt stack 0
  7721  0015B6                     _toupper:
  7722                           	opt stack 26
  7723                           
  7724                           ;incstack = 0
  7725                           ;toupper@c stored from wreg
  7726  0015B6  6E01               	movwf	toupper@c,c
  7727  0015B8  0E7B               	movlw	123
  7728  0015BA  5C01               	subwf	toupper@c,w,c
  7729  0015BC  B0D8               	btfsc	status,0,c
  7730  0015BE  D004               	goto	i2l3420
  7731  0015C0  0E60               	movlw	96
  7732  0015C2  6401               	cpfsgt	toupper@c,c
  7733  0015C4  D001               	goto	i2l3420
  7734  0015C6  9A01               	bcf	toupper@c,5,c
  7735  0015C8                     i2l3420:
  7736  0015C8  5001               	movf	toupper@c,w,c
  7737  0015CA  0012               	return	
  7738  0015CC                     __end_of_toupper:
  7739                           	opt stack 0
  7740                           pclatu	equ	0xFFB
  7741                           pclath	equ	0xFFA
  7742                           tblptru	equ	0xFF8
  7743                           tblptrh	equ	0xFF7
  7744                           tblptrl	equ	0xFF6
  7745                           tablat	equ	0xFF5
  7746                           prodh	equ	0xFF4
  7747                           prodl	equ	0xFF3
  7748                           intcon	equ	0xFF2
  7749                           intcon2	equ	0xFF1
  7750                           postinc0	equ	0xFEE
  7751                           fsr0h	equ	0xFEA
  7752                           fsr0l	equ	0xFE9
  7753                           wreg	equ	0xFE8
  7754                           postinc1	equ	0xFE6
  7755                           postdec1	equ	0xFE5
  7756                           fsr1h	equ	0xFE2
  7757                           fsr1l	equ	0xFE1
  7758                           indf2	equ	0xFDF
  7759                           postinc2	equ	0xFDE
  7760                           postdec2	equ	0xFDD
  7761                           fsr2h	equ	0xFDA
  7762                           fsr2l	equ	0xFD9
  7763                           status	equ	0xFD8
  7764                           pclatu	equ	0xFFB
  7765                           pclath	equ	0xFFA
  7766                           tblptru	equ	0xFF8
  7767                           tblptrh	equ	0xFF7
  7768                           tblptrl	equ	0xFF6
  7769                           tablat	equ	0xFF5
  7770                           prodh	equ	0xFF4
  7771                           prodl	equ	0xFF3
  7772                           intcon	equ	0xFF2
  7773                           intcon2	equ	0xFF1
  7774                           postinc0	equ	0xFEE
  7775                           fsr0h	equ	0xFEA
  7776                           fsr0l	equ	0xFE9
  7777                           wreg	equ	0xFE8
  7778                           postinc1	equ	0xFE6
  7779                           postdec1	equ	0xFE5
  7780                           fsr1h	equ	0xFE2
  7781                           fsr1l	equ	0xFE1
  7782                           indf2	equ	0xFDF
  7783                           postinc2	equ	0xFDE
  7784                           postdec2	equ	0xFDD
  7785                           fsr2h	equ	0xFDA
  7786                           fsr2l	equ	0xFD9
  7787                           status	equ	0xFD8
  7788                           
  7789                           	psect	rparam
  7790  0000                     pclatu	equ	0xFFB
  7791                           pclath	equ	0xFFA
  7792                           tblptru	equ	0xFF8
  7793                           tblptrh	equ	0xFF7
  7794                           tblptrl	equ	0xFF6
  7795                           tablat	equ	0xFF5
  7796                           prodh	equ	0xFF4
  7797                           prodl	equ	0xFF3
  7798                           intcon	equ	0xFF2
  7799                           intcon2	equ	0xFF1
  7800                           postinc0	equ	0xFEE
  7801                           fsr0h	equ	0xFEA
  7802                           fsr0l	equ	0xFE9
  7803                           wreg	equ	0xFE8
  7804                           postinc1	equ	0xFE6
  7805                           postdec1	equ	0xFE5
  7806                           fsr1h	equ	0xFE2
  7807                           fsr1l	equ	0xFE1
  7808                           indf2	equ	0xFDF
  7809                           postinc2	equ	0xFDE
  7810                           postdec2	equ	0xFDD
  7811                           fsr2h	equ	0xFDA
  7812                           fsr2l	equ	0xFD9
  7813                           status	equ	0xFD8


Data Sizes:
    Strings     641
    Constant    10
    Data        69
    BSS         205
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     57      72
    BANK0           160     87     151
    BANK1           256      0     195
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    strcmp@s2	PTR const unsigned char  size(2) Largest target is 32
		 -> parseInString@alphaString(BANK0[32]), 

    strcmp@s1	PTR const unsigned char  size(2) Largest target is 15
		 -> STR_42(CODE[5]), STR_41(CODE[14]), STR_40(CODE[15]), STR_39(CODE[4]), 
		 -> STR_38(CODE[4]), STR_37(CODE[5]), STR_36(CODE[4]), STR_35(CODE[5]), 
		 -> STR_34(CODE[5]), STR_33(CODE[5]), STR_32(CODE[5]), STR_31(CODE[4]), 
		 -> STR_30(CODE[6]), 

    atoi@s	PTR const unsigned char  size(2) Largest target is 32
		 -> parseInString@numString(BANK0[32]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 74
		 -> STR_29(CODE[26]), STR_28(CODE[30]), STR_27(CODE[31]), STR_26(CODE[13]), 
		 -> STR_25(CODE[24]), STR_24(CODE[24]), STR_23(CODE[11]), STR_22(CODE[19]), 
		 -> STR_21(CODE[27]), STR_20(CODE[11]), STR_19(CODE[36]), STR_18(CODE[36]), 
		 -> STR_17(CODE[11]), STR_16(CODE[19]), STR_15(CODE[11]), STR_14(CODE[36]), 
		 -> STR_13(CODE[36]), STR_12(CODE[11]), STR_11(CODE[19]), STR_10(CODE[12]), 
		 -> STR_9(CODE[19]), STR_8(CODE[19]), STR_7(CODE[20]), STR_6(CODE[16]), 
		 -> STR_5(CODE[17]), STR_4(CODE[16]), STR_3(CODE[21]), STR_2(CODE[62]), 
		 -> STR_1(CODE[74]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 

    S738$_cp	PTR const unsigned char  size(2) Largest target is 0

    _val._str._cp	PTR const unsigned char  size(2) Largest target is 0


Critical Paths under _main in COMRAM

    _main->_printf
    _turnCompressorOn->_DelayMs
    _turnCompressorOff->_DelayMs
    _setMultiplexerAndBankRelays->___awdiv
    _printf->___lwmod
    ___lwmod->___lwdiv
    _parseInString->_atoi
    _isalpha->_isupper
    _atoi->___wmul
    _i2c_SlaveWrite->_AD5172_SendByte
    _i2c_SlaveWrite->_get_Acknowledge
    _i2c_SlaveRead->_AD5172_ReceiveByte
    _AD5172_Write->_AD5172_SendByte
    _AD5172_Write->_get_Acknowledge
    _AD5172_Set->_AD5172_SendByte
    _AD5172_Set->_get_Acknowledge
    _AD5172_Read->_AD5172_ReceiveByte
    _AD5172_Program->_AD5172_SendByte
    _AD5172_Program->_get_Acknowledge

Critical Paths under _isr in COMRAM

    _isr->_toupper

Critical Paths under _main in BANK0

    _main->_parseInString

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _isr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _isr in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                18    18      0   19140
                                             56 COMRAM     1     1      0
                                             72 BANK0     15    15      0
                     _AD5172_Program
                        _AD5172_Read
                         _AD5172_Set
                        _AD5172_Stop
                       _AD5172_Write
                           _Busy_eep
                            _DelayMs
                         _Read_b_eep
                        _Write_b_eep
                      _i2c_SlaveRead
                     _i2c_SlaveWrite
                    _initializePorts
                     _initialize_I2C
                      _parseInString
                             _printf
        _setMultiplexerAndBankRelays
                   _setProgramSupply
                  _turnCompressorOff
                   _turnCompressorOn
 ---------------------------------------------------------------------------------
 (1) _turnCompressorOn                                     0     0      0    1689
                           _Busy_eep
                            _DelayMs
                        _Write_b_eep
 ---------------------------------------------------------------------------------
 (1) _turnCompressorOff                                    0     0      0    1689
                           _Busy_eep
                            _DelayMs
                        _Write_b_eep
 ---------------------------------------------------------------------------------
 (2) _Write_b_eep                                          4     1      3     715
                                             18 COMRAM     4     1      3
 ---------------------------------------------------------------------------------
 (2) _Busy_eep                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _setProgramSupply                                     1     1      0      62
                                             18 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _setMultiplexerAndBankRelays                         18    16      2    2257
                                             26 COMRAM    16    14      2
                            _DelayMs
                            ___awdiv
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4     599
                                             18 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (2) _DelayMs                                              5     3      2     974
                                             18 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (1) _printf                                              26    12     14    3676
                                             30 COMRAM    26    12     14
                            ___lwdiv
                            ___lwmod
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0      31
                                             18 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     386
                                             25 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     395
                                             18 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) _parseInString                                       72    72      0    5697
                                              0 BANK0     72    72      0
                               _atoi
                            _isalpha
                            _isdigit
                            _ispunct
                            _isspace
                             _strcmp
 ---------------------------------------------------------------------------------
 (2) _strcmp                                               6     2      4    2135
                                             18 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) _isspace                                              3     3      0     130
                                             18 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) _ispunct                                              1     1      0     248
                                             18 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _isalpha                                              3     3      0     229
                                             21 COMRAM     3     3      0
                            _isupper
 ---------------------------------------------------------------------------------
 (3) _isupper                                              3     3      0      99
                                             18 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) _atoi                                                 7     5      2     896
                                             24 COMRAM     7     5      2
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      99
                                             18 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     386
                                             18 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) _initialize_I2C                                       0     0      0       0
                        _AD5172_Stop
 ---------------------------------------------------------------------------------
 (1) _initializePorts                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _i2c_SlaveWrite                                       4     3      1     306
                                             19 COMRAM     4     3      1
                    _AD5172_SendByte
                       _AD5172_Start
                        _AD5172_Stop
                    _get_Acknowledge
 ---------------------------------------------------------------------------------
 (1) _i2c_SlaveRead                                        3     2      1     399
                                             21 COMRAM     3     2      1
                 _AD5172_ReceiveByte
                    _AD5172_SendByte
                       _AD5172_Start
                        _AD5172_Stop
                    _get_Acknowledge
                   _send_Acknowledge
 ---------------------------------------------------------------------------------
 (1) _Read_b_eep                                           2     0      2     108
                                             18 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _AD5172_Write                                         3     2      1     244
                                             19 COMRAM     3     2      1
                    _AD5172_SendByte
                       _AD5172_Start
                        _AD5172_Stop
                    _get_Acknowledge
 ---------------------------------------------------------------------------------
 (1) _AD5172_Set                                           2     2      0     136
                                             19 COMRAM     2     2      0
                    _AD5172_SendByte
                       _AD5172_Start
                        _AD5172_Stop
                    _get_Acknowledge
 ---------------------------------------------------------------------------------
 (1) _AD5172_Read                                          7     5      2     263
                                             21 COMRAM     7     5      2
                 _AD5172_ReceiveByte
                    _AD5172_SendByte
                       _AD5172_Start
                        _AD5172_Stop
                    _get_Acknowledge
                   _send_Acknowledge
 ---------------------------------------------------------------------------------
 (2) _send_Acknowledge                                     1     1      0      31
                                             18 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _AD5172_ReceiveByte                                   3     1      2      34
                                             18 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (1) _AD5172_Program                                       2     2      0     136
                                             19 COMRAM     2     2      0
                    _AD5172_SendByte
                       _AD5172_Start
                        _AD5172_Stop
                    _get_Acknowledge
 ---------------------------------------------------------------------------------
 (2) _get_Acknowledge                                      1     1      0      34
                                             18 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _AD5172_Stop                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _AD5172_Start                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _AD5172_SendByte                                      1     1      0      31
                                             18 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _isr                                                 17    17      0     159
                                              1 COMRAM    17    17      0
                            _toupper
 ---------------------------------------------------------------------------------
 (5) _toupper                                              1     1      0      67
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _AD5172_Program
     _AD5172_SendByte
     _AD5172_Start
     _AD5172_Stop
     _get_Acknowledge
   _AD5172_Read
     _AD5172_ReceiveByte
     _AD5172_SendByte
     _AD5172_Start
     _AD5172_Stop
     _get_Acknowledge
     _send_Acknowledge
   _AD5172_Set
     _AD5172_SendByte
     _AD5172_Start
     _AD5172_Stop
     _get_Acknowledge
   _AD5172_Stop
   _AD5172_Write
     _AD5172_SendByte
     _AD5172_Start
     _AD5172_Stop
     _get_Acknowledge
   _Busy_eep
   _DelayMs
   _Read_b_eep
   _Write_b_eep
   _i2c_SlaveRead
     _AD5172_ReceiveByte
     _AD5172_SendByte
     _AD5172_Start
     _AD5172_Stop
     _get_Acknowledge
     _send_Acknowledge
   _i2c_SlaveWrite
     _AD5172_SendByte
     _AD5172_Start
     _AD5172_Stop
     _get_Acknowledge
   _initializePorts
   _initialize_I2C
     _AD5172_Stop
   _parseInString
     _atoi
       ___wmul
       _isdigit
     _isalpha
       _isupper
     _isdigit
     _ispunct
     _isspace
     _strcmp
   _printf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     _putch
   _setMultiplexerAndBankRelays
     _DelayMs
     ___awdiv
   _setProgramSupply
   _turnCompressorOff
     _Busy_eep
     _DelayMs
     _Write_b_eep
   _turnCompressorOn
     _Busy_eep
     _DelayMs
     _Write_b_eep

 _isr (ROOT)
   _toupper

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      C3       7       76.2%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     57      97       5       94.4%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     39      48       1       75.8%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     1A2      20        0.0%
DATA                 0      0     1A2       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.33 build 59893 
Symbol Table                                                                                   Sat Jun 20 05:15:29 2020

                         ?_i2c_SlaveRead 0016                __size_of_setProgramSupply 0036  
                           ___awdiv@sign 0018                              __CFG_BOR$ON 000000  
                    ___wmul@multiplicand 0015                              __CFG_BORV$3 000000  
                        ?_i2c_SlaveWrite 0014                             __CFG_CP0$OFF 000000  
                           __CFG_CP1$OFF 000000                             __CFG_CP2$OFF 000000  
                           __CFG_CP3$OFF 000000                              __CFG_LVP$ON 000000  
                            __CFG_WDT$ON 000000                                      l203 07AA  
                                    l214 0858                                      l341 1400  
                                    l173 05B6                                      l350 0A60  
                                    l431 1590                                      l175 05B8  
                                    l440 15AC                                      l256 15F2  
                                    l352 0BAA                                      l176 05EA  
                                    l433 1598                                      l193 070E  
                                    l442 15B4                                      l178 061A  
                                    l451 157C                                      l427 1586  
                                    l267 053C                                      l339 13F6  
                                    l436 15A2                                      l276 00D0  
                                    l445 156A                                      l461 1478  
                                    l373 1226                                      l470 150A  
                                    l463 1480                                      l543 1608  
                                    l449 1574                                      l457 146E  
                                    l466 1500                                      l538 0D02  
                                    l570 13BA               __end_of_AD5172_ReceiveByte 151E  
                                    l758 0E94                                      l759 0E9C  
                                    _GIE 007F97                             __CFG_CPB$OFF 000000  
                                    _PEN 007E2A                             __CFG_CPD$OFF 000000  
                                    _SEN 007E28                                      _RX9 007D5E  
                                    _TX9 007D66                                      _isr 0008  
                   __size_of_Write_b_eep 0038                                      prod 000FF3  
                                    wreg 000FE8                             __CFG_FOSC$HS 000000  
   setMultiplexerAndBankRelays@remainder 001F      setMultiplexerAndBankRelays@quotient 0024  
                            main@inByte1 00A9                              main@inByte2 00AB  
                            main@inByte3 00AD                              main@inByte4 00AF  
                            main@inByte5 00B1                              main@command 00B6  
                                   l1035 131E                                     l1137 1180  
                                   l1147 1298                                     l4100 0C9C  
                                   l4104 0CE4                                     l4106 0CEC  
                                   l4300 0402                                     l4060 0BCC  
                                   l4222 01E4                                     l4206 0160  
                                   l4070 0C14                                     l4054 0BB6  
                                   l4312 046E                                     l4304 0426  
                                   l4320 04C6                                     l4232 0226  
                                   l4216 01C4                                     l4160 00B6  
                                   l4152 009E                                     l4144 0088  
                                   l4080 0C4C                                     l4064 0BE0  
                                   l4048 13EA                                     l4226 01F6  
                                   l4234 022C                                     l4058 0BC6  
                                   l4402 0A96                                     l4500 11F6  
                                   l4332 050A                                     l4316 0496  
                                   l4308 044A                                     l4340 0520  
                                   l4164 00C2                                     l4156 00AA  
                                   l4068 0BE8                                     l4238 023E  
                                   l4174 00E4                                     l4094 0C84  
                                   l4600 112A                                     l4280 0344  
                                   l4272 02FC                                     l4256 0276  
                                   l4248 0268                                     l4176 00F0  
                                   l3810 1426                                     l4338 0518  
                                   l4346 0538                                     l4098 0C96  
                                   l4532 106C                                     l3716 1536  
                                   l4292 03BA                                     l4284 0368  
                                   l4276 0320                                     l4268 02D8  
                                   l4188 0128                                     l4622 10D0  
                                   l4614 10A2                                     l3806 1418  
                                   l3830 12F2                                     l3822 11C8  
                                   l4198 0152                                     l3750 123C  
                                   l4470 0B84                                     l4454 0B64  
                                   l4438 0B44                                     l4382 0A3C  
                                   l4390 0A6A                                     l4710 0652  
                                   l4528 1060                                     l4624 10D6  
                                   l3816 118C                                     l4296 03DE  
                                   l4288 0390                                     l3752 1246  
                                   l3920 0EC2                                     l4800 0880  
                                   l3906 1512                                     l4554 1342  
                                   l3834 12FE                                     l3842 1318  
                                   l3818 1194                                     l3746 1228  
                                   l4386 0A4E                                     l4378 0A2C  
                                   l4802 088E                                     l4730 06B6  
                                   l4722 068A                                     l3860 1450  
                                   l3748 1232                                     l3756 1252  
                                   l3932 0EF8                                     l4716 066E  
                                   l4724 0698                                     l4574 137C  
                                   l3790 0E28                                     l3774 0DD6  
                                   l3846 131C                                     l3838 130A  
                                   l3934 0F00                                     l3926 0EE2  
                                   l4822 08FE                                     l4814 08C6  
                                   l4750 0730                                     l4742 06F2  
                                   l4592 1102                                     l3776 0DDA  
                                   l3952 0F38                                     l3944 0F20  
                                   l3936 0F04                                     l4832 093E  
                                   l4808 08AA                                     l4736 06D4  
                                   l3698 1556                                     l3794 0E62  
                                   l3786 0E18                                     l3858 144C  
                                   l3962 114E                                     l4818 08DA  
                                   l4826 0924                                     l4762 0768  
                                   l3964 1156                                     l3948 0F2A  
                                   l4860 0A0E                                     l3974 1176  
                                   l3966 115A                                     l3990 128E  
                                   l3982 126E                                     l4838 0960  
                                   l4774 07D2                                     l4758 0752  
                                   l3984 1276                                     l4784 0800  
                                   l4768 0780                                     l4776 07E0  
                                   l3986 127A                                     l4858 09FC  
                                   l4794 082E                                     l4698 061E  
                                   l4788 0816                                     ?_isr 0001  
                                   STR_1 7D7D                                     STR_2 7DC7  
                                   STR_3 7EEF                                     STR_4 7F62  
                                   STR_5 7F51                                     STR_6 7F72  
                                   STR_7 7F04                                     STR_8 7F18  
                                   STR_9 7F3E                                     _BRGH 007D62  
                                   _CREN 007D5C                                     u4015 1462  
                                   u4016 1468                                     u4301 0026  
                                   u4311 0038                                     _PIE1 000F9D  
                       ??_initialize_I2C 0013                                     u3635 13C6  
                                   _PEIE 007F96                                     u3636 13C8  
                                   u4710 0514                                     _RCIE 007CED  
                                   _RCIF 007CF5                                     _RCEN 007E2B  
                                   u4790 0A8E                                     _OERR 007D59  
                                   _RBPU 007F8F                                     _SPEN 007D5F  
                                   _SREN 007D5D                                     _TXIE 007CEC  
                                   _TXIF 007CF4                                     _TXEN 007D65  
                                   _SYNC 007D64                             __CFG_PWRT$ON 000000  
                                   _atoi 0DD4                                     _main 053E  
                                   fsr0h 000FEA                                     fsr1h 000FE2  
                                   fsr0l 000FE9                                     fsr2h 000FDA  
                                   fsr1l 000FE1                                     indf2 000FDF  
                                   fsr2l 000FD9                                     isr@i 0044  
                                   pclat 000FFA                                     prodh 000FF4  
                                   prodl 000FF3                                     start 0018  
                          __CFG_IESO$OFF 000000                          __end_of_DelayMs 1260  
                          __CFG_ICPRT$ON 000000                       get_Acknowledge@ack 0013  
                          __CFG_MCLRE$ON 000000                AD5172_Set@instructionByte 0015  
                           ??_AD5172_Set 0014                                    ??_isr 0002  
                          __CFG_PLLDIV$1 000000                  __end_of_get_Acknowledge 1608  
                         __CFG_CCP2MX$ON 000000            AD5172_Program@instructionByte 0015  
                                  ?_atoi 0019                                    ?_main 0001  
                                  _ACKEN 007E2C                                    _ACKDT 007E2D  
                        __end_of___awdiv 0F42                                    _EEADR 000FA9  
                                  STR_10 7FAC                                    STR_11 7F2B  
                                  STR_20 7FB8                                    STR_12 7FC3  
                                  STR_21 7E8A                                    STR_13 7E05  
                                  STR_22 7F2B                                    STR_30 7FCE  
                                  STR_14 7E29                                    STR_23 7FC3  
                                  STR_31 7FF6                                    STR_15 7FB8  
                                  STR_16 7F2B                                    STR_32 7FDE  
                                  STR_40 7F82                                    STR_24 7EBF  
                                  STR_17 7FC3                                    STR_33 7FE3  
                                  STR_41 7F91                                    STR_25 7ED7  
                                  STR_18 7E05                                    STR_42 7FED  
                                  STR_34 7FD4                                    STR_26 7F9F  
                                  STR_19 7E29                                    STR_35 7FD9  
                                  STR_27 7E4D                                    STR_36 7FFA  
                                  STR_28 7E6C                                    STR_37 7FE8  
                                  STR_29 7EA5                                    STR_38 7F8D  
                                  STR_39 7FF2                          ___awdiv@divisor 0015  
                                  _T1CON 000FCD                          __end_of___lwdiv 118A  
                        __end_of___lwmod 12A2                                    i2l253 0D9A  
                                  i2l247 0D42                          ___awdiv@counter 0017  
                                  _RCREG 000FAE                  AD5172_Program@potSelect 0014  
                                  _SPBRG 000FAF                                    _PORTA 000F80  
                                  _PORTC 000F82                                    _PORTD 000F83  
                                  _PORTE 000F84                            __CFG_USBDIV$1 000000  
                                  _TRISA 000F92                                    _TRISB 000F93  
                                  _TRISC 000F94                                    _TRISD 000F95  
                                  _SSPIE 007CEB                                    _TRISE 000F96  
                                  _SSPIF 007CF3                                    _TXREG 000FAD  
                          __CFG_WRT0$OFF 000000                            __CFG_WRT1$OFF 000000  
                          __CFG_WRT2$OFF 000000                            __CFG_WRT3$OFF 000000  
                      ??_initializePorts 0013                           __CFG_EBTR0$OFF 000000  
                         __CFG_FCMEN$OFF 000000                           __CFG_EBTR1$OFF 000000  
                         __CFG_EBTR2$OFF 000000                           __CFG_EBTR3$OFF 000000  
                          __CFG_WRTB$OFF 000000                            __CFG_WRTC$OFF 000000  
                          __CFG_WRTD$OFF 000000                           Read_b_eep@badd 0013  
                         __CFG_EBTRB$OFF 000000                          __end_of_dpowers 7D7D  
                 Write_b_eep@GIE_BIT_VAL 0016                          __end_of_isalpha 142E  
                        __end_of_isdigit 155E                                    atoi@a 001E  
                                  atoi@s 0019                                    _putch 15F0  
                        __end_of_isspace 1458                             main@testByte 00A8  
              __size_of_send_Acknowledge 002A                                    isr@ch 0012  
                        __end_of_ispunct 1320                          __end_of_isupper 153E  
                                  tablat 000FF5                       __end_of_AD5172_Set 135A  
                                  status 000FD8                          __end_of_toupper 15CC  
                         __CFG_PBADEN$ON 000000                          ??_i2c_SlaveRead 0017  
                        __initialization 0FB4                             __end_of_atoi 0E9E  
                           __end_of_main 0A1C                __size_of_turnCompressorOn 0028  
                             _Read_b_eep 15DE                         __end_of_Busy_eep 160E  
                          ??_AD5172_Read 0018                                   ??_atoi 001B  
                                 ??_main 0039                            ??_AD5172_Stop 0013  
                          __activetblptr 000002                                   _ADCON0 000FC2  
                                 _ADCON1 000FC1                                   _ADCON2 000FC0  
                                 _EEDATA 000FA8                                   _EECON2 000FA7  
                       ___awdiv@dividend 0013                                   ?_putch 0001  
                                 i2l3420 15C8                                   i2l3670 0D60  
                                 i2l3680 0D92                                   i2l3676 0D82  
                                 _INTCON 000FF2                                ??_DelayMs 0015  
                                 _TMR1IE 007CE8                                   _TMR1IF 007CF0  
                                 _TMR1CS 007E69                                   _TMR2IE 007CE9  
                                 _TMR1ON 007E68                                   _SSPADD 000FC8  
                                 _SSPBUF 000FC9                           __CFG_VREGEN$ON 000000  
                          main@inputData 00B4                                   ___wmul 14D2  
                              ??___awdiv 0017                           __CFG_STVREN$ON 000000  
                              ??___lwdiv 0017                                ??___lwmod 001E  
                       _setProgramSupply 13CC                                   clear_0 0FBA  
                                 clear_1 0FC6                                   clear_2 0FD2  
                       ___awdiv@quotient 0019                         ?_get_Acknowledge 0001  
                                 _printf 0BAC                         ??_AD5172_Program 0014  
                                 _strcmp 118A                             __pdataCOMRAM 0045  
                              ??_isalpha 0016                                ??_isdigit 0013  
    __end_of_setMultiplexerAndBankRelays 0BAC              _setMultiplexerAndBankRelays 0A1C  
                           __mediumconst 7D72                                ??_isspace 0013  
                              ??_ispunct 0013                                   tblptrh 000FF7  
                              ??_isupper 0013                                   tblptrl 000FF6  
                                 tblptru 000FF8                      __end_of_AD5172_Read 1084  
                     main@CompressorFlag 00B3                      __end_of_AD5172_Stop 159A  
                          ?_AD5172_Start 0001                                ??_toupper 0001  
                          ?_AD5172_Write 0014                               __accesstop 0060  
                __end_of__initialization 1018                      send_Acknowledge@ack 0013  
                       ??_i2c_SlaveWrite 0015                           __pcstackCOMRAM 0001  
                           __pidataBANK1 12A2                 __size_of_AD5172_SendByte 0020  
                            ?_Read_b_eep 0013                            __end_of_putch 15FC  
                         parseInString@i 00A6                           parseInString@j 00A5  
                         parseInString@k 00A1                      AD5172_Read@dataByte 0018  
                         ??_AD5172_Start 0013                           ??_AD5172_Write 0015  
                        __CFG_LPT1OSC$ON 000000                                  ??_putch 0013  
                         i2c_SlaveRead@i 0018                         _send_Acknowledge 1458  
                             __pbssBANK0 00B7                               __pbssBANK1 0100  
                     _AD5172_ReceiveByte 14F8                                ?_Busy_eep 0001  
                   setProgramSupply@mode 0013                      ?_AD5172_ReceiveByte 0013  
                 __size_of_parseInString 0522                                  ?___wmul 0013  
                       _turnCompressorOn 1482                          _initializePorts 0F42  
                                _ACKSTAT 007E2E                            ??_Write_b_eep 0016  
                                ?_printf 001F                   AD5172_ReceiveByte@byte 0015  
                            _AD5172_Read 1022                                  _T1CKPS0 007E6C  
                                _T1CKPS1 007E6D                                  ?_strcmp 0013  
                            _AD5172_Stop 157E                         _multiplexChannel 003A  
        setMultiplexerAndBankRelays@bank 0029                     ??_AD5172_ReceiveByte 0015  
        setMultiplexerAndBankRelays@temp 0021                          __CFG_WDTPS$4096 000000  
                                _SSPCON1 000FC6                                  _SSPSTAT 000FC7  
                    __size_of_Read_b_eep 0012                                  _DelayMs 121C  
                             ??_Busy_eep 0013                                  __Hparam 0000  
                        AD5172_Read@temp 001A                                  __Lparam 0000  
                                ___awdiv 0E9E                     i2c_SlaveWrite@device 0015  
                        __size_of___wmul 0026                                  ___lwdiv 1138  
                                ___lwmod 1260                                  __pcinit 0FB4  
                                __ramtop 0800                                  __ptext0 053E  
                                __ptext1 1482                                  __ptext2 14AA  
                                __ptext3 1394                                  __ptext4 1608  
                                __ptext5 13CC                                  __ptext6 0A1C  
                                __ptext7 0E9E                                  __ptext8 121C  
                                __ptext9 0BAC                          __size_of_printf 0158  
                        __size_of_strcmp 004A                        ??_AD5172_SendByte 0013  
                                _dpowers 7D73                                  _isalpha 1402  
                                _isdigit 153E                             __size_of_isr 0DCC  
                                _isspace 142E                                  _ispunct 12E4  
                                _isupper 151E                      __end_of_Write_b_eep 13CC  
                                _timeout 0043                            _parseInString 001C  
                         __pintcode_body 0D04                                  _toupper 15B6  
                   end_of_initialization 1018                 __end_of_setProgramSupply 1402  
                                isr@temp 0011                            __Lmediumconst 7D72  
                                int_func 0D04                  __end_of_initializePorts 0FB4  
                                printf@c 0038                                  printf@f 001F  
                __size_of_initialize_I2C 0012                                  postdec1 000FE5  
                                postdec2 000FDD                    __end_of_i2c_SlaveRead 10E4  
                                postinc0 000FEE                                  postinc1 000FE6  
                                postinc2 000FDE                     __end_of_AD5172_Start 15B6  
                   __end_of_AD5172_Write 121C                     parseInString@command 00A4  
                                strcmp@r 0018                                _PORTAbits 000F80  
                              _PORTBbits 000F81                                _PORTDbits 000F83  
                              _PORTEbits 000F84       setMultiplexerAndBankRelays@channel 0023  
                         ?_parseInString 0001                             ??_Read_b_eep 0015  
               __end_of_send_Acknowledge 1482                           __end_of___wmul 14F8  
                          __pidataCOMRAM 160E                              _Write_b_eep 1394  
                         __end_of_printf 0D04                           __end_of_strcmp 11D4  
                    start_initialization 0FB4                 __size_of_get_Acknowledge 000C  
                            __end_of_isr 0DD4                 __end_of_turnCompressorOn 14AA  
            AD5172_Write@instructionByte 0016                          parseInString@ch 00A7  
                    _OTP_Validation_Flag 003E                       __end_of_Read_b_eep 15F0  
                      AD5172_Read@status 001C                 parseInString@alphaString 0080  
                      __size_of_Busy_eep 0006                         ?_initializePorts 0001  
                     parseInString@F5704 00B7                       parseInString@F5706 00D7  
                               ??___wmul 0017                              __pdataBANK1 0182  
             i2c_SlaveWrite@numDataBytes 0014                                 ??_printf 002D  
                 i2c_SlaveWrite@dataByte 0016                             ?_AD5172_Read 0016  
                               ??_strcmp 0017                      AD5172_Set@potSelect 0014  
                           ?_AD5172_Stop 0001                       parseInString@value 00A2  
                        ??_parseInString 0020                              __pbssCOMRAM 003A  
                          __pcstackBANK0 0060                             _isalpha$1207 0017  
                    __end_of__stringdata 7FFE                          i2c_SlaveWrite@i 0017  
                           _isdigit$1210 0014                  __size_of_AD5172_Program 003A  
                               ?_DelayMs 0013                      AD5172_SendByte@byte 0013  
           parseInString@punctuationChar 00A0                    __size_of_AD5172_Start 001C  
                  __size_of_AD5172_Write 0048                         ___lwdiv@dividend 0013  
                         _initialize_I2C 15CC                          _AD5172_SendByte 155E  
                              __pintcode 0008                              _boardSelect 0040  
                          __pmediumconst 7D72                                 ?___awdiv 0013  
                               ?___lwdiv 0013                                 ?___lwmod 001A  
                             _AD5172_Set 1320                        _turnCompressorOff 14AA  
 setMultiplexerAndBankRelays@boardSelect 0028                       ?_turnCompressorOff 0001  
                __size_of_i2c_SlaveWrite 0054                                 ?_isalpha 0001  
                               ?_isdigit 0001                                 ?_isspace 0001  
            __size_of_AD5172_ReceiveByte 0026                                 ?_ispunct 0001  
                               ?_isupper 0001                         ___lwdiv@quotient 0018  
                              _errorFlag 0041                      ??_turnCompressorOff 0018  
                               ?_toupper 0001                             _AD5172_Start 159A  
                         __size_of_putch 000C                             _AD5172_Write 11D4  
                      ?_setProgramSupply 0001                    i2c_SlaveRead@numBytes 0016  
                         ___wmul@product 0017                        ??_get_Acknowledge 0013  
                               DelayMs@i 0013                                 DelayMs@j 0015  
                               DelayMs@k 0017                       ??_setProgramSupply 0013  
                 __end_of_initialize_I2C 15DE                                _potSelect 0045  
                              _outBuffer 0182                __end_of_turnCompressorOff 14D2  
                               _UARTflag 003F                              __stringdata 7D7D  
                      ___wmul@multiplier 0013                          Write_b_eep@badd 0013  
                        Write_b_eep@bdat 0015                               printf@_val 0033  
                             printf@flag 002F                               printf@prec 0030  
           ?_setMultiplexerAndBankRelays 001B                             _isspace$1215 0014  
                              copy_data0 0FEC                                copy_data1 100C  
                               _Busy_eep 1608                  __end_of_AD5172_SendByte 157E  
                       __size_of_DelayMs 0044                               _EECON1bits 000FA6  
                        ?_initialize_I2C 0001                                 __Hrparam 0000  
                               __Lrparam 0000                    AD5172_Write@potSelect 0015  
                            ?_AD5172_Set 0001                         __size_of___awdiv 00A4  
                       __size_of___lwdiv 0052                         __size_of___lwmod 0042  
                      ?_send_Acknowledge 0001                             ?_Write_b_eep 0013  
                     ??_send_Acknowledge 0013                             _isupper$1218 0014  
                   __size_of_AD5172_Read 0062                     __size_of_AD5172_Stop 001C  
                       __size_of_isalpha 002C                         __size_of_isdigit 0020  
                               _inBuffer 0141                          ___lwdiv@divisor 0015  
                       __size_of_isspace 002A                          ___lwdiv@counter 0017  
                       __size_of_ispunct 003C                                 __ptext10 15F0  
                               __ptext11 1260                                 __ptext20 153E  
                               __ptext12 1138                                 __ptext21 14D2  
                               __ptext13 001C                                 __ptext30 1458  
                               __ptext22 15CC                                 __ptext14 118A  
                               __ptext31 14F8                                 __ptext23 0F42  
                               __ptext15 142E                                 __ptext32 135A  
                               __ptext24 10E4                                 __ptext16 12E4  
                               __ptext33 15FC                                 __ptext25 1084  
                               __ptext17 1402                                 __ptext34 157E  
                               __ptext26 15DE                                 __ptext18 151E  
                               __ptext35 159A                                 __ptext27 11D4  
                               __ptext19 0DD4                                 __ptext36 155E  
                               __ptext28 1320                                 __ptext29 1022  
                               __ptext38 15B6                         __size_of_isupper 0020  
          ??_setMultiplexerAndBankRelays 001D                           _AD5172_Program 135A  
                 __size_of_i2c_SlaveRead 0060                        ?_turnCompressorOn 0001  
                       __size_of_toupper 0016                       ??_turnCompressorOn 0018  
                          __size_of_atoi 00CA                            __size_of_main 04DE  
                   AD5172_Write@dataByte 0014                                 _slavePIC 0042  
                               _potValue 003C               __size_of_turnCompressorOff 0028  
                               atoi@sign 001D                    __CFG_CPUDIV$OSC1_PLL2 000000  
                         _i2c_SlaveWrite 10E4                                putch@byte 0013  
                             _INTCONbits 000FF2                                 isr@dummy 0010  
                 __end_of_AD5172_Program 1394                                 isalpha@c 0018  
                               isdigit@c 0015                             _sensorNumber 0047  
                               intlevel2 0000                      __size_of_AD5172_Set 003A  
                       ___lwmod@dividend 001A                                 isspace@c 0015  
                       ?_AD5172_SendByte 0001                      i2c_SlaveRead@device 0017  
                               ispunct@c 0013                                 isupper@c 0015  
   __size_of_setMultiplexerAndBankRelays 0190  setMultiplexerAndBankRelays@sensorNumber 001B  
                               printf@ap 0031                            _i2c_SlaveRead 1084  
               __size_of_initializePorts 0072                   __end_of_i2c_SlaveWrite 1138  
                               strcmp@s1 0013                                 strcmp@s2 0015  
                        ___lwmod@divisor 001C                          ___lwmod@counter 001E  
                        _get_Acknowledge 15FC                                 toupper@c 0001  
                 parseInString@numString 0060                          ?_AD5172_Program 0001  
                  __end_of_parseInString 053E                               _UARTbuffer 0100  
    setMultiplexerAndBankRelays@dividend 0026  
